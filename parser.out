shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 4 resolved as shift.
shift/reduce conflict in state 4 resolved as shift.
shift/reduce conflict in state 4 resolved as shift.
shift/reduce conflict in state 4 resolved as shift.
shift/reduce conflict in state 4 resolved as shift.
shift/reduce conflict in state 4 resolved as shift.
shift/reduce conflict in state 4 resolved as shift.
shift/reduce conflict in state 4 resolved as shift.
shift/reduce conflict in state 4 resolved as shift.
shift/reduce conflict in state 4 resolved as shift.
shift/reduce conflict in state 4 resolved as shift.
shift/reduce conflict in state 5 resolved as shift.
shift/reduce conflict in state 5 resolved as shift.
shift/reduce conflict in state 5 resolved as shift.
shift/reduce conflict in state 5 resolved as shift.
shift/reduce conflict in state 5 resolved as shift.
shift/reduce conflict in state 5 resolved as shift.
shift/reduce conflict in state 5 resolved as shift.
shift/reduce conflict in state 5 resolved as shift.
shift/reduce conflict in state 5 resolved as shift.
shift/reduce conflict in state 5 resolved as shift.
shift/reduce conflict in state 5 resolved as shift.
shift/reduce conflict in state 15 resolved as shift.
shift/reduce conflict in state 15 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 30 resolved as shift.
shift/reduce conflict in state 30 resolved as shift.
shift/reduce conflict in state 30 resolved as shift.
shift/reduce conflict in state 30 resolved as shift.
shift/reduce conflict in state 30 resolved as shift.
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
shift/reduce conflict in state 30 resolved as shift.
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
shift/reduce conflict in state 30 resolved as shift.
shift/reduce conflict in state 30 resolved as shift.
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
shift/reduce conflict in state 30 resolved as shift.
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 30 resolved using rule 96 (name_attr -> NAME .).
shift/reduce conflict in state 35 resolved as shift.
shift/reduce conflict in state 35 resolved as shift.
shift/reduce conflict in state 35 resolved as shift.
shift/reduce conflict in state 37 resolved as shift.
shift/reduce conflict in state 43 resolved as shift.
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
shift/reduce conflict in state 43 resolved as shift.
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
reduce/reduce conflict in state 43 resolved using rule 96 (name_attr -> NAME .).
shift/reduce conflict in state 43 resolved as shift.
shift/reduce conflict in state 45 resolved as shift.
shift/reduce conflict in state 45 resolved as shift.
shift/reduce conflict in state 45 resolved as shift.
shift/reduce conflict in state 47 resolved as shift.
shift/reduce conflict in state 47 resolved as shift.
shift/reduce conflict in state 47 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 51 resolved as shift.
shift/reduce conflict in state 51 resolved as shift.
shift/reduce conflict in state 51 resolved as shift.
shift/reduce conflict in state 54 resolved as shift.
shift/reduce conflict in state 54 resolved as shift.
shift/reduce conflict in state 54 resolved as shift.
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 55 resolved using rule 2 (statement_list -> statement COMMA .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
reduce/reduce conflict in state 56 resolved using rule 3 (statement_list -> statement SEMICOLON .).
shift/reduce conflict in state 57 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 62 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 64 resolved as shift.
shift/reduce conflict in state 64 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 72 resolved as shift.
shift/reduce conflict in state 72 resolved as shift.
shift/reduce conflict in state 72 resolved as shift.
shift/reduce conflict in state 72 resolved as shift.
shift/reduce conflict in state 72 resolved as shift.
shift/reduce conflict in state 72 resolved as shift.
shift/reduce conflict in state 72 resolved as shift.
shift/reduce conflict in state 72 resolved as shift.
shift/reduce conflict in state 72 resolved as shift.
shift/reduce conflict in state 72 resolved as shift.
shift/reduce conflict in state 72 resolved as shift.
shift/reduce conflict in state 75 resolved as shift.
shift/reduce conflict in state 76 resolved as shift.
shift/reduce conflict in state 76 resolved as shift.
shift/reduce conflict in state 76 resolved as shift.
shift/reduce conflict in state 104 resolved as shift.
shift/reduce conflict in state 104 resolved as shift.
shift/reduce conflict in state 104 resolved as shift.
shift/reduce conflict in state 104 resolved as shift.
shift/reduce conflict in state 104 resolved as shift.
shift/reduce conflict in state 104 resolved as shift.
shift/reduce conflict in state 104 resolved as shift.
shift/reduce conflict in state 104 resolved as shift.
shift/reduce conflict in state 104 resolved as shift.
shift/reduce conflict in state 104 resolved as shift.
shift/reduce conflict in state 104 resolved as shift.
shift/reduce conflict in state 105 resolved as shift.
shift/reduce conflict in state 105 resolved as shift.
shift/reduce conflict in state 105 resolved as shift.
shift/reduce conflict in state 105 resolved as shift.
shift/reduce conflict in state 105 resolved as shift.
shift/reduce conflict in state 105 resolved as shift.
shift/reduce conflict in state 105 resolved as shift.
shift/reduce conflict in state 105 resolved as shift.
shift/reduce conflict in state 105 resolved as shift.
shift/reduce conflict in state 105 resolved as shift.
shift/reduce conflict in state 105 resolved as shift.
shift/reduce conflict in state 107 resolved as shift.
shift/reduce conflict in state 107 resolved as shift.
shift/reduce conflict in state 107 resolved as shift.
shift/reduce conflict in state 109 resolved as shift.
shift/reduce conflict in state 109 resolved as shift.
shift/reduce conflict in state 111 resolved as shift.
shift/reduce conflict in state 111 resolved as shift.
shift/reduce conflict in state 111 resolved as shift.
shift/reduce conflict in state 117 resolved as shift.
shift/reduce conflict in state 117 resolved as shift.
shift/reduce conflict in state 117 resolved as shift.
shift/reduce conflict in state 118 resolved as shift.
shift/reduce conflict in state 118 resolved as shift.
shift/reduce conflict in state 120 resolved as shift.
shift/reduce conflict in state 120 resolved as shift.
shift/reduce conflict in state 121 resolved as shift.
shift/reduce conflict in state 121 resolved as shift.
shift/reduce conflict in state 126 resolved as shift.
shift/reduce conflict in state 126 resolved as shift.
shift/reduce conflict in state 126 resolved as shift.
shift/reduce conflict in state 127 resolved as shift.
shift/reduce conflict in state 127 resolved as shift.
shift/reduce conflict in state 127 resolved as shift.
shift/reduce conflict in state 131 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 132 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 133 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 134 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 137 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 143 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 145 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 146 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 148 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 151 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 152 resolved as shift.
shift/reduce conflict in state 154 resolved as shift.
shift/reduce conflict in state 154 resolved as shift.
shift/reduce conflict in state 154 resolved as shift.
shift/reduce conflict in state 155 resolved as shift.
shift/reduce conflict in state 155 resolved as shift.
shift/reduce conflict in state 155 resolved as shift.
shift/reduce conflict in state 156 resolved as shift.
shift/reduce conflict in state 156 resolved as shift.
shift/reduce conflict in state 156 resolved as shift.
shift/reduce conflict in state 159 resolved as shift.
shift/reduce conflict in state 162 resolved as shift.
shift/reduce conflict in state 162 resolved as shift.
shift/reduce conflict in state 162 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
shift/reduce conflict in state 173 resolved as shift.
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
reduce/reduce conflict in state 173 resolved using rule 100 (slice -> expression : expression : expression .).
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 174 resolved as shift.
shift/reduce conflict in state 176 resolved as shift.


Unused terminals:

   COMMENT

Grammar

Rule 1     statement_list -> statement
Rule 2     statement_list -> statement COMMA
Rule 3     statement_list -> statement SEMICOLON
Rule 4     statement_list -> statement_list SEMICOLON statement
Rule 5     statement_list -> statement_list COMMA statement
Rule 6     statement_list -> statement_list statement
Rule 7     statement -> statement SEMICOLON
Rule 8     statement -> statement COMMA
Rule 9     statement -> expression
Rule 10    statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN
Rule 11    statement -> FUNCTION LBRACKET name_list RBRACKET = NAME
Rule 12    statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN
Rule 13    statement -> FUNCTION NAME = NAME
Rule 14    statement -> FUNCTION NAME LPAREN name_list RPAREN
Rule 15    statement -> FUNCTION NAME
Rule 16    expression -> LAMBDA NAME
Rule 17    name_list -> name_list COMMA NAME
Rule 18    name_list -> NAME
Rule 19    expression -> LAMBDA LPAREN name_list RPAREN expression
Rule 20    statement -> FOR NAME = expression
Rule 21    statement -> WHILE expression
Rule 22    statement -> IF expression
Rule 23    statement -> ELSEIF expression
Rule 24    statement -> ELSE
Rule 25    statement -> BREAK
Rule 26    statement -> CONTINUE
Rule 27    statement -> RETURN
Rule 28    statement -> SWITCH expression
Rule 29    statement -> CASE expression
Rule 30    statement -> OTHERWISE
Rule 31    statement -> GLOBAL list_spaces
Rule 32    statement -> PERSISTENT list_spaces
Rule 33    list_spaces -> list_spaces NAME
Rule 34    list_spaces -> NAME
Rule 35    statement -> TRY
Rule 36    statement -> CATCH
Rule 37    statement -> END
Rule 38    statement -> name_sub = expression
Rule 39    statement -> name_attr = expression
Rule 40    statement -> exprmcat = expression
Rule 41    statement -> NAME = expression
Rule 42    statement -> NAME NAME
Rule 43    statement -> NAME NUMBER
Rule 44    exprlist -> exprlist COMMA expression
Rule 45    exprlist -> expression
Rule 46    exprinlist -> exprinlist COMMA expression
Rule 47    exprinlist -> exprinlist SEMICOLON expression
Rule 48    exprinlist -> exprinlist NEWLINE expression
Rule 49    exprinlist -> exprinlist expression
Rule 50    exprinlist -> exprinlist SEMICOLON
Rule 51    exprinlist -> exprinlist COMMA
Rule 52    statement -> empty
Rule 53    exprinlist -> empty
Rule 54    empty -> <empty>
Rule 55    exprinlist -> expression
Rule 56    expression -> expression + expression
Rule 57    expression -> expression - expression
Rule 58    expression -> expression * expression
Rule 59    expression -> expression / expression
Rule 60    expression -> expression \ expression
Rule 61    expression -> expression ^ expression
Rule 62    expression -> expression DOTTIMES expression
Rule 63    expression -> expression DOTDIVIDE expression
Rule 64    expression -> expression DOTRDIVIDE expression
Rule 65    expression -> expression DOTPOWER expression
Rule 66    expression -> expression NOTEQUAL expression
Rule 67    expression -> expression ISEQUAL expression
Rule 68    expression -> expression LESS expression
Rule 69    expression -> expression GREATER expression
Rule 70    expression -> expression LESSEQUAL expression
Rule 71    expression -> expression GREATEREQUAL expression
Rule 72    expression -> expression ELAND expression
Rule 73    expression -> expression ELOR expression
Rule 74    expression -> expression AND expression
Rule 75    expression -> expression OR expression
Rule 76    expression -> NOT expression
Rule 77    expression -> - expression
Rule 78    cmd_option -> - NAME
Rule 79    expression -> + expression
Rule 80    expression -> LPAREN exprlist RPAREN
Rule 81    expression -> NAME LPAREN RPAREN
Rule 82    expression -> exprmcat
Rule 83    exprmcat -> LBRACKET exprinlist RBRACKET
Rule 84    expression -> LCURLY exprinlist RCURLY
Rule 85    expression -> expression CONJTRANS
Rule 86    expression -> expression TRANS
Rule 87    expression -> STRING
Rule 88    indexflat -> LPAREN : RPAREN
Rule 89    expression -> :
Rule 90    expression -> NAME indexflat
Rule 91    name_sub -> NAME LPAREN exprlist RPAREN
Rule 92    name_attr -> name_sub . NAME
Rule 93    name_attr -> name_attr . NAME
Rule 94    name_attr -> name_attr . name_sub
Rule 95    name_attr -> name_sub . name_sub
Rule 96    name_attr -> NAME
Rule 97    expression -> name_attr
Rule 98    name_sub -> NAME LCURLY exprinlist RCURLY
Rule 99    expression -> name_sub
Rule 100   slice -> expression : expression : expression
Rule 101   slice -> expression : expression
Rule 102   expression -> slice
Rule 103   expression -> NUMBER
Rule 104   expression -> NAME

Terminals, with rules where they appear

*                    : 58
+                    : 56 79
-                    : 57 77 78
.                    : 92 93 94 95
/                    : 59
:                    : 88 89 100 100 101
=                    : 10 11 12 13 20 38 39 40 41
AND                  : 74
BREAK                : 25
CASE                 : 29
CATCH                : 36
COMMA                : 2 5 8 17 44 46 51
COMMENT              : 
CONJTRANS            : 85
CONTINUE             : 26
DOTDIVIDE            : 63
DOTPOWER             : 65
DOTRDIVIDE           : 64
DOTTIMES             : 62
ELAND                : 72
ELOR                 : 73
ELSE                 : 24
ELSEIF               : 23
END                  : 37
FOR                  : 20
FUNCTION             : 10 11 12 13 14 15
GLOBAL               : 31
GREATER              : 69
GREATEREQUAL         : 71
IF                   : 22
ISEQUAL              : 67
LAMBDA               : 16 19
LBRACKET             : 10 11 83
LCURLY               : 84 98
LESS                 : 68
LESSEQUAL            : 70
LPAREN               : 10 12 14 19 80 81 88 91
NAME                 : 10 11 12 12 13 13 14 15 16 17 18 20 33 34 41 42 42 43 78 81 90 91 92 93 96 98 104
NEWLINE              : 48
NOT                  : 76
NOTEQUAL             : 66
NUMBER               : 43 103
OR                   : 75
OTHERWISE            : 30
PERSISTENT           : 32
RBRACKET             : 10 11 83
RCURLY               : 84 98
RETURN               : 27
RPAREN               : 10 12 14 19 80 81 88 91
SEMICOLON            : 3 4 7 47 50
STRING               : 87
SWITCH               : 28
TRANS                : 86
TRY                  : 35
WHILE                : 21
\                    : 60
^                    : 61
error                : 

Nonterminals, with rules where they appear

cmd_option           : 
empty                : 52 53
expression           : 9 19 20 21 22 23 28 29 38 39 40 41 44 45 46 47 48 49 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 77 79 85 86 100 100 100 101 101
exprinlist           : 46 47 48 49 50 51 83 84 98
exprlist             : 44 80 91
exprmcat             : 40 82
indexflat            : 90
list_spaces          : 31 32 33
name_attr            : 39 93 94 97
name_list            : 10 10 11 12 14 17 19
name_sub             : 38 92 94 95 95 99
slice                : 102
statement            : 1 2 3 4 5 6 7 8
statement_list       : 4 5 6 0


Parsing method: LALR


state 0

    (0) S' -> . statement_list
    (1) statement_list -> . statement
    (2) statement_list -> . statement COMMA
    (3) statement_list -> . statement SEMICOLON
    (4) statement_list -> . statement_list SEMICOLON statement
    (5) statement_list -> . statement_list COMMA statement
    (6) statement_list -> . statement_list statement
    (7) statement -> . statement SEMICOLON
    (8) statement -> . statement COMMA
    (9) statement -> . expression
    (10) statement -> . FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN
    (11) statement -> . FUNCTION LBRACKET name_list RBRACKET = NAME
    (12) statement -> . FUNCTION NAME = NAME LPAREN name_list RPAREN
    (13) statement -> . FUNCTION NAME = NAME
    (14) statement -> . FUNCTION NAME LPAREN name_list RPAREN
    (15) statement -> . FUNCTION NAME
    (20) statement -> . FOR NAME = expression
    (21) statement -> . WHILE expression
    (22) statement -> . IF expression
    (23) statement -> . ELSEIF expression
    (24) statement -> . ELSE
    (25) statement -> . BREAK
    (26) statement -> . CONTINUE
    (27) statement -> . RETURN
    (28) statement -> . SWITCH expression
    (29) statement -> . CASE expression
    (30) statement -> . OTHERWISE
    (31) statement -> . GLOBAL list_spaces
    (32) statement -> . PERSISTENT list_spaces
    (35) statement -> . TRY
    (36) statement -> . CATCH
    (37) statement -> . END
    (38) statement -> . name_sub = expression
    (39) statement -> . name_attr = expression
    (40) statement -> . exprmcat = expression
    (41) statement -> . NAME = expression
    (42) statement -> . NAME NAME
    (43) statement -> . NAME NUMBER
    (52) statement -> . empty
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (54) empty -> .
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

  ! shift/reduce conflict for FUNCTION resolved as shift.
  ! shift/reduce conflict for FOR resolved as shift.
  ! shift/reduce conflict for WHILE resolved as shift.
  ! shift/reduce conflict for IF resolved as shift.
  ! shift/reduce conflict for ELSEIF resolved as shift.
  ! shift/reduce conflict for ELSE resolved as shift.
  ! shift/reduce conflict for BREAK resolved as shift.
  ! shift/reduce conflict for CONTINUE resolved as shift.
  ! shift/reduce conflict for RETURN resolved as shift.
  ! shift/reduce conflict for SWITCH resolved as shift.
  ! shift/reduce conflict for CASE resolved as shift.
  ! shift/reduce conflict for OTHERWISE resolved as shift.
  ! shift/reduce conflict for GLOBAL resolved as shift.
  ! shift/reduce conflict for PERSISTENT resolved as shift.
  ! shift/reduce conflict for TRY resolved as shift.
  ! shift/reduce conflict for CATCH resolved as shift.
  ! shift/reduce conflict for END resolved as shift.
  ! shift/reduce conflict for NAME resolved as shift.
  ! shift/reduce conflict for LAMBDA resolved as shift.
  ! shift/reduce conflict for NOT resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for LCURLY resolved as shift.
  ! shift/reduce conflict for STRING resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for LBRACKET resolved as shift.
    FUNCTION        shift and go to state 19
    FOR             shift and go to state 21
    WHILE           shift and go to state 6
    IF              shift and go to state 28
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 23
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    SWITCH          shift and go to state 14
    CASE            shift and go to state 10
    OTHERWISE       shift and go to state 9
    GLOBAL          shift and go to state 2
    PERSISTENT      shift and go to state 31
    TRY             shift and go to state 24
    CATCH           shift and go to state 16
    END             shift and go to state 20
    NAME            shift and go to state 30
    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4
    COMMA           reduce using rule 54 (empty -> .)
    SEMICOLON       reduce using rule 54 (empty -> .)
    $end            reduce using rule 54 (empty -> .)

  ! FUNCTION        [ reduce using rule 54 (empty -> .) ]
  ! FOR             [ reduce using rule 54 (empty -> .) ]
  ! WHILE           [ reduce using rule 54 (empty -> .) ]
  ! IF              [ reduce using rule 54 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 54 (empty -> .) ]
  ! ELSE            [ reduce using rule 54 (empty -> .) ]
  ! BREAK           [ reduce using rule 54 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 54 (empty -> .) ]
  ! RETURN          [ reduce using rule 54 (empty -> .) ]
  ! SWITCH          [ reduce using rule 54 (empty -> .) ]
  ! CASE            [ reduce using rule 54 (empty -> .) ]
  ! OTHERWISE       [ reduce using rule 54 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 54 (empty -> .) ]
  ! PERSISTENT      [ reduce using rule 54 (empty -> .) ]
  ! TRY             [ reduce using rule 54 (empty -> .) ]
  ! CATCH           [ reduce using rule 54 (empty -> .) ]
  ! END             [ reduce using rule 54 (empty -> .) ]
  ! NAME            [ reduce using rule 54 (empty -> .) ]
  ! LAMBDA          [ reduce using rule 54 (empty -> .) ]
  ! NOT             [ reduce using rule 54 (empty -> .) ]
  ! -               [ reduce using rule 54 (empty -> .) ]
  ! +               [ reduce using rule 54 (empty -> .) ]
  ! LPAREN          [ reduce using rule 54 (empty -> .) ]
  ! LCURLY          [ reduce using rule 54 (empty -> .) ]
  ! STRING          [ reduce using rule 54 (empty -> .) ]
  ! :               [ reduce using rule 54 (empty -> .) ]
  ! NUMBER          [ reduce using rule 54 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 54 (empty -> .) ]

    slice                          shift and go to state 11
    name_attr                      shift and go to state 7
    name_sub                       shift and go to state 22
    empty                          shift and go to state 18
    statement                      shift and go to state 15
    statement_list                 shift and go to state 25
    expression                     shift and go to state 35
    exprmcat                       shift and go to state 27

state 1

    (27) statement -> RETURN .

    COMMA           reduce using rule 27 (statement -> RETURN .)
    SEMICOLON       reduce using rule 27 (statement -> RETURN .)
    FUNCTION        reduce using rule 27 (statement -> RETURN .)
    FOR             reduce using rule 27 (statement -> RETURN .)
    WHILE           reduce using rule 27 (statement -> RETURN .)
    IF              reduce using rule 27 (statement -> RETURN .)
    ELSEIF          reduce using rule 27 (statement -> RETURN .)
    ELSE            reduce using rule 27 (statement -> RETURN .)
    BREAK           reduce using rule 27 (statement -> RETURN .)
    CONTINUE        reduce using rule 27 (statement -> RETURN .)
    RETURN          reduce using rule 27 (statement -> RETURN .)
    SWITCH          reduce using rule 27 (statement -> RETURN .)
    CASE            reduce using rule 27 (statement -> RETURN .)
    OTHERWISE       reduce using rule 27 (statement -> RETURN .)
    GLOBAL          reduce using rule 27 (statement -> RETURN .)
    PERSISTENT      reduce using rule 27 (statement -> RETURN .)
    TRY             reduce using rule 27 (statement -> RETURN .)
    CATCH           reduce using rule 27 (statement -> RETURN .)
    END             reduce using rule 27 (statement -> RETURN .)
    NAME            reduce using rule 27 (statement -> RETURN .)
    LAMBDA          reduce using rule 27 (statement -> RETURN .)
    NOT             reduce using rule 27 (statement -> RETURN .)
    -               reduce using rule 27 (statement -> RETURN .)
    +               reduce using rule 27 (statement -> RETURN .)
    LPAREN          reduce using rule 27 (statement -> RETURN .)
    LCURLY          reduce using rule 27 (statement -> RETURN .)
    STRING          reduce using rule 27 (statement -> RETURN .)
    :               reduce using rule 27 (statement -> RETURN .)
    NUMBER          reduce using rule 27 (statement -> RETURN .)
    LBRACKET        reduce using rule 27 (statement -> RETURN .)
    $end            reduce using rule 27 (statement -> RETURN .)



state 2

    (31) statement -> GLOBAL . list_spaces
    (33) list_spaces -> . list_spaces NAME
    (34) list_spaces -> . NAME

    NAME            shift and go to state 38


    list_spaces                    shift and go to state 37

state 3

    (103) expression -> NUMBER .

    +               reduce using rule 103 (expression -> NUMBER .)
    -               reduce using rule 103 (expression -> NUMBER .)
    *               reduce using rule 103 (expression -> NUMBER .)
    /               reduce using rule 103 (expression -> NUMBER .)
    \               reduce using rule 103 (expression -> NUMBER .)
    ^               reduce using rule 103 (expression -> NUMBER .)
    DOTTIMES        reduce using rule 103 (expression -> NUMBER .)
    DOTDIVIDE       reduce using rule 103 (expression -> NUMBER .)
    DOTRDIVIDE      reduce using rule 103 (expression -> NUMBER .)
    DOTPOWER        reduce using rule 103 (expression -> NUMBER .)
    NOTEQUAL        reduce using rule 103 (expression -> NUMBER .)
    ISEQUAL         reduce using rule 103 (expression -> NUMBER .)
    LESS            reduce using rule 103 (expression -> NUMBER .)
    GREATER         reduce using rule 103 (expression -> NUMBER .)
    LESSEQUAL       reduce using rule 103 (expression -> NUMBER .)
    GREATEREQUAL    reduce using rule 103 (expression -> NUMBER .)
    ELAND           reduce using rule 103 (expression -> NUMBER .)
    ELOR            reduce using rule 103 (expression -> NUMBER .)
    AND             reduce using rule 103 (expression -> NUMBER .)
    OR              reduce using rule 103 (expression -> NUMBER .)
    CONJTRANS       reduce using rule 103 (expression -> NUMBER .)
    TRANS           reduce using rule 103 (expression -> NUMBER .)
    :               reduce using rule 103 (expression -> NUMBER .)
    RBRACKET        reduce using rule 103 (expression -> NUMBER .)
    COMMA           reduce using rule 103 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 103 (expression -> NUMBER .)
    NEWLINE         reduce using rule 103 (expression -> NUMBER .)
    LAMBDA          reduce using rule 103 (expression -> NUMBER .)
    NOT             reduce using rule 103 (expression -> NUMBER .)
    LPAREN          reduce using rule 103 (expression -> NUMBER .)
    NAME            reduce using rule 103 (expression -> NUMBER .)
    LCURLY          reduce using rule 103 (expression -> NUMBER .)
    STRING          reduce using rule 103 (expression -> NUMBER .)
    NUMBER          reduce using rule 103 (expression -> NUMBER .)
    LBRACKET        reduce using rule 103 (expression -> NUMBER .)
    RCURLY          reduce using rule 103 (expression -> NUMBER .)
    FUNCTION        reduce using rule 103 (expression -> NUMBER .)
    FOR             reduce using rule 103 (expression -> NUMBER .)
    WHILE           reduce using rule 103 (expression -> NUMBER .)
    IF              reduce using rule 103 (expression -> NUMBER .)
    ELSEIF          reduce using rule 103 (expression -> NUMBER .)
    ELSE            reduce using rule 103 (expression -> NUMBER .)
    BREAK           reduce using rule 103 (expression -> NUMBER .)
    CONTINUE        reduce using rule 103 (expression -> NUMBER .)
    RETURN          reduce using rule 103 (expression -> NUMBER .)
    SWITCH          reduce using rule 103 (expression -> NUMBER .)
    CASE            reduce using rule 103 (expression -> NUMBER .)
    OTHERWISE       reduce using rule 103 (expression -> NUMBER .)
    GLOBAL          reduce using rule 103 (expression -> NUMBER .)
    PERSISTENT      reduce using rule 103 (expression -> NUMBER .)
    TRY             reduce using rule 103 (expression -> NUMBER .)
    CATCH           reduce using rule 103 (expression -> NUMBER .)
    END             reduce using rule 103 (expression -> NUMBER .)
    $end            reduce using rule 103 (expression -> NUMBER .)
    RPAREN          reduce using rule 103 (expression -> NUMBER .)



state 4

    (83) exprmcat -> LBRACKET . exprinlist RBRACKET
    (46) exprinlist -> . exprinlist COMMA expression
    (47) exprinlist -> . exprinlist SEMICOLON expression
    (48) exprinlist -> . exprinlist NEWLINE expression
    (49) exprinlist -> . exprinlist expression
    (50) exprinlist -> . exprinlist SEMICOLON
    (51) exprinlist -> . exprinlist COMMA
    (53) exprinlist -> . empty
    (55) exprinlist -> . expression
    (54) empty -> .
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

  ! shift/reduce conflict for LAMBDA resolved as shift.
  ! shift/reduce conflict for NOT resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for NAME resolved as shift.
  ! shift/reduce conflict for LCURLY resolved as shift.
  ! shift/reduce conflict for STRING resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for LBRACKET resolved as shift.
    RBRACKET        reduce using rule 54 (empty -> .)
    COMMA           reduce using rule 54 (empty -> .)
    SEMICOLON       reduce using rule 54 (empty -> .)
    NEWLINE         reduce using rule 54 (empty -> .)
    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4

  ! LAMBDA          [ reduce using rule 54 (empty -> .) ]
  ! NOT             [ reduce using rule 54 (empty -> .) ]
  ! -               [ reduce using rule 54 (empty -> .) ]
  ! +               [ reduce using rule 54 (empty -> .) ]
  ! LPAREN          [ reduce using rule 54 (empty -> .) ]
  ! NAME            [ reduce using rule 54 (empty -> .) ]
  ! LCURLY          [ reduce using rule 54 (empty -> .) ]
  ! STRING          [ reduce using rule 54 (empty -> .) ]
  ! :               [ reduce using rule 54 (empty -> .) ]
  ! NUMBER          [ reduce using rule 54 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 54 (empty -> .) ]

    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    exprinlist                     shift and go to state 44
    name_sub                       shift and go to state 41
    empty                          shift and go to state 39
    expression                     shift and go to state 45
    exprmcat                       shift and go to state 42

state 5

    (84) expression -> LCURLY . exprinlist RCURLY
    (46) exprinlist -> . exprinlist COMMA expression
    (47) exprinlist -> . exprinlist SEMICOLON expression
    (48) exprinlist -> . exprinlist NEWLINE expression
    (49) exprinlist -> . exprinlist expression
    (50) exprinlist -> . exprinlist SEMICOLON
    (51) exprinlist -> . exprinlist COMMA
    (53) exprinlist -> . empty
    (55) exprinlist -> . expression
    (54) empty -> .
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

  ! shift/reduce conflict for LAMBDA resolved as shift.
  ! shift/reduce conflict for NOT resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for NAME resolved as shift.
  ! shift/reduce conflict for LCURLY resolved as shift.
  ! shift/reduce conflict for STRING resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for LBRACKET resolved as shift.
    RCURLY          reduce using rule 54 (empty -> .)
    COMMA           reduce using rule 54 (empty -> .)
    SEMICOLON       reduce using rule 54 (empty -> .)
    NEWLINE         reduce using rule 54 (empty -> .)
    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4

  ! LAMBDA          [ reduce using rule 54 (empty -> .) ]
  ! NOT             [ reduce using rule 54 (empty -> .) ]
  ! -               [ reduce using rule 54 (empty -> .) ]
  ! +               [ reduce using rule 54 (empty -> .) ]
  ! LPAREN          [ reduce using rule 54 (empty -> .) ]
  ! NAME            [ reduce using rule 54 (empty -> .) ]
  ! LCURLY          [ reduce using rule 54 (empty -> .) ]
  ! STRING          [ reduce using rule 54 (empty -> .) ]
  ! :               [ reduce using rule 54 (empty -> .) ]
  ! NUMBER          [ reduce using rule 54 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 54 (empty -> .) ]

    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    exprinlist                     shift and go to state 46
    name_sub                       shift and go to state 41
    empty                          shift and go to state 39
    expression                     shift and go to state 45
    exprmcat                       shift and go to state 42

state 6

    (21) statement -> WHILE . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 47
    exprmcat                       shift and go to state 42

state 7

    (39) statement -> name_attr . = expression
    (97) expression -> name_attr .
    (93) name_attr -> name_attr . . NAME
    (94) name_attr -> name_attr . . name_sub

    =               shift and go to state 49
    +               reduce using rule 97 (expression -> name_attr .)
    -               reduce using rule 97 (expression -> name_attr .)
    *               reduce using rule 97 (expression -> name_attr .)
    /               reduce using rule 97 (expression -> name_attr .)
    \               reduce using rule 97 (expression -> name_attr .)
    ^               reduce using rule 97 (expression -> name_attr .)
    DOTTIMES        reduce using rule 97 (expression -> name_attr .)
    DOTDIVIDE       reduce using rule 97 (expression -> name_attr .)
    DOTRDIVIDE      reduce using rule 97 (expression -> name_attr .)
    DOTPOWER        reduce using rule 97 (expression -> name_attr .)
    NOTEQUAL        reduce using rule 97 (expression -> name_attr .)
    ISEQUAL         reduce using rule 97 (expression -> name_attr .)
    LESS            reduce using rule 97 (expression -> name_attr .)
    GREATER         reduce using rule 97 (expression -> name_attr .)
    LESSEQUAL       reduce using rule 97 (expression -> name_attr .)
    GREATEREQUAL    reduce using rule 97 (expression -> name_attr .)
    ELAND           reduce using rule 97 (expression -> name_attr .)
    ELOR            reduce using rule 97 (expression -> name_attr .)
    AND             reduce using rule 97 (expression -> name_attr .)
    OR              reduce using rule 97 (expression -> name_attr .)
    CONJTRANS       reduce using rule 97 (expression -> name_attr .)
    TRANS           reduce using rule 97 (expression -> name_attr .)
    :               reduce using rule 97 (expression -> name_attr .)
    COMMA           reduce using rule 97 (expression -> name_attr .)
    SEMICOLON       reduce using rule 97 (expression -> name_attr .)
    FUNCTION        reduce using rule 97 (expression -> name_attr .)
    FOR             reduce using rule 97 (expression -> name_attr .)
    WHILE           reduce using rule 97 (expression -> name_attr .)
    IF              reduce using rule 97 (expression -> name_attr .)
    ELSEIF          reduce using rule 97 (expression -> name_attr .)
    ELSE            reduce using rule 97 (expression -> name_attr .)
    BREAK           reduce using rule 97 (expression -> name_attr .)
    CONTINUE        reduce using rule 97 (expression -> name_attr .)
    RETURN          reduce using rule 97 (expression -> name_attr .)
    SWITCH          reduce using rule 97 (expression -> name_attr .)
    CASE            reduce using rule 97 (expression -> name_attr .)
    OTHERWISE       reduce using rule 97 (expression -> name_attr .)
    GLOBAL          reduce using rule 97 (expression -> name_attr .)
    PERSISTENT      reduce using rule 97 (expression -> name_attr .)
    TRY             reduce using rule 97 (expression -> name_attr .)
    CATCH           reduce using rule 97 (expression -> name_attr .)
    END             reduce using rule 97 (expression -> name_attr .)
    NAME            reduce using rule 97 (expression -> name_attr .)
    LAMBDA          reduce using rule 97 (expression -> name_attr .)
    NOT             reduce using rule 97 (expression -> name_attr .)
    LPAREN          reduce using rule 97 (expression -> name_attr .)
    LCURLY          reduce using rule 97 (expression -> name_attr .)
    STRING          reduce using rule 97 (expression -> name_attr .)
    NUMBER          reduce using rule 97 (expression -> name_attr .)
    LBRACKET        reduce using rule 97 (expression -> name_attr .)
    $end            reduce using rule 97 (expression -> name_attr .)
    .               shift and go to state 48



state 8

    (76) expression -> NOT . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 50
    exprmcat                       shift and go to state 42

state 9

    (30) statement -> OTHERWISE .

    COMMA           reduce using rule 30 (statement -> OTHERWISE .)
    SEMICOLON       reduce using rule 30 (statement -> OTHERWISE .)
    FUNCTION        reduce using rule 30 (statement -> OTHERWISE .)
    FOR             reduce using rule 30 (statement -> OTHERWISE .)
    WHILE           reduce using rule 30 (statement -> OTHERWISE .)
    IF              reduce using rule 30 (statement -> OTHERWISE .)
    ELSEIF          reduce using rule 30 (statement -> OTHERWISE .)
    ELSE            reduce using rule 30 (statement -> OTHERWISE .)
    BREAK           reduce using rule 30 (statement -> OTHERWISE .)
    CONTINUE        reduce using rule 30 (statement -> OTHERWISE .)
    RETURN          reduce using rule 30 (statement -> OTHERWISE .)
    SWITCH          reduce using rule 30 (statement -> OTHERWISE .)
    CASE            reduce using rule 30 (statement -> OTHERWISE .)
    OTHERWISE       reduce using rule 30 (statement -> OTHERWISE .)
    GLOBAL          reduce using rule 30 (statement -> OTHERWISE .)
    PERSISTENT      reduce using rule 30 (statement -> OTHERWISE .)
    TRY             reduce using rule 30 (statement -> OTHERWISE .)
    CATCH           reduce using rule 30 (statement -> OTHERWISE .)
    END             reduce using rule 30 (statement -> OTHERWISE .)
    NAME            reduce using rule 30 (statement -> OTHERWISE .)
    LAMBDA          reduce using rule 30 (statement -> OTHERWISE .)
    NOT             reduce using rule 30 (statement -> OTHERWISE .)
    -               reduce using rule 30 (statement -> OTHERWISE .)
    +               reduce using rule 30 (statement -> OTHERWISE .)
    LPAREN          reduce using rule 30 (statement -> OTHERWISE .)
    LCURLY          reduce using rule 30 (statement -> OTHERWISE .)
    STRING          reduce using rule 30 (statement -> OTHERWISE .)
    :               reduce using rule 30 (statement -> OTHERWISE .)
    NUMBER          reduce using rule 30 (statement -> OTHERWISE .)
    LBRACKET        reduce using rule 30 (statement -> OTHERWISE .)
    $end            reduce using rule 30 (statement -> OTHERWISE .)



state 10

    (29) statement -> CASE . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 51
    exprmcat                       shift and go to state 42

state 11

    (102) expression -> slice .

    +               reduce using rule 102 (expression -> slice .)
    -               reduce using rule 102 (expression -> slice .)
    *               reduce using rule 102 (expression -> slice .)
    /               reduce using rule 102 (expression -> slice .)
    \               reduce using rule 102 (expression -> slice .)
    ^               reduce using rule 102 (expression -> slice .)
    DOTTIMES        reduce using rule 102 (expression -> slice .)
    DOTDIVIDE       reduce using rule 102 (expression -> slice .)
    DOTRDIVIDE      reduce using rule 102 (expression -> slice .)
    DOTPOWER        reduce using rule 102 (expression -> slice .)
    NOTEQUAL        reduce using rule 102 (expression -> slice .)
    ISEQUAL         reduce using rule 102 (expression -> slice .)
    LESS            reduce using rule 102 (expression -> slice .)
    GREATER         reduce using rule 102 (expression -> slice .)
    LESSEQUAL       reduce using rule 102 (expression -> slice .)
    GREATEREQUAL    reduce using rule 102 (expression -> slice .)
    ELAND           reduce using rule 102 (expression -> slice .)
    ELOR            reduce using rule 102 (expression -> slice .)
    AND             reduce using rule 102 (expression -> slice .)
    OR              reduce using rule 102 (expression -> slice .)
    CONJTRANS       reduce using rule 102 (expression -> slice .)
    TRANS           reduce using rule 102 (expression -> slice .)
    :               reduce using rule 102 (expression -> slice .)
    RBRACKET        reduce using rule 102 (expression -> slice .)
    COMMA           reduce using rule 102 (expression -> slice .)
    SEMICOLON       reduce using rule 102 (expression -> slice .)
    NEWLINE         reduce using rule 102 (expression -> slice .)
    LAMBDA          reduce using rule 102 (expression -> slice .)
    NOT             reduce using rule 102 (expression -> slice .)
    LPAREN          reduce using rule 102 (expression -> slice .)
    NAME            reduce using rule 102 (expression -> slice .)
    LCURLY          reduce using rule 102 (expression -> slice .)
    STRING          reduce using rule 102 (expression -> slice .)
    NUMBER          reduce using rule 102 (expression -> slice .)
    LBRACKET        reduce using rule 102 (expression -> slice .)
    RCURLY          reduce using rule 102 (expression -> slice .)
    FUNCTION        reduce using rule 102 (expression -> slice .)
    FOR             reduce using rule 102 (expression -> slice .)
    WHILE           reduce using rule 102 (expression -> slice .)
    IF              reduce using rule 102 (expression -> slice .)
    ELSEIF          reduce using rule 102 (expression -> slice .)
    ELSE            reduce using rule 102 (expression -> slice .)
    BREAK           reduce using rule 102 (expression -> slice .)
    CONTINUE        reduce using rule 102 (expression -> slice .)
    RETURN          reduce using rule 102 (expression -> slice .)
    SWITCH          reduce using rule 102 (expression -> slice .)
    CASE            reduce using rule 102 (expression -> slice .)
    OTHERWISE       reduce using rule 102 (expression -> slice .)
    GLOBAL          reduce using rule 102 (expression -> slice .)
    PERSISTENT      reduce using rule 102 (expression -> slice .)
    TRY             reduce using rule 102 (expression -> slice .)
    CATCH           reduce using rule 102 (expression -> slice .)
    END             reduce using rule 102 (expression -> slice .)
    $end            reduce using rule 102 (expression -> slice .)
    RPAREN          reduce using rule 102 (expression -> slice .)



state 12

    (79) expression -> + . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 52
    exprmcat                       shift and go to state 42

state 13

    (77) expression -> - . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 53
    exprmcat                       shift and go to state 42

state 14

    (28) statement -> SWITCH . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 54
    exprmcat                       shift and go to state 42

state 15

    (1) statement_list -> statement .
    (2) statement_list -> statement . COMMA
    (3) statement_list -> statement . SEMICOLON
    (7) statement -> statement . SEMICOLON
    (8) statement -> statement . COMMA

  ! shift/reduce conflict for COMMA resolved as shift.
  ! shift/reduce conflict for SEMICOLON resolved as shift.
    FUNCTION        reduce using rule 1 (statement_list -> statement .)
    FOR             reduce using rule 1 (statement_list -> statement .)
    WHILE           reduce using rule 1 (statement_list -> statement .)
    IF              reduce using rule 1 (statement_list -> statement .)
    ELSEIF          reduce using rule 1 (statement_list -> statement .)
    ELSE            reduce using rule 1 (statement_list -> statement .)
    BREAK           reduce using rule 1 (statement_list -> statement .)
    CONTINUE        reduce using rule 1 (statement_list -> statement .)
    RETURN          reduce using rule 1 (statement_list -> statement .)
    SWITCH          reduce using rule 1 (statement_list -> statement .)
    CASE            reduce using rule 1 (statement_list -> statement .)
    OTHERWISE       reduce using rule 1 (statement_list -> statement .)
    GLOBAL          reduce using rule 1 (statement_list -> statement .)
    PERSISTENT      reduce using rule 1 (statement_list -> statement .)
    TRY             reduce using rule 1 (statement_list -> statement .)
    CATCH           reduce using rule 1 (statement_list -> statement .)
    END             reduce using rule 1 (statement_list -> statement .)
    NAME            reduce using rule 1 (statement_list -> statement .)
    LAMBDA          reduce using rule 1 (statement_list -> statement .)
    NOT             reduce using rule 1 (statement_list -> statement .)
    -               reduce using rule 1 (statement_list -> statement .)
    +               reduce using rule 1 (statement_list -> statement .)
    LPAREN          reduce using rule 1 (statement_list -> statement .)
    LCURLY          reduce using rule 1 (statement_list -> statement .)
    STRING          reduce using rule 1 (statement_list -> statement .)
    :               reduce using rule 1 (statement_list -> statement .)
    NUMBER          reduce using rule 1 (statement_list -> statement .)
    LBRACKET        reduce using rule 1 (statement_list -> statement .)
    $end            reduce using rule 1 (statement_list -> statement .)
    COMMA           shift and go to state 55
    SEMICOLON       shift and go to state 56

  ! SEMICOLON       [ reduce using rule 1 (statement_list -> statement .) ]
  ! COMMA           [ reduce using rule 1 (statement_list -> statement .) ]


state 16

    (36) statement -> CATCH .

    COMMA           reduce using rule 36 (statement -> CATCH .)
    SEMICOLON       reduce using rule 36 (statement -> CATCH .)
    FUNCTION        reduce using rule 36 (statement -> CATCH .)
    FOR             reduce using rule 36 (statement -> CATCH .)
    WHILE           reduce using rule 36 (statement -> CATCH .)
    IF              reduce using rule 36 (statement -> CATCH .)
    ELSEIF          reduce using rule 36 (statement -> CATCH .)
    ELSE            reduce using rule 36 (statement -> CATCH .)
    BREAK           reduce using rule 36 (statement -> CATCH .)
    CONTINUE        reduce using rule 36 (statement -> CATCH .)
    RETURN          reduce using rule 36 (statement -> CATCH .)
    SWITCH          reduce using rule 36 (statement -> CATCH .)
    CASE            reduce using rule 36 (statement -> CATCH .)
    OTHERWISE       reduce using rule 36 (statement -> CATCH .)
    GLOBAL          reduce using rule 36 (statement -> CATCH .)
    PERSISTENT      reduce using rule 36 (statement -> CATCH .)
    TRY             reduce using rule 36 (statement -> CATCH .)
    CATCH           reduce using rule 36 (statement -> CATCH .)
    END             reduce using rule 36 (statement -> CATCH .)
    NAME            reduce using rule 36 (statement -> CATCH .)
    LAMBDA          reduce using rule 36 (statement -> CATCH .)
    NOT             reduce using rule 36 (statement -> CATCH .)
    -               reduce using rule 36 (statement -> CATCH .)
    +               reduce using rule 36 (statement -> CATCH .)
    LPAREN          reduce using rule 36 (statement -> CATCH .)
    LCURLY          reduce using rule 36 (statement -> CATCH .)
    STRING          reduce using rule 36 (statement -> CATCH .)
    :               reduce using rule 36 (statement -> CATCH .)
    NUMBER          reduce using rule 36 (statement -> CATCH .)
    LBRACKET        reduce using rule 36 (statement -> CATCH .)
    $end            reduce using rule 36 (statement -> CATCH .)



state 17

    (87) expression -> STRING .

    +               reduce using rule 87 (expression -> STRING .)
    -               reduce using rule 87 (expression -> STRING .)
    *               reduce using rule 87 (expression -> STRING .)
    /               reduce using rule 87 (expression -> STRING .)
    \               reduce using rule 87 (expression -> STRING .)
    ^               reduce using rule 87 (expression -> STRING .)
    DOTTIMES        reduce using rule 87 (expression -> STRING .)
    DOTDIVIDE       reduce using rule 87 (expression -> STRING .)
    DOTRDIVIDE      reduce using rule 87 (expression -> STRING .)
    DOTPOWER        reduce using rule 87 (expression -> STRING .)
    NOTEQUAL        reduce using rule 87 (expression -> STRING .)
    ISEQUAL         reduce using rule 87 (expression -> STRING .)
    LESS            reduce using rule 87 (expression -> STRING .)
    GREATER         reduce using rule 87 (expression -> STRING .)
    LESSEQUAL       reduce using rule 87 (expression -> STRING .)
    GREATEREQUAL    reduce using rule 87 (expression -> STRING .)
    ELAND           reduce using rule 87 (expression -> STRING .)
    ELOR            reduce using rule 87 (expression -> STRING .)
    AND             reduce using rule 87 (expression -> STRING .)
    OR              reduce using rule 87 (expression -> STRING .)
    CONJTRANS       reduce using rule 87 (expression -> STRING .)
    TRANS           reduce using rule 87 (expression -> STRING .)
    :               reduce using rule 87 (expression -> STRING .)
    RBRACKET        reduce using rule 87 (expression -> STRING .)
    COMMA           reduce using rule 87 (expression -> STRING .)
    SEMICOLON       reduce using rule 87 (expression -> STRING .)
    NEWLINE         reduce using rule 87 (expression -> STRING .)
    LAMBDA          reduce using rule 87 (expression -> STRING .)
    NOT             reduce using rule 87 (expression -> STRING .)
    LPAREN          reduce using rule 87 (expression -> STRING .)
    NAME            reduce using rule 87 (expression -> STRING .)
    LCURLY          reduce using rule 87 (expression -> STRING .)
    STRING          reduce using rule 87 (expression -> STRING .)
    NUMBER          reduce using rule 87 (expression -> STRING .)
    LBRACKET        reduce using rule 87 (expression -> STRING .)
    RCURLY          reduce using rule 87 (expression -> STRING .)
    FUNCTION        reduce using rule 87 (expression -> STRING .)
    FOR             reduce using rule 87 (expression -> STRING .)
    WHILE           reduce using rule 87 (expression -> STRING .)
    IF              reduce using rule 87 (expression -> STRING .)
    ELSEIF          reduce using rule 87 (expression -> STRING .)
    ELSE            reduce using rule 87 (expression -> STRING .)
    BREAK           reduce using rule 87 (expression -> STRING .)
    CONTINUE        reduce using rule 87 (expression -> STRING .)
    RETURN          reduce using rule 87 (expression -> STRING .)
    SWITCH          reduce using rule 87 (expression -> STRING .)
    CASE            reduce using rule 87 (expression -> STRING .)
    OTHERWISE       reduce using rule 87 (expression -> STRING .)
    GLOBAL          reduce using rule 87 (expression -> STRING .)
    PERSISTENT      reduce using rule 87 (expression -> STRING .)
    TRY             reduce using rule 87 (expression -> STRING .)
    CATCH           reduce using rule 87 (expression -> STRING .)
    END             reduce using rule 87 (expression -> STRING .)
    $end            reduce using rule 87 (expression -> STRING .)
    RPAREN          reduce using rule 87 (expression -> STRING .)



state 18

    (52) statement -> empty .

    COMMA           reduce using rule 52 (statement -> empty .)
    SEMICOLON       reduce using rule 52 (statement -> empty .)
    FUNCTION        reduce using rule 52 (statement -> empty .)
    FOR             reduce using rule 52 (statement -> empty .)
    WHILE           reduce using rule 52 (statement -> empty .)
    IF              reduce using rule 52 (statement -> empty .)
    ELSEIF          reduce using rule 52 (statement -> empty .)
    ELSE            reduce using rule 52 (statement -> empty .)
    BREAK           reduce using rule 52 (statement -> empty .)
    CONTINUE        reduce using rule 52 (statement -> empty .)
    RETURN          reduce using rule 52 (statement -> empty .)
    SWITCH          reduce using rule 52 (statement -> empty .)
    CASE            reduce using rule 52 (statement -> empty .)
    OTHERWISE       reduce using rule 52 (statement -> empty .)
    GLOBAL          reduce using rule 52 (statement -> empty .)
    PERSISTENT      reduce using rule 52 (statement -> empty .)
    TRY             reduce using rule 52 (statement -> empty .)
    CATCH           reduce using rule 52 (statement -> empty .)
    END             reduce using rule 52 (statement -> empty .)
    NAME            reduce using rule 52 (statement -> empty .)
    LAMBDA          reduce using rule 52 (statement -> empty .)
    NOT             reduce using rule 52 (statement -> empty .)
    -               reduce using rule 52 (statement -> empty .)
    +               reduce using rule 52 (statement -> empty .)
    LPAREN          reduce using rule 52 (statement -> empty .)
    LCURLY          reduce using rule 52 (statement -> empty .)
    STRING          reduce using rule 52 (statement -> empty .)
    :               reduce using rule 52 (statement -> empty .)
    NUMBER          reduce using rule 52 (statement -> empty .)
    LBRACKET        reduce using rule 52 (statement -> empty .)
    $end            reduce using rule 52 (statement -> empty .)



state 19

    (10) statement -> FUNCTION . LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN
    (11) statement -> FUNCTION . LBRACKET name_list RBRACKET = NAME
    (12) statement -> FUNCTION . NAME = NAME LPAREN name_list RPAREN
    (13) statement -> FUNCTION . NAME = NAME
    (14) statement -> FUNCTION . NAME LPAREN name_list RPAREN
    (15) statement -> FUNCTION . NAME

    LBRACKET        shift and go to state 58
    NAME            shift and go to state 57



state 20

    (37) statement -> END .

    COMMA           reduce using rule 37 (statement -> END .)
    SEMICOLON       reduce using rule 37 (statement -> END .)
    FUNCTION        reduce using rule 37 (statement -> END .)
    FOR             reduce using rule 37 (statement -> END .)
    WHILE           reduce using rule 37 (statement -> END .)
    IF              reduce using rule 37 (statement -> END .)
    ELSEIF          reduce using rule 37 (statement -> END .)
    ELSE            reduce using rule 37 (statement -> END .)
    BREAK           reduce using rule 37 (statement -> END .)
    CONTINUE        reduce using rule 37 (statement -> END .)
    RETURN          reduce using rule 37 (statement -> END .)
    SWITCH          reduce using rule 37 (statement -> END .)
    CASE            reduce using rule 37 (statement -> END .)
    OTHERWISE       reduce using rule 37 (statement -> END .)
    GLOBAL          reduce using rule 37 (statement -> END .)
    PERSISTENT      reduce using rule 37 (statement -> END .)
    TRY             reduce using rule 37 (statement -> END .)
    CATCH           reduce using rule 37 (statement -> END .)
    END             reduce using rule 37 (statement -> END .)
    NAME            reduce using rule 37 (statement -> END .)
    LAMBDA          reduce using rule 37 (statement -> END .)
    NOT             reduce using rule 37 (statement -> END .)
    -               reduce using rule 37 (statement -> END .)
    +               reduce using rule 37 (statement -> END .)
    LPAREN          reduce using rule 37 (statement -> END .)
    LCURLY          reduce using rule 37 (statement -> END .)
    STRING          reduce using rule 37 (statement -> END .)
    :               reduce using rule 37 (statement -> END .)
    NUMBER          reduce using rule 37 (statement -> END .)
    LBRACKET        reduce using rule 37 (statement -> END .)
    $end            reduce using rule 37 (statement -> END .)



state 21

    (20) statement -> FOR . NAME = expression

    NAME            shift and go to state 59



state 22

    (38) statement -> name_sub . = expression
    (99) expression -> name_sub .
    (92) name_attr -> name_sub . . NAME
    (95) name_attr -> name_sub . . name_sub

    =               shift and go to state 60
    +               reduce using rule 99 (expression -> name_sub .)
    -               reduce using rule 99 (expression -> name_sub .)
    *               reduce using rule 99 (expression -> name_sub .)
    /               reduce using rule 99 (expression -> name_sub .)
    \               reduce using rule 99 (expression -> name_sub .)
    ^               reduce using rule 99 (expression -> name_sub .)
    DOTTIMES        reduce using rule 99 (expression -> name_sub .)
    DOTDIVIDE       reduce using rule 99 (expression -> name_sub .)
    DOTRDIVIDE      reduce using rule 99 (expression -> name_sub .)
    DOTPOWER        reduce using rule 99 (expression -> name_sub .)
    NOTEQUAL        reduce using rule 99 (expression -> name_sub .)
    ISEQUAL         reduce using rule 99 (expression -> name_sub .)
    LESS            reduce using rule 99 (expression -> name_sub .)
    GREATER         reduce using rule 99 (expression -> name_sub .)
    LESSEQUAL       reduce using rule 99 (expression -> name_sub .)
    GREATEREQUAL    reduce using rule 99 (expression -> name_sub .)
    ELAND           reduce using rule 99 (expression -> name_sub .)
    ELOR            reduce using rule 99 (expression -> name_sub .)
    AND             reduce using rule 99 (expression -> name_sub .)
    OR              reduce using rule 99 (expression -> name_sub .)
    CONJTRANS       reduce using rule 99 (expression -> name_sub .)
    TRANS           reduce using rule 99 (expression -> name_sub .)
    :               reduce using rule 99 (expression -> name_sub .)
    COMMA           reduce using rule 99 (expression -> name_sub .)
    SEMICOLON       reduce using rule 99 (expression -> name_sub .)
    FUNCTION        reduce using rule 99 (expression -> name_sub .)
    FOR             reduce using rule 99 (expression -> name_sub .)
    WHILE           reduce using rule 99 (expression -> name_sub .)
    IF              reduce using rule 99 (expression -> name_sub .)
    ELSEIF          reduce using rule 99 (expression -> name_sub .)
    ELSE            reduce using rule 99 (expression -> name_sub .)
    BREAK           reduce using rule 99 (expression -> name_sub .)
    CONTINUE        reduce using rule 99 (expression -> name_sub .)
    RETURN          reduce using rule 99 (expression -> name_sub .)
    SWITCH          reduce using rule 99 (expression -> name_sub .)
    CASE            reduce using rule 99 (expression -> name_sub .)
    OTHERWISE       reduce using rule 99 (expression -> name_sub .)
    GLOBAL          reduce using rule 99 (expression -> name_sub .)
    PERSISTENT      reduce using rule 99 (expression -> name_sub .)
    TRY             reduce using rule 99 (expression -> name_sub .)
    CATCH           reduce using rule 99 (expression -> name_sub .)
    END             reduce using rule 99 (expression -> name_sub .)
    NAME            reduce using rule 99 (expression -> name_sub .)
    LAMBDA          reduce using rule 99 (expression -> name_sub .)
    NOT             reduce using rule 99 (expression -> name_sub .)
    LPAREN          reduce using rule 99 (expression -> name_sub .)
    LCURLY          reduce using rule 99 (expression -> name_sub .)
    STRING          reduce using rule 99 (expression -> name_sub .)
    NUMBER          reduce using rule 99 (expression -> name_sub .)
    LBRACKET        reduce using rule 99 (expression -> name_sub .)
    $end            reduce using rule 99 (expression -> name_sub .)
    .               shift and go to state 61



state 23

    (24) statement -> ELSE .

    COMMA           reduce using rule 24 (statement -> ELSE .)
    SEMICOLON       reduce using rule 24 (statement -> ELSE .)
    FUNCTION        reduce using rule 24 (statement -> ELSE .)
    FOR             reduce using rule 24 (statement -> ELSE .)
    WHILE           reduce using rule 24 (statement -> ELSE .)
    IF              reduce using rule 24 (statement -> ELSE .)
    ELSEIF          reduce using rule 24 (statement -> ELSE .)
    ELSE            reduce using rule 24 (statement -> ELSE .)
    BREAK           reduce using rule 24 (statement -> ELSE .)
    CONTINUE        reduce using rule 24 (statement -> ELSE .)
    RETURN          reduce using rule 24 (statement -> ELSE .)
    SWITCH          reduce using rule 24 (statement -> ELSE .)
    CASE            reduce using rule 24 (statement -> ELSE .)
    OTHERWISE       reduce using rule 24 (statement -> ELSE .)
    GLOBAL          reduce using rule 24 (statement -> ELSE .)
    PERSISTENT      reduce using rule 24 (statement -> ELSE .)
    TRY             reduce using rule 24 (statement -> ELSE .)
    CATCH           reduce using rule 24 (statement -> ELSE .)
    END             reduce using rule 24 (statement -> ELSE .)
    NAME            reduce using rule 24 (statement -> ELSE .)
    LAMBDA          reduce using rule 24 (statement -> ELSE .)
    NOT             reduce using rule 24 (statement -> ELSE .)
    -               reduce using rule 24 (statement -> ELSE .)
    +               reduce using rule 24 (statement -> ELSE .)
    LPAREN          reduce using rule 24 (statement -> ELSE .)
    LCURLY          reduce using rule 24 (statement -> ELSE .)
    STRING          reduce using rule 24 (statement -> ELSE .)
    :               reduce using rule 24 (statement -> ELSE .)
    NUMBER          reduce using rule 24 (statement -> ELSE .)
    LBRACKET        reduce using rule 24 (statement -> ELSE .)
    $end            reduce using rule 24 (statement -> ELSE .)



state 24

    (35) statement -> TRY .

    COMMA           reduce using rule 35 (statement -> TRY .)
    SEMICOLON       reduce using rule 35 (statement -> TRY .)
    FUNCTION        reduce using rule 35 (statement -> TRY .)
    FOR             reduce using rule 35 (statement -> TRY .)
    WHILE           reduce using rule 35 (statement -> TRY .)
    IF              reduce using rule 35 (statement -> TRY .)
    ELSEIF          reduce using rule 35 (statement -> TRY .)
    ELSE            reduce using rule 35 (statement -> TRY .)
    BREAK           reduce using rule 35 (statement -> TRY .)
    CONTINUE        reduce using rule 35 (statement -> TRY .)
    RETURN          reduce using rule 35 (statement -> TRY .)
    SWITCH          reduce using rule 35 (statement -> TRY .)
    CASE            reduce using rule 35 (statement -> TRY .)
    OTHERWISE       reduce using rule 35 (statement -> TRY .)
    GLOBAL          reduce using rule 35 (statement -> TRY .)
    PERSISTENT      reduce using rule 35 (statement -> TRY .)
    TRY             reduce using rule 35 (statement -> TRY .)
    CATCH           reduce using rule 35 (statement -> TRY .)
    END             reduce using rule 35 (statement -> TRY .)
    NAME            reduce using rule 35 (statement -> TRY .)
    LAMBDA          reduce using rule 35 (statement -> TRY .)
    NOT             reduce using rule 35 (statement -> TRY .)
    -               reduce using rule 35 (statement -> TRY .)
    +               reduce using rule 35 (statement -> TRY .)
    LPAREN          reduce using rule 35 (statement -> TRY .)
    LCURLY          reduce using rule 35 (statement -> TRY .)
    STRING          reduce using rule 35 (statement -> TRY .)
    :               reduce using rule 35 (statement -> TRY .)
    NUMBER          reduce using rule 35 (statement -> TRY .)
    LBRACKET        reduce using rule 35 (statement -> TRY .)
    $end            reduce using rule 35 (statement -> TRY .)



state 25

    (0) S' -> statement_list .
    (4) statement_list -> statement_list . SEMICOLON statement
    (5) statement_list -> statement_list . COMMA statement
    (6) statement_list -> statement_list . statement
    (7) statement -> . statement SEMICOLON
    (8) statement -> . statement COMMA
    (9) statement -> . expression
    (10) statement -> . FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN
    (11) statement -> . FUNCTION LBRACKET name_list RBRACKET = NAME
    (12) statement -> . FUNCTION NAME = NAME LPAREN name_list RPAREN
    (13) statement -> . FUNCTION NAME = NAME
    (14) statement -> . FUNCTION NAME LPAREN name_list RPAREN
    (15) statement -> . FUNCTION NAME
    (20) statement -> . FOR NAME = expression
    (21) statement -> . WHILE expression
    (22) statement -> . IF expression
    (23) statement -> . ELSEIF expression
    (24) statement -> . ELSE
    (25) statement -> . BREAK
    (26) statement -> . CONTINUE
    (27) statement -> . RETURN
    (28) statement -> . SWITCH expression
    (29) statement -> . CASE expression
    (30) statement -> . OTHERWISE
    (31) statement -> . GLOBAL list_spaces
    (32) statement -> . PERSISTENT list_spaces
    (35) statement -> . TRY
    (36) statement -> . CATCH
    (37) statement -> . END
    (38) statement -> . name_sub = expression
    (39) statement -> . name_attr = expression
    (40) statement -> . exprmcat = expression
    (41) statement -> . NAME = expression
    (42) statement -> . NAME NAME
    (43) statement -> . NAME NUMBER
    (52) statement -> . empty
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (54) empty -> .
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

  ! shift/reduce conflict for SEMICOLON resolved as shift.
  ! shift/reduce conflict for COMMA resolved as shift.
  ! shift/reduce conflict for FUNCTION resolved as shift.
  ! shift/reduce conflict for FOR resolved as shift.
  ! shift/reduce conflict for WHILE resolved as shift.
  ! shift/reduce conflict for IF resolved as shift.
  ! shift/reduce conflict for ELSEIF resolved as shift.
  ! shift/reduce conflict for ELSE resolved as shift.
  ! shift/reduce conflict for BREAK resolved as shift.
  ! shift/reduce conflict for CONTINUE resolved as shift.
  ! shift/reduce conflict for RETURN resolved as shift.
  ! shift/reduce conflict for SWITCH resolved as shift.
  ! shift/reduce conflict for CASE resolved as shift.
  ! shift/reduce conflict for OTHERWISE resolved as shift.
  ! shift/reduce conflict for GLOBAL resolved as shift.
  ! shift/reduce conflict for PERSISTENT resolved as shift.
  ! shift/reduce conflict for TRY resolved as shift.
  ! shift/reduce conflict for CATCH resolved as shift.
  ! shift/reduce conflict for END resolved as shift.
  ! shift/reduce conflict for NAME resolved as shift.
  ! shift/reduce conflict for LAMBDA resolved as shift.
  ! shift/reduce conflict for NOT resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for LCURLY resolved as shift.
  ! shift/reduce conflict for STRING resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for LBRACKET resolved as shift.
    SEMICOLON       shift and go to state 62
    COMMA           shift and go to state 63
    FUNCTION        shift and go to state 19
    FOR             shift and go to state 21
    WHILE           shift and go to state 6
    IF              shift and go to state 28
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 23
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    SWITCH          shift and go to state 14
    CASE            shift and go to state 10
    OTHERWISE       shift and go to state 9
    GLOBAL          shift and go to state 2
    PERSISTENT      shift and go to state 31
    TRY             shift and go to state 24
    CATCH           shift and go to state 16
    END             shift and go to state 20
    NAME            shift and go to state 30
    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4

  ! SEMICOLON       [ reduce using rule 54 (empty -> .) ]
  ! COMMA           [ reduce using rule 54 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 54 (empty -> .) ]
  ! FOR             [ reduce using rule 54 (empty -> .) ]
  ! WHILE           [ reduce using rule 54 (empty -> .) ]
  ! IF              [ reduce using rule 54 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 54 (empty -> .) ]
  ! ELSE            [ reduce using rule 54 (empty -> .) ]
  ! BREAK           [ reduce using rule 54 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 54 (empty -> .) ]
  ! RETURN          [ reduce using rule 54 (empty -> .) ]
  ! SWITCH          [ reduce using rule 54 (empty -> .) ]
  ! CASE            [ reduce using rule 54 (empty -> .) ]
  ! OTHERWISE       [ reduce using rule 54 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 54 (empty -> .) ]
  ! PERSISTENT      [ reduce using rule 54 (empty -> .) ]
  ! TRY             [ reduce using rule 54 (empty -> .) ]
  ! CATCH           [ reduce using rule 54 (empty -> .) ]
  ! END             [ reduce using rule 54 (empty -> .) ]
  ! NAME            [ reduce using rule 54 (empty -> .) ]
  ! LAMBDA          [ reduce using rule 54 (empty -> .) ]
  ! NOT             [ reduce using rule 54 (empty -> .) ]
  ! -               [ reduce using rule 54 (empty -> .) ]
  ! +               [ reduce using rule 54 (empty -> .) ]
  ! LPAREN          [ reduce using rule 54 (empty -> .) ]
  ! LCURLY          [ reduce using rule 54 (empty -> .) ]
  ! STRING          [ reduce using rule 54 (empty -> .) ]
  ! :               [ reduce using rule 54 (empty -> .) ]
  ! NUMBER          [ reduce using rule 54 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 54 (empty -> .) ]
  ! $end            [ reduce using rule 54 (empty -> .) ]

    slice                          shift and go to state 11
    name_attr                      shift and go to state 7
    name_sub                       shift and go to state 22
    empty                          shift and go to state 18
    statement                      shift and go to state 64
    expression                     shift and go to state 35
    exprmcat                       shift and go to state 27

state 26

    (80) expression -> LPAREN . exprlist RPAREN
    (44) exprlist -> . exprlist COMMA expression
    (45) exprlist -> . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 66
    exprlist                       shift and go to state 65
    exprmcat                       shift and go to state 42

state 27

    (40) statement -> exprmcat . = expression
    (82) expression -> exprmcat .

    =               shift and go to state 67
    +               reduce using rule 82 (expression -> exprmcat .)
    -               reduce using rule 82 (expression -> exprmcat .)
    *               reduce using rule 82 (expression -> exprmcat .)
    /               reduce using rule 82 (expression -> exprmcat .)
    \               reduce using rule 82 (expression -> exprmcat .)
    ^               reduce using rule 82 (expression -> exprmcat .)
    DOTTIMES        reduce using rule 82 (expression -> exprmcat .)
    DOTDIVIDE       reduce using rule 82 (expression -> exprmcat .)
    DOTRDIVIDE      reduce using rule 82 (expression -> exprmcat .)
    DOTPOWER        reduce using rule 82 (expression -> exprmcat .)
    NOTEQUAL        reduce using rule 82 (expression -> exprmcat .)
    ISEQUAL         reduce using rule 82 (expression -> exprmcat .)
    LESS            reduce using rule 82 (expression -> exprmcat .)
    GREATER         reduce using rule 82 (expression -> exprmcat .)
    LESSEQUAL       reduce using rule 82 (expression -> exprmcat .)
    GREATEREQUAL    reduce using rule 82 (expression -> exprmcat .)
    ELAND           reduce using rule 82 (expression -> exprmcat .)
    ELOR            reduce using rule 82 (expression -> exprmcat .)
    AND             reduce using rule 82 (expression -> exprmcat .)
    OR              reduce using rule 82 (expression -> exprmcat .)
    CONJTRANS       reduce using rule 82 (expression -> exprmcat .)
    TRANS           reduce using rule 82 (expression -> exprmcat .)
    :               reduce using rule 82 (expression -> exprmcat .)
    COMMA           reduce using rule 82 (expression -> exprmcat .)
    SEMICOLON       reduce using rule 82 (expression -> exprmcat .)
    FUNCTION        reduce using rule 82 (expression -> exprmcat .)
    FOR             reduce using rule 82 (expression -> exprmcat .)
    WHILE           reduce using rule 82 (expression -> exprmcat .)
    IF              reduce using rule 82 (expression -> exprmcat .)
    ELSEIF          reduce using rule 82 (expression -> exprmcat .)
    ELSE            reduce using rule 82 (expression -> exprmcat .)
    BREAK           reduce using rule 82 (expression -> exprmcat .)
    CONTINUE        reduce using rule 82 (expression -> exprmcat .)
    RETURN          reduce using rule 82 (expression -> exprmcat .)
    SWITCH          reduce using rule 82 (expression -> exprmcat .)
    CASE            reduce using rule 82 (expression -> exprmcat .)
    OTHERWISE       reduce using rule 82 (expression -> exprmcat .)
    GLOBAL          reduce using rule 82 (expression -> exprmcat .)
    PERSISTENT      reduce using rule 82 (expression -> exprmcat .)
    TRY             reduce using rule 82 (expression -> exprmcat .)
    CATCH           reduce using rule 82 (expression -> exprmcat .)
    END             reduce using rule 82 (expression -> exprmcat .)
    NAME            reduce using rule 82 (expression -> exprmcat .)
    LAMBDA          reduce using rule 82 (expression -> exprmcat .)
    NOT             reduce using rule 82 (expression -> exprmcat .)
    LPAREN          reduce using rule 82 (expression -> exprmcat .)
    LCURLY          reduce using rule 82 (expression -> exprmcat .)
    STRING          reduce using rule 82 (expression -> exprmcat .)
    NUMBER          reduce using rule 82 (expression -> exprmcat .)
    LBRACKET        reduce using rule 82 (expression -> exprmcat .)
    $end            reduce using rule 82 (expression -> exprmcat .)



state 28

    (22) statement -> IF . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 68
    exprmcat                       shift and go to state 42

state 29

    (89) expression -> : .

    +               reduce using rule 89 (expression -> : .)
    -               reduce using rule 89 (expression -> : .)
    *               reduce using rule 89 (expression -> : .)
    /               reduce using rule 89 (expression -> : .)
    \               reduce using rule 89 (expression -> : .)
    ^               reduce using rule 89 (expression -> : .)
    DOTTIMES        reduce using rule 89 (expression -> : .)
    DOTDIVIDE       reduce using rule 89 (expression -> : .)
    DOTRDIVIDE      reduce using rule 89 (expression -> : .)
    DOTPOWER        reduce using rule 89 (expression -> : .)
    NOTEQUAL        reduce using rule 89 (expression -> : .)
    ISEQUAL         reduce using rule 89 (expression -> : .)
    LESS            reduce using rule 89 (expression -> : .)
    GREATER         reduce using rule 89 (expression -> : .)
    LESSEQUAL       reduce using rule 89 (expression -> : .)
    GREATEREQUAL    reduce using rule 89 (expression -> : .)
    ELAND           reduce using rule 89 (expression -> : .)
    ELOR            reduce using rule 89 (expression -> : .)
    AND             reduce using rule 89 (expression -> : .)
    OR              reduce using rule 89 (expression -> : .)
    CONJTRANS       reduce using rule 89 (expression -> : .)
    TRANS           reduce using rule 89 (expression -> : .)
    :               reduce using rule 89 (expression -> : .)
    RBRACKET        reduce using rule 89 (expression -> : .)
    COMMA           reduce using rule 89 (expression -> : .)
    SEMICOLON       reduce using rule 89 (expression -> : .)
    NEWLINE         reduce using rule 89 (expression -> : .)
    LAMBDA          reduce using rule 89 (expression -> : .)
    NOT             reduce using rule 89 (expression -> : .)
    LPAREN          reduce using rule 89 (expression -> : .)
    NAME            reduce using rule 89 (expression -> : .)
    LCURLY          reduce using rule 89 (expression -> : .)
    STRING          reduce using rule 89 (expression -> : .)
    NUMBER          reduce using rule 89 (expression -> : .)
    LBRACKET        reduce using rule 89 (expression -> : .)
    RCURLY          reduce using rule 89 (expression -> : .)
    FUNCTION        reduce using rule 89 (expression -> : .)
    FOR             reduce using rule 89 (expression -> : .)
    WHILE           reduce using rule 89 (expression -> : .)
    IF              reduce using rule 89 (expression -> : .)
    ELSEIF          reduce using rule 89 (expression -> : .)
    ELSE            reduce using rule 89 (expression -> : .)
    BREAK           reduce using rule 89 (expression -> : .)
    CONTINUE        reduce using rule 89 (expression -> : .)
    RETURN          reduce using rule 89 (expression -> : .)
    SWITCH          reduce using rule 89 (expression -> : .)
    CASE            reduce using rule 89 (expression -> : .)
    OTHERWISE       reduce using rule 89 (expression -> : .)
    GLOBAL          reduce using rule 89 (expression -> : .)
    PERSISTENT      reduce using rule 89 (expression -> : .)
    TRY             reduce using rule 89 (expression -> : .)
    CATCH           reduce using rule 89 (expression -> : .)
    END             reduce using rule 89 (expression -> : .)
    $end            reduce using rule 89 (expression -> : .)
    RPAREN          reduce using rule 89 (expression -> : .)



state 30

    (41) statement -> NAME . = expression
    (42) statement -> NAME . NAME
    (43) statement -> NAME . NUMBER
    (81) expression -> NAME . LPAREN RPAREN
    (90) expression -> NAME . indexflat
    (104) expression -> NAME .
    (91) name_sub -> NAME . LPAREN exprlist RPAREN
    (98) name_sub -> NAME . LCURLY exprinlist RCURLY
    (96) name_attr -> NAME .
    (88) indexflat -> . LPAREN : RPAREN

  ! shift/reduce conflict for NAME resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for LCURLY resolved as shift.
  ! shift/reduce conflict for = resolved as shift.
  ! reduce/reduce conflict for + resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for - resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for * resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for / resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for \ resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for ^ resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for DOTTIMES resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for DOTDIVIDE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for DOTRDIVIDE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for DOTPOWER resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for ISEQUAL resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for LESS resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for GREATER resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for ELAND resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for ELOR resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for AND resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for OR resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for CONJTRANS resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for TRANS resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for : resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for SEMICOLON resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for COMMA resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for FUNCTION resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for FOR resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for WHILE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for IF resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for ELSEIF resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for ELSE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for BREAK resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for CONTINUE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for RETURN resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for SWITCH resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for CASE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for OTHERWISE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for GLOBAL resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for PERSISTENT resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for TRY resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for CATCH resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for END resolved using rule 96 (name_attr -> NAME .).
  ! shift/reduce conflict for NAME resolved as shift.
  ! reduce/reduce conflict for LAMBDA resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for NOT resolved using rule 96 (name_attr -> NAME .).
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for LCURLY resolved as shift.
  ! reduce/reduce conflict for STRING resolved using rule 96 (name_attr -> NAME .).
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! reduce/reduce conflict for LBRACKET resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for $end resolved using rule 96 (name_attr -> NAME .).
    =               shift and go to state 70
    NAME            shift and go to state 69
    NUMBER          shift and go to state 71
    LPAREN          shift and go to state 73
    LCURLY          shift and go to state 72
    .               reduce using rule 96 (name_attr -> NAME .)
    +               reduce using rule 96 (name_attr -> NAME .)
    -               reduce using rule 96 (name_attr -> NAME .)
    *               reduce using rule 96 (name_attr -> NAME .)
    /               reduce using rule 96 (name_attr -> NAME .)
    \               reduce using rule 96 (name_attr -> NAME .)
    ^               reduce using rule 96 (name_attr -> NAME .)
    DOTTIMES        reduce using rule 96 (name_attr -> NAME .)
    DOTDIVIDE       reduce using rule 96 (name_attr -> NAME .)
    DOTRDIVIDE      reduce using rule 96 (name_attr -> NAME .)
    DOTPOWER        reduce using rule 96 (name_attr -> NAME .)
    NOTEQUAL        reduce using rule 96 (name_attr -> NAME .)
    ISEQUAL         reduce using rule 96 (name_attr -> NAME .)
    LESS            reduce using rule 96 (name_attr -> NAME .)
    GREATER         reduce using rule 96 (name_attr -> NAME .)
    LESSEQUAL       reduce using rule 96 (name_attr -> NAME .)
    GREATEREQUAL    reduce using rule 96 (name_attr -> NAME .)
    ELAND           reduce using rule 96 (name_attr -> NAME .)
    ELOR            reduce using rule 96 (name_attr -> NAME .)
    AND             reduce using rule 96 (name_attr -> NAME .)
    OR              reduce using rule 96 (name_attr -> NAME .)
    CONJTRANS       reduce using rule 96 (name_attr -> NAME .)
    TRANS           reduce using rule 96 (name_attr -> NAME .)
    :               reduce using rule 96 (name_attr -> NAME .)
    SEMICOLON       reduce using rule 96 (name_attr -> NAME .)
    COMMA           reduce using rule 96 (name_attr -> NAME .)
    FUNCTION        reduce using rule 96 (name_attr -> NAME .)
    FOR             reduce using rule 96 (name_attr -> NAME .)
    WHILE           reduce using rule 96 (name_attr -> NAME .)
    IF              reduce using rule 96 (name_attr -> NAME .)
    ELSEIF          reduce using rule 96 (name_attr -> NAME .)
    ELSE            reduce using rule 96 (name_attr -> NAME .)
    BREAK           reduce using rule 96 (name_attr -> NAME .)
    CONTINUE        reduce using rule 96 (name_attr -> NAME .)
    RETURN          reduce using rule 96 (name_attr -> NAME .)
    SWITCH          reduce using rule 96 (name_attr -> NAME .)
    CASE            reduce using rule 96 (name_attr -> NAME .)
    OTHERWISE       reduce using rule 96 (name_attr -> NAME .)
    GLOBAL          reduce using rule 96 (name_attr -> NAME .)
    PERSISTENT      reduce using rule 96 (name_attr -> NAME .)
    TRY             reduce using rule 96 (name_attr -> NAME .)
    CATCH           reduce using rule 96 (name_attr -> NAME .)
    END             reduce using rule 96 (name_attr -> NAME .)
    LAMBDA          reduce using rule 96 (name_attr -> NAME .)
    NOT             reduce using rule 96 (name_attr -> NAME .)
    STRING          reduce using rule 96 (name_attr -> NAME .)
    LBRACKET        reduce using rule 96 (name_attr -> NAME .)
    $end            reduce using rule 96 (name_attr -> NAME .)

  ! +               [ reduce using rule 104 (expression -> NAME .) ]
  ! -               [ reduce using rule 104 (expression -> NAME .) ]
  ! *               [ reduce using rule 104 (expression -> NAME .) ]
  ! /               [ reduce using rule 104 (expression -> NAME .) ]
  ! \               [ reduce using rule 104 (expression -> NAME .) ]
  ! ^               [ reduce using rule 104 (expression -> NAME .) ]
  ! DOTTIMES        [ reduce using rule 104 (expression -> NAME .) ]
  ! DOTDIVIDE       [ reduce using rule 104 (expression -> NAME .) ]
  ! DOTRDIVIDE      [ reduce using rule 104 (expression -> NAME .) ]
  ! DOTPOWER        [ reduce using rule 104 (expression -> NAME .) ]
  ! NOTEQUAL        [ reduce using rule 104 (expression -> NAME .) ]
  ! ISEQUAL         [ reduce using rule 104 (expression -> NAME .) ]
  ! LESS            [ reduce using rule 104 (expression -> NAME .) ]
  ! GREATER         [ reduce using rule 104 (expression -> NAME .) ]
  ! LESSEQUAL       [ reduce using rule 104 (expression -> NAME .) ]
  ! GREATEREQUAL    [ reduce using rule 104 (expression -> NAME .) ]
  ! ELAND           [ reduce using rule 104 (expression -> NAME .) ]
  ! ELOR            [ reduce using rule 104 (expression -> NAME .) ]
  ! AND             [ reduce using rule 104 (expression -> NAME .) ]
  ! OR              [ reduce using rule 104 (expression -> NAME .) ]
  ! CONJTRANS       [ reduce using rule 104 (expression -> NAME .) ]
  ! TRANS           [ reduce using rule 104 (expression -> NAME .) ]
  ! :               [ reduce using rule 104 (expression -> NAME .) ]
  ! COMMA           [ reduce using rule 104 (expression -> NAME .) ]
  ! SEMICOLON       [ reduce using rule 104 (expression -> NAME .) ]
  ! FUNCTION        [ reduce using rule 104 (expression -> NAME .) ]
  ! FOR             [ reduce using rule 104 (expression -> NAME .) ]
  ! WHILE           [ reduce using rule 104 (expression -> NAME .) ]
  ! IF              [ reduce using rule 104 (expression -> NAME .) ]
  ! ELSEIF          [ reduce using rule 104 (expression -> NAME .) ]
  ! ELSE            [ reduce using rule 104 (expression -> NAME .) ]
  ! BREAK           [ reduce using rule 104 (expression -> NAME .) ]
  ! CONTINUE        [ reduce using rule 104 (expression -> NAME .) ]
  ! RETURN          [ reduce using rule 104 (expression -> NAME .) ]
  ! SWITCH          [ reduce using rule 104 (expression -> NAME .) ]
  ! CASE            [ reduce using rule 104 (expression -> NAME .) ]
  ! OTHERWISE       [ reduce using rule 104 (expression -> NAME .) ]
  ! GLOBAL          [ reduce using rule 104 (expression -> NAME .) ]
  ! PERSISTENT      [ reduce using rule 104 (expression -> NAME .) ]
  ! TRY             [ reduce using rule 104 (expression -> NAME .) ]
  ! CATCH           [ reduce using rule 104 (expression -> NAME .) ]
  ! END             [ reduce using rule 104 (expression -> NAME .) ]
  ! NAME            [ reduce using rule 104 (expression -> NAME .) ]
  ! LAMBDA          [ reduce using rule 104 (expression -> NAME .) ]
  ! NOT             [ reduce using rule 104 (expression -> NAME .) ]
  ! LPAREN          [ reduce using rule 104 (expression -> NAME .) ]
  ! LCURLY          [ reduce using rule 104 (expression -> NAME .) ]
  ! STRING          [ reduce using rule 104 (expression -> NAME .) ]
  ! NUMBER          [ reduce using rule 104 (expression -> NAME .) ]
  ! LBRACKET        [ reduce using rule 104 (expression -> NAME .) ]
  ! $end            [ reduce using rule 104 (expression -> NAME .) ]
  ! =               [ reduce using rule 96 (name_attr -> NAME .) ]
  ! NAME            [ reduce using rule 96 (name_attr -> NAME .) ]
  ! LPAREN          [ reduce using rule 96 (name_attr -> NAME .) ]
  ! LCURLY          [ reduce using rule 96 (name_attr -> NAME .) ]
  ! NUMBER          [ reduce using rule 96 (name_attr -> NAME .) ]

    indexflat                      shift and go to state 74

state 31

    (32) statement -> PERSISTENT . list_spaces
    (33) list_spaces -> . list_spaces NAME
    (34) list_spaces -> . NAME

    NAME            shift and go to state 38


    list_spaces                    shift and go to state 75

state 32

    (25) statement -> BREAK .

    COMMA           reduce using rule 25 (statement -> BREAK .)
    SEMICOLON       reduce using rule 25 (statement -> BREAK .)
    FUNCTION        reduce using rule 25 (statement -> BREAK .)
    FOR             reduce using rule 25 (statement -> BREAK .)
    WHILE           reduce using rule 25 (statement -> BREAK .)
    IF              reduce using rule 25 (statement -> BREAK .)
    ELSEIF          reduce using rule 25 (statement -> BREAK .)
    ELSE            reduce using rule 25 (statement -> BREAK .)
    BREAK           reduce using rule 25 (statement -> BREAK .)
    CONTINUE        reduce using rule 25 (statement -> BREAK .)
    RETURN          reduce using rule 25 (statement -> BREAK .)
    SWITCH          reduce using rule 25 (statement -> BREAK .)
    CASE            reduce using rule 25 (statement -> BREAK .)
    OTHERWISE       reduce using rule 25 (statement -> BREAK .)
    GLOBAL          reduce using rule 25 (statement -> BREAK .)
    PERSISTENT      reduce using rule 25 (statement -> BREAK .)
    TRY             reduce using rule 25 (statement -> BREAK .)
    CATCH           reduce using rule 25 (statement -> BREAK .)
    END             reduce using rule 25 (statement -> BREAK .)
    NAME            reduce using rule 25 (statement -> BREAK .)
    LAMBDA          reduce using rule 25 (statement -> BREAK .)
    NOT             reduce using rule 25 (statement -> BREAK .)
    -               reduce using rule 25 (statement -> BREAK .)
    +               reduce using rule 25 (statement -> BREAK .)
    LPAREN          reduce using rule 25 (statement -> BREAK .)
    LCURLY          reduce using rule 25 (statement -> BREAK .)
    STRING          reduce using rule 25 (statement -> BREAK .)
    :               reduce using rule 25 (statement -> BREAK .)
    NUMBER          reduce using rule 25 (statement -> BREAK .)
    LBRACKET        reduce using rule 25 (statement -> BREAK .)
    $end            reduce using rule 25 (statement -> BREAK .)



state 33

    (26) statement -> CONTINUE .

    COMMA           reduce using rule 26 (statement -> CONTINUE .)
    SEMICOLON       reduce using rule 26 (statement -> CONTINUE .)
    FUNCTION        reduce using rule 26 (statement -> CONTINUE .)
    FOR             reduce using rule 26 (statement -> CONTINUE .)
    WHILE           reduce using rule 26 (statement -> CONTINUE .)
    IF              reduce using rule 26 (statement -> CONTINUE .)
    ELSEIF          reduce using rule 26 (statement -> CONTINUE .)
    ELSE            reduce using rule 26 (statement -> CONTINUE .)
    BREAK           reduce using rule 26 (statement -> CONTINUE .)
    CONTINUE        reduce using rule 26 (statement -> CONTINUE .)
    RETURN          reduce using rule 26 (statement -> CONTINUE .)
    SWITCH          reduce using rule 26 (statement -> CONTINUE .)
    CASE            reduce using rule 26 (statement -> CONTINUE .)
    OTHERWISE       reduce using rule 26 (statement -> CONTINUE .)
    GLOBAL          reduce using rule 26 (statement -> CONTINUE .)
    PERSISTENT      reduce using rule 26 (statement -> CONTINUE .)
    TRY             reduce using rule 26 (statement -> CONTINUE .)
    CATCH           reduce using rule 26 (statement -> CONTINUE .)
    END             reduce using rule 26 (statement -> CONTINUE .)
    NAME            reduce using rule 26 (statement -> CONTINUE .)
    LAMBDA          reduce using rule 26 (statement -> CONTINUE .)
    NOT             reduce using rule 26 (statement -> CONTINUE .)
    -               reduce using rule 26 (statement -> CONTINUE .)
    +               reduce using rule 26 (statement -> CONTINUE .)
    LPAREN          reduce using rule 26 (statement -> CONTINUE .)
    LCURLY          reduce using rule 26 (statement -> CONTINUE .)
    STRING          reduce using rule 26 (statement -> CONTINUE .)
    :               reduce using rule 26 (statement -> CONTINUE .)
    NUMBER          reduce using rule 26 (statement -> CONTINUE .)
    LBRACKET        reduce using rule 26 (statement -> CONTINUE .)
    $end            reduce using rule 26 (statement -> CONTINUE .)



state 34

    (23) statement -> ELSEIF . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 76
    exprmcat                       shift and go to state 42

state 35

    (9) statement -> expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    COMMA           reduce using rule 9 (statement -> expression .)
    SEMICOLON       reduce using rule 9 (statement -> expression .)
    FUNCTION        reduce using rule 9 (statement -> expression .)
    FOR             reduce using rule 9 (statement -> expression .)
    WHILE           reduce using rule 9 (statement -> expression .)
    IF              reduce using rule 9 (statement -> expression .)
    ELSEIF          reduce using rule 9 (statement -> expression .)
    ELSE            reduce using rule 9 (statement -> expression .)
    BREAK           reduce using rule 9 (statement -> expression .)
    CONTINUE        reduce using rule 9 (statement -> expression .)
    RETURN          reduce using rule 9 (statement -> expression .)
    SWITCH          reduce using rule 9 (statement -> expression .)
    CASE            reduce using rule 9 (statement -> expression .)
    OTHERWISE       reduce using rule 9 (statement -> expression .)
    GLOBAL          reduce using rule 9 (statement -> expression .)
    PERSISTENT      reduce using rule 9 (statement -> expression .)
    TRY             reduce using rule 9 (statement -> expression .)
    CATCH           reduce using rule 9 (statement -> expression .)
    END             reduce using rule 9 (statement -> expression .)
    NAME            reduce using rule 9 (statement -> expression .)
    LAMBDA          reduce using rule 9 (statement -> expression .)
    NOT             reduce using rule 9 (statement -> expression .)
    LPAREN          reduce using rule 9 (statement -> expression .)
    LCURLY          reduce using rule 9 (statement -> expression .)
    STRING          reduce using rule 9 (statement -> expression .)
    NUMBER          reduce using rule 9 (statement -> expression .)
    LBRACKET        reduce using rule 9 (statement -> expression .)
    $end            reduce using rule 9 (statement -> expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 9 (statement -> expression .) ]
  ! +               [ reduce using rule 9 (statement -> expression .) ]
  ! :               [ reduce using rule 9 (statement -> expression .) ]


state 36

    (16) expression -> LAMBDA . NAME
    (19) expression -> LAMBDA . LPAREN name_list RPAREN expression

    NAME            shift and go to state 100
    LPAREN          shift and go to state 101



state 37

    (31) statement -> GLOBAL list_spaces .
    (33) list_spaces -> list_spaces . NAME

  ! shift/reduce conflict for NAME resolved as shift.
    COMMA           reduce using rule 31 (statement -> GLOBAL list_spaces .)
    SEMICOLON       reduce using rule 31 (statement -> GLOBAL list_spaces .)
    FUNCTION        reduce using rule 31 (statement -> GLOBAL list_spaces .)
    FOR             reduce using rule 31 (statement -> GLOBAL list_spaces .)
    WHILE           reduce using rule 31 (statement -> GLOBAL list_spaces .)
    IF              reduce using rule 31 (statement -> GLOBAL list_spaces .)
    ELSEIF          reduce using rule 31 (statement -> GLOBAL list_spaces .)
    ELSE            reduce using rule 31 (statement -> GLOBAL list_spaces .)
    BREAK           reduce using rule 31 (statement -> GLOBAL list_spaces .)
    CONTINUE        reduce using rule 31 (statement -> GLOBAL list_spaces .)
    RETURN          reduce using rule 31 (statement -> GLOBAL list_spaces .)
    SWITCH          reduce using rule 31 (statement -> GLOBAL list_spaces .)
    CASE            reduce using rule 31 (statement -> GLOBAL list_spaces .)
    OTHERWISE       reduce using rule 31 (statement -> GLOBAL list_spaces .)
    GLOBAL          reduce using rule 31 (statement -> GLOBAL list_spaces .)
    PERSISTENT      reduce using rule 31 (statement -> GLOBAL list_spaces .)
    TRY             reduce using rule 31 (statement -> GLOBAL list_spaces .)
    CATCH           reduce using rule 31 (statement -> GLOBAL list_spaces .)
    END             reduce using rule 31 (statement -> GLOBAL list_spaces .)
    LAMBDA          reduce using rule 31 (statement -> GLOBAL list_spaces .)
    NOT             reduce using rule 31 (statement -> GLOBAL list_spaces .)
    -               reduce using rule 31 (statement -> GLOBAL list_spaces .)
    +               reduce using rule 31 (statement -> GLOBAL list_spaces .)
    LPAREN          reduce using rule 31 (statement -> GLOBAL list_spaces .)
    LCURLY          reduce using rule 31 (statement -> GLOBAL list_spaces .)
    STRING          reduce using rule 31 (statement -> GLOBAL list_spaces .)
    :               reduce using rule 31 (statement -> GLOBAL list_spaces .)
    NUMBER          reduce using rule 31 (statement -> GLOBAL list_spaces .)
    LBRACKET        reduce using rule 31 (statement -> GLOBAL list_spaces .)
    $end            reduce using rule 31 (statement -> GLOBAL list_spaces .)
    NAME            shift and go to state 102

  ! NAME            [ reduce using rule 31 (statement -> GLOBAL list_spaces .) ]


state 38

    (34) list_spaces -> NAME .

    NAME            reduce using rule 34 (list_spaces -> NAME .)
    COMMA           reduce using rule 34 (list_spaces -> NAME .)
    SEMICOLON       reduce using rule 34 (list_spaces -> NAME .)
    FUNCTION        reduce using rule 34 (list_spaces -> NAME .)
    FOR             reduce using rule 34 (list_spaces -> NAME .)
    WHILE           reduce using rule 34 (list_spaces -> NAME .)
    IF              reduce using rule 34 (list_spaces -> NAME .)
    ELSEIF          reduce using rule 34 (list_spaces -> NAME .)
    ELSE            reduce using rule 34 (list_spaces -> NAME .)
    BREAK           reduce using rule 34 (list_spaces -> NAME .)
    CONTINUE        reduce using rule 34 (list_spaces -> NAME .)
    RETURN          reduce using rule 34 (list_spaces -> NAME .)
    SWITCH          reduce using rule 34 (list_spaces -> NAME .)
    CASE            reduce using rule 34 (list_spaces -> NAME .)
    OTHERWISE       reduce using rule 34 (list_spaces -> NAME .)
    GLOBAL          reduce using rule 34 (list_spaces -> NAME .)
    PERSISTENT      reduce using rule 34 (list_spaces -> NAME .)
    TRY             reduce using rule 34 (list_spaces -> NAME .)
    CATCH           reduce using rule 34 (list_spaces -> NAME .)
    END             reduce using rule 34 (list_spaces -> NAME .)
    LAMBDA          reduce using rule 34 (list_spaces -> NAME .)
    NOT             reduce using rule 34 (list_spaces -> NAME .)
    -               reduce using rule 34 (list_spaces -> NAME .)
    +               reduce using rule 34 (list_spaces -> NAME .)
    LPAREN          reduce using rule 34 (list_spaces -> NAME .)
    LCURLY          reduce using rule 34 (list_spaces -> NAME .)
    STRING          reduce using rule 34 (list_spaces -> NAME .)
    :               reduce using rule 34 (list_spaces -> NAME .)
    NUMBER          reduce using rule 34 (list_spaces -> NAME .)
    LBRACKET        reduce using rule 34 (list_spaces -> NAME .)
    $end            reduce using rule 34 (list_spaces -> NAME .)



state 39

    (53) exprinlist -> empty .

    RCURLY          reduce using rule 53 (exprinlist -> empty .)
    COMMA           reduce using rule 53 (exprinlist -> empty .)
    SEMICOLON       reduce using rule 53 (exprinlist -> empty .)
    NEWLINE         reduce using rule 53 (exprinlist -> empty .)
    LAMBDA          reduce using rule 53 (exprinlist -> empty .)
    NOT             reduce using rule 53 (exprinlist -> empty .)
    -               reduce using rule 53 (exprinlist -> empty .)
    +               reduce using rule 53 (exprinlist -> empty .)
    LPAREN          reduce using rule 53 (exprinlist -> empty .)
    NAME            reduce using rule 53 (exprinlist -> empty .)
    LCURLY          reduce using rule 53 (exprinlist -> empty .)
    STRING          reduce using rule 53 (exprinlist -> empty .)
    :               reduce using rule 53 (exprinlist -> empty .)
    NUMBER          reduce using rule 53 (exprinlist -> empty .)
    LBRACKET        reduce using rule 53 (exprinlist -> empty .)
    RBRACKET        reduce using rule 53 (exprinlist -> empty .)



state 40

    (97) expression -> name_attr .
    (93) name_attr -> name_attr . . NAME
    (94) name_attr -> name_attr . . name_sub

    +               reduce using rule 97 (expression -> name_attr .)
    -               reduce using rule 97 (expression -> name_attr .)
    *               reduce using rule 97 (expression -> name_attr .)
    /               reduce using rule 97 (expression -> name_attr .)
    \               reduce using rule 97 (expression -> name_attr .)
    ^               reduce using rule 97 (expression -> name_attr .)
    DOTTIMES        reduce using rule 97 (expression -> name_attr .)
    DOTDIVIDE       reduce using rule 97 (expression -> name_attr .)
    DOTRDIVIDE      reduce using rule 97 (expression -> name_attr .)
    DOTPOWER        reduce using rule 97 (expression -> name_attr .)
    NOTEQUAL        reduce using rule 97 (expression -> name_attr .)
    ISEQUAL         reduce using rule 97 (expression -> name_attr .)
    LESS            reduce using rule 97 (expression -> name_attr .)
    GREATER         reduce using rule 97 (expression -> name_attr .)
    LESSEQUAL       reduce using rule 97 (expression -> name_attr .)
    GREATEREQUAL    reduce using rule 97 (expression -> name_attr .)
    ELAND           reduce using rule 97 (expression -> name_attr .)
    ELOR            reduce using rule 97 (expression -> name_attr .)
    AND             reduce using rule 97 (expression -> name_attr .)
    OR              reduce using rule 97 (expression -> name_attr .)
    CONJTRANS       reduce using rule 97 (expression -> name_attr .)
    TRANS           reduce using rule 97 (expression -> name_attr .)
    :               reduce using rule 97 (expression -> name_attr .)
    RBRACKET        reduce using rule 97 (expression -> name_attr .)
    COMMA           reduce using rule 97 (expression -> name_attr .)
    SEMICOLON       reduce using rule 97 (expression -> name_attr .)
    NEWLINE         reduce using rule 97 (expression -> name_attr .)
    LAMBDA          reduce using rule 97 (expression -> name_attr .)
    NOT             reduce using rule 97 (expression -> name_attr .)
    LPAREN          reduce using rule 97 (expression -> name_attr .)
    NAME            reduce using rule 97 (expression -> name_attr .)
    LCURLY          reduce using rule 97 (expression -> name_attr .)
    STRING          reduce using rule 97 (expression -> name_attr .)
    NUMBER          reduce using rule 97 (expression -> name_attr .)
    LBRACKET        reduce using rule 97 (expression -> name_attr .)
    RCURLY          reduce using rule 97 (expression -> name_attr .)
    FUNCTION        reduce using rule 97 (expression -> name_attr .)
    FOR             reduce using rule 97 (expression -> name_attr .)
    WHILE           reduce using rule 97 (expression -> name_attr .)
    IF              reduce using rule 97 (expression -> name_attr .)
    ELSEIF          reduce using rule 97 (expression -> name_attr .)
    ELSE            reduce using rule 97 (expression -> name_attr .)
    BREAK           reduce using rule 97 (expression -> name_attr .)
    CONTINUE        reduce using rule 97 (expression -> name_attr .)
    RETURN          reduce using rule 97 (expression -> name_attr .)
    SWITCH          reduce using rule 97 (expression -> name_attr .)
    CASE            reduce using rule 97 (expression -> name_attr .)
    OTHERWISE       reduce using rule 97 (expression -> name_attr .)
    GLOBAL          reduce using rule 97 (expression -> name_attr .)
    PERSISTENT      reduce using rule 97 (expression -> name_attr .)
    TRY             reduce using rule 97 (expression -> name_attr .)
    CATCH           reduce using rule 97 (expression -> name_attr .)
    END             reduce using rule 97 (expression -> name_attr .)
    $end            reduce using rule 97 (expression -> name_attr .)
    RPAREN          reduce using rule 97 (expression -> name_attr .)
    .               shift and go to state 48



state 41

    (99) expression -> name_sub .
    (92) name_attr -> name_sub . . NAME
    (95) name_attr -> name_sub . . name_sub

    +               reduce using rule 99 (expression -> name_sub .)
    -               reduce using rule 99 (expression -> name_sub .)
    *               reduce using rule 99 (expression -> name_sub .)
    /               reduce using rule 99 (expression -> name_sub .)
    \               reduce using rule 99 (expression -> name_sub .)
    ^               reduce using rule 99 (expression -> name_sub .)
    DOTTIMES        reduce using rule 99 (expression -> name_sub .)
    DOTDIVIDE       reduce using rule 99 (expression -> name_sub .)
    DOTRDIVIDE      reduce using rule 99 (expression -> name_sub .)
    DOTPOWER        reduce using rule 99 (expression -> name_sub .)
    NOTEQUAL        reduce using rule 99 (expression -> name_sub .)
    ISEQUAL         reduce using rule 99 (expression -> name_sub .)
    LESS            reduce using rule 99 (expression -> name_sub .)
    GREATER         reduce using rule 99 (expression -> name_sub .)
    LESSEQUAL       reduce using rule 99 (expression -> name_sub .)
    GREATEREQUAL    reduce using rule 99 (expression -> name_sub .)
    ELAND           reduce using rule 99 (expression -> name_sub .)
    ELOR            reduce using rule 99 (expression -> name_sub .)
    AND             reduce using rule 99 (expression -> name_sub .)
    OR              reduce using rule 99 (expression -> name_sub .)
    CONJTRANS       reduce using rule 99 (expression -> name_sub .)
    TRANS           reduce using rule 99 (expression -> name_sub .)
    :               reduce using rule 99 (expression -> name_sub .)
    RBRACKET        reduce using rule 99 (expression -> name_sub .)
    COMMA           reduce using rule 99 (expression -> name_sub .)
    SEMICOLON       reduce using rule 99 (expression -> name_sub .)
    NEWLINE         reduce using rule 99 (expression -> name_sub .)
    LAMBDA          reduce using rule 99 (expression -> name_sub .)
    NOT             reduce using rule 99 (expression -> name_sub .)
    LPAREN          reduce using rule 99 (expression -> name_sub .)
    NAME            reduce using rule 99 (expression -> name_sub .)
    LCURLY          reduce using rule 99 (expression -> name_sub .)
    STRING          reduce using rule 99 (expression -> name_sub .)
    NUMBER          reduce using rule 99 (expression -> name_sub .)
    LBRACKET        reduce using rule 99 (expression -> name_sub .)
    RCURLY          reduce using rule 99 (expression -> name_sub .)
    FUNCTION        reduce using rule 99 (expression -> name_sub .)
    FOR             reduce using rule 99 (expression -> name_sub .)
    WHILE           reduce using rule 99 (expression -> name_sub .)
    IF              reduce using rule 99 (expression -> name_sub .)
    ELSEIF          reduce using rule 99 (expression -> name_sub .)
    ELSE            reduce using rule 99 (expression -> name_sub .)
    BREAK           reduce using rule 99 (expression -> name_sub .)
    CONTINUE        reduce using rule 99 (expression -> name_sub .)
    RETURN          reduce using rule 99 (expression -> name_sub .)
    SWITCH          reduce using rule 99 (expression -> name_sub .)
    CASE            reduce using rule 99 (expression -> name_sub .)
    OTHERWISE       reduce using rule 99 (expression -> name_sub .)
    GLOBAL          reduce using rule 99 (expression -> name_sub .)
    PERSISTENT      reduce using rule 99 (expression -> name_sub .)
    TRY             reduce using rule 99 (expression -> name_sub .)
    CATCH           reduce using rule 99 (expression -> name_sub .)
    END             reduce using rule 99 (expression -> name_sub .)
    $end            reduce using rule 99 (expression -> name_sub .)
    RPAREN          reduce using rule 99 (expression -> name_sub .)
    .               shift and go to state 61



state 42

    (82) expression -> exprmcat .

    +               reduce using rule 82 (expression -> exprmcat .)
    -               reduce using rule 82 (expression -> exprmcat .)
    *               reduce using rule 82 (expression -> exprmcat .)
    /               reduce using rule 82 (expression -> exprmcat .)
    \               reduce using rule 82 (expression -> exprmcat .)
    ^               reduce using rule 82 (expression -> exprmcat .)
    DOTTIMES        reduce using rule 82 (expression -> exprmcat .)
    DOTDIVIDE       reduce using rule 82 (expression -> exprmcat .)
    DOTRDIVIDE      reduce using rule 82 (expression -> exprmcat .)
    DOTPOWER        reduce using rule 82 (expression -> exprmcat .)
    NOTEQUAL        reduce using rule 82 (expression -> exprmcat .)
    ISEQUAL         reduce using rule 82 (expression -> exprmcat .)
    LESS            reduce using rule 82 (expression -> exprmcat .)
    GREATER         reduce using rule 82 (expression -> exprmcat .)
    LESSEQUAL       reduce using rule 82 (expression -> exprmcat .)
    GREATEREQUAL    reduce using rule 82 (expression -> exprmcat .)
    ELAND           reduce using rule 82 (expression -> exprmcat .)
    ELOR            reduce using rule 82 (expression -> exprmcat .)
    AND             reduce using rule 82 (expression -> exprmcat .)
    OR              reduce using rule 82 (expression -> exprmcat .)
    CONJTRANS       reduce using rule 82 (expression -> exprmcat .)
    TRANS           reduce using rule 82 (expression -> exprmcat .)
    :               reduce using rule 82 (expression -> exprmcat .)
    RBRACKET        reduce using rule 82 (expression -> exprmcat .)
    COMMA           reduce using rule 82 (expression -> exprmcat .)
    SEMICOLON       reduce using rule 82 (expression -> exprmcat .)
    NEWLINE         reduce using rule 82 (expression -> exprmcat .)
    LAMBDA          reduce using rule 82 (expression -> exprmcat .)
    NOT             reduce using rule 82 (expression -> exprmcat .)
    LPAREN          reduce using rule 82 (expression -> exprmcat .)
    NAME            reduce using rule 82 (expression -> exprmcat .)
    LCURLY          reduce using rule 82 (expression -> exprmcat .)
    STRING          reduce using rule 82 (expression -> exprmcat .)
    NUMBER          reduce using rule 82 (expression -> exprmcat .)
    LBRACKET        reduce using rule 82 (expression -> exprmcat .)
    RCURLY          reduce using rule 82 (expression -> exprmcat .)
    FUNCTION        reduce using rule 82 (expression -> exprmcat .)
    FOR             reduce using rule 82 (expression -> exprmcat .)
    WHILE           reduce using rule 82 (expression -> exprmcat .)
    IF              reduce using rule 82 (expression -> exprmcat .)
    ELSEIF          reduce using rule 82 (expression -> exprmcat .)
    ELSE            reduce using rule 82 (expression -> exprmcat .)
    BREAK           reduce using rule 82 (expression -> exprmcat .)
    CONTINUE        reduce using rule 82 (expression -> exprmcat .)
    RETURN          reduce using rule 82 (expression -> exprmcat .)
    SWITCH          reduce using rule 82 (expression -> exprmcat .)
    CASE            reduce using rule 82 (expression -> exprmcat .)
    OTHERWISE       reduce using rule 82 (expression -> exprmcat .)
    GLOBAL          reduce using rule 82 (expression -> exprmcat .)
    PERSISTENT      reduce using rule 82 (expression -> exprmcat .)
    TRY             reduce using rule 82 (expression -> exprmcat .)
    CATCH           reduce using rule 82 (expression -> exprmcat .)
    END             reduce using rule 82 (expression -> exprmcat .)
    $end            reduce using rule 82 (expression -> exprmcat .)
    RPAREN          reduce using rule 82 (expression -> exprmcat .)



state 43

    (81) expression -> NAME . LPAREN RPAREN
    (90) expression -> NAME . indexflat
    (104) expression -> NAME .
    (96) name_attr -> NAME .
    (91) name_sub -> NAME . LPAREN exprlist RPAREN
    (98) name_sub -> NAME . LCURLY exprinlist RCURLY
    (88) indexflat -> . LPAREN : RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift.
  ! reduce/reduce conflict for + resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for - resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for * resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for / resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for \ resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for ^ resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for DOTTIMES resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for DOTDIVIDE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for DOTRDIVIDE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for DOTPOWER resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for ISEQUAL resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for LESS resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for GREATER resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for ELAND resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for ELOR resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for AND resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for OR resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for CONJTRANS resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for TRANS resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for : resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for RCURLY resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for COMMA resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for SEMICOLON resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for NEWLINE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for LAMBDA resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for NOT resolved using rule 96 (name_attr -> NAME .).
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! reduce/reduce conflict for NAME resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for LCURLY resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for STRING resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for NUMBER resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for LBRACKET resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for FUNCTION resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for FOR resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for WHILE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for IF resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for ELSEIF resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for ELSE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for BREAK resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for CONTINUE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for RETURN resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for SWITCH resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for CASE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for OTHERWISE resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for GLOBAL resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for PERSISTENT resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for TRY resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for CATCH resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for END resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for $end resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for RBRACKET resolved using rule 96 (name_attr -> NAME .).
  ! reduce/reduce conflict for RPAREN resolved using rule 96 (name_attr -> NAME .).
  ! shift/reduce conflict for LCURLY resolved as shift.
    LPAREN          shift and go to state 73
    .               reduce using rule 96 (name_attr -> NAME .)
    +               reduce using rule 96 (name_attr -> NAME .)
    -               reduce using rule 96 (name_attr -> NAME .)
    *               reduce using rule 96 (name_attr -> NAME .)
    /               reduce using rule 96 (name_attr -> NAME .)
    \               reduce using rule 96 (name_attr -> NAME .)
    ^               reduce using rule 96 (name_attr -> NAME .)
    DOTTIMES        reduce using rule 96 (name_attr -> NAME .)
    DOTDIVIDE       reduce using rule 96 (name_attr -> NAME .)
    DOTRDIVIDE      reduce using rule 96 (name_attr -> NAME .)
    DOTPOWER        reduce using rule 96 (name_attr -> NAME .)
    NOTEQUAL        reduce using rule 96 (name_attr -> NAME .)
    ISEQUAL         reduce using rule 96 (name_attr -> NAME .)
    LESS            reduce using rule 96 (name_attr -> NAME .)
    GREATER         reduce using rule 96 (name_attr -> NAME .)
    LESSEQUAL       reduce using rule 96 (name_attr -> NAME .)
    GREATEREQUAL    reduce using rule 96 (name_attr -> NAME .)
    ELAND           reduce using rule 96 (name_attr -> NAME .)
    ELOR            reduce using rule 96 (name_attr -> NAME .)
    AND             reduce using rule 96 (name_attr -> NAME .)
    OR              reduce using rule 96 (name_attr -> NAME .)
    CONJTRANS       reduce using rule 96 (name_attr -> NAME .)
    TRANS           reduce using rule 96 (name_attr -> NAME .)
    :               reduce using rule 96 (name_attr -> NAME .)
    RCURLY          reduce using rule 96 (name_attr -> NAME .)
    COMMA           reduce using rule 96 (name_attr -> NAME .)
    SEMICOLON       reduce using rule 96 (name_attr -> NAME .)
    NEWLINE         reduce using rule 96 (name_attr -> NAME .)
    LAMBDA          reduce using rule 96 (name_attr -> NAME .)
    NOT             reduce using rule 96 (name_attr -> NAME .)
    NAME            reduce using rule 96 (name_attr -> NAME .)
    STRING          reduce using rule 96 (name_attr -> NAME .)
    NUMBER          reduce using rule 96 (name_attr -> NAME .)
    LBRACKET        reduce using rule 96 (name_attr -> NAME .)
    FUNCTION        reduce using rule 96 (name_attr -> NAME .)
    FOR             reduce using rule 96 (name_attr -> NAME .)
    WHILE           reduce using rule 96 (name_attr -> NAME .)
    IF              reduce using rule 96 (name_attr -> NAME .)
    ELSEIF          reduce using rule 96 (name_attr -> NAME .)
    ELSE            reduce using rule 96 (name_attr -> NAME .)
    BREAK           reduce using rule 96 (name_attr -> NAME .)
    CONTINUE        reduce using rule 96 (name_attr -> NAME .)
    RETURN          reduce using rule 96 (name_attr -> NAME .)
    SWITCH          reduce using rule 96 (name_attr -> NAME .)
    CASE            reduce using rule 96 (name_attr -> NAME .)
    OTHERWISE       reduce using rule 96 (name_attr -> NAME .)
    GLOBAL          reduce using rule 96 (name_attr -> NAME .)
    PERSISTENT      reduce using rule 96 (name_attr -> NAME .)
    TRY             reduce using rule 96 (name_attr -> NAME .)
    CATCH           reduce using rule 96 (name_attr -> NAME .)
    END             reduce using rule 96 (name_attr -> NAME .)
    $end            reduce using rule 96 (name_attr -> NAME .)
    RBRACKET        reduce using rule 96 (name_attr -> NAME .)
    RPAREN          reduce using rule 96 (name_attr -> NAME .)
    LCURLY          shift and go to state 72

  ! +               [ reduce using rule 104 (expression -> NAME .) ]
  ! -               [ reduce using rule 104 (expression -> NAME .) ]
  ! *               [ reduce using rule 104 (expression -> NAME .) ]
  ! /               [ reduce using rule 104 (expression -> NAME .) ]
  ! \               [ reduce using rule 104 (expression -> NAME .) ]
  ! ^               [ reduce using rule 104 (expression -> NAME .) ]
  ! DOTTIMES        [ reduce using rule 104 (expression -> NAME .) ]
  ! DOTDIVIDE       [ reduce using rule 104 (expression -> NAME .) ]
  ! DOTRDIVIDE      [ reduce using rule 104 (expression -> NAME .) ]
  ! DOTPOWER        [ reduce using rule 104 (expression -> NAME .) ]
  ! NOTEQUAL        [ reduce using rule 104 (expression -> NAME .) ]
  ! ISEQUAL         [ reduce using rule 104 (expression -> NAME .) ]
  ! LESS            [ reduce using rule 104 (expression -> NAME .) ]
  ! GREATER         [ reduce using rule 104 (expression -> NAME .) ]
  ! LESSEQUAL       [ reduce using rule 104 (expression -> NAME .) ]
  ! GREATEREQUAL    [ reduce using rule 104 (expression -> NAME .) ]
  ! ELAND           [ reduce using rule 104 (expression -> NAME .) ]
  ! ELOR            [ reduce using rule 104 (expression -> NAME .) ]
  ! AND             [ reduce using rule 104 (expression -> NAME .) ]
  ! OR              [ reduce using rule 104 (expression -> NAME .) ]
  ! CONJTRANS       [ reduce using rule 104 (expression -> NAME .) ]
  ! TRANS           [ reduce using rule 104 (expression -> NAME .) ]
  ! :               [ reduce using rule 104 (expression -> NAME .) ]
  ! RBRACKET        [ reduce using rule 104 (expression -> NAME .) ]
  ! COMMA           [ reduce using rule 104 (expression -> NAME .) ]
  ! SEMICOLON       [ reduce using rule 104 (expression -> NAME .) ]
  ! NEWLINE         [ reduce using rule 104 (expression -> NAME .) ]
  ! LAMBDA          [ reduce using rule 104 (expression -> NAME .) ]
  ! NOT             [ reduce using rule 104 (expression -> NAME .) ]
  ! LPAREN          [ reduce using rule 104 (expression -> NAME .) ]
  ! NAME            [ reduce using rule 104 (expression -> NAME .) ]
  ! LCURLY          [ reduce using rule 104 (expression -> NAME .) ]
  ! STRING          [ reduce using rule 104 (expression -> NAME .) ]
  ! NUMBER          [ reduce using rule 104 (expression -> NAME .) ]
  ! LBRACKET        [ reduce using rule 104 (expression -> NAME .) ]
  ! RCURLY          [ reduce using rule 104 (expression -> NAME .) ]
  ! FUNCTION        [ reduce using rule 104 (expression -> NAME .) ]
  ! FOR             [ reduce using rule 104 (expression -> NAME .) ]
  ! WHILE           [ reduce using rule 104 (expression -> NAME .) ]
  ! IF              [ reduce using rule 104 (expression -> NAME .) ]
  ! ELSEIF          [ reduce using rule 104 (expression -> NAME .) ]
  ! ELSE            [ reduce using rule 104 (expression -> NAME .) ]
  ! BREAK           [ reduce using rule 104 (expression -> NAME .) ]
  ! CONTINUE        [ reduce using rule 104 (expression -> NAME .) ]
  ! RETURN          [ reduce using rule 104 (expression -> NAME .) ]
  ! SWITCH          [ reduce using rule 104 (expression -> NAME .) ]
  ! CASE            [ reduce using rule 104 (expression -> NAME .) ]
  ! OTHERWISE       [ reduce using rule 104 (expression -> NAME .) ]
  ! GLOBAL          [ reduce using rule 104 (expression -> NAME .) ]
  ! PERSISTENT      [ reduce using rule 104 (expression -> NAME .) ]
  ! TRY             [ reduce using rule 104 (expression -> NAME .) ]
  ! CATCH           [ reduce using rule 104 (expression -> NAME .) ]
  ! END             [ reduce using rule 104 (expression -> NAME .) ]
  ! $end            [ reduce using rule 104 (expression -> NAME .) ]
  ! RPAREN          [ reduce using rule 104 (expression -> NAME .) ]
  ! LPAREN          [ reduce using rule 96 (name_attr -> NAME .) ]
  ! LCURLY          [ reduce using rule 96 (name_attr -> NAME .) ]

    indexflat                      shift and go to state 74

state 44

    (83) exprmcat -> LBRACKET exprinlist . RBRACKET
    (46) exprinlist -> exprinlist . COMMA expression
    (47) exprinlist -> exprinlist . SEMICOLON expression
    (48) exprinlist -> exprinlist . NEWLINE expression
    (49) exprinlist -> exprinlist . expression
    (50) exprinlist -> exprinlist . SEMICOLON
    (51) exprinlist -> exprinlist . COMMA
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    RBRACKET        shift and go to state 106
    COMMA           shift and go to state 105
    SEMICOLON       shift and go to state 104
    NEWLINE         shift and go to state 103
    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 107
    exprmcat                       shift and go to state 42

state 45

    (55) exprinlist -> expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RCURLY          reduce using rule 55 (exprinlist -> expression .)
    COMMA           reduce using rule 55 (exprinlist -> expression .)
    SEMICOLON       reduce using rule 55 (exprinlist -> expression .)
    NEWLINE         reduce using rule 55 (exprinlist -> expression .)
    LAMBDA          reduce using rule 55 (exprinlist -> expression .)
    NOT             reduce using rule 55 (exprinlist -> expression .)
    LPAREN          reduce using rule 55 (exprinlist -> expression .)
    NAME            reduce using rule 55 (exprinlist -> expression .)
    LCURLY          reduce using rule 55 (exprinlist -> expression .)
    STRING          reduce using rule 55 (exprinlist -> expression .)
    NUMBER          reduce using rule 55 (exprinlist -> expression .)
    LBRACKET        reduce using rule 55 (exprinlist -> expression .)
    RBRACKET        reduce using rule 55 (exprinlist -> expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 55 (exprinlist -> expression .) ]
  ! +               [ reduce using rule 55 (exprinlist -> expression .) ]
  ! :               [ reduce using rule 55 (exprinlist -> expression .) ]


state 46

    (84) expression -> LCURLY exprinlist . RCURLY
    (46) exprinlist -> exprinlist . COMMA expression
    (47) exprinlist -> exprinlist . SEMICOLON expression
    (48) exprinlist -> exprinlist . NEWLINE expression
    (49) exprinlist -> exprinlist . expression
    (50) exprinlist -> exprinlist . SEMICOLON
    (51) exprinlist -> exprinlist . COMMA
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    RCURLY          shift and go to state 108
    COMMA           shift and go to state 105
    SEMICOLON       shift and go to state 104
    NEWLINE         shift and go to state 103
    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 107
    exprmcat                       shift and go to state 42

state 47

    (21) statement -> WHILE expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    COMMA           reduce using rule 21 (statement -> WHILE expression .)
    SEMICOLON       reduce using rule 21 (statement -> WHILE expression .)
    FUNCTION        reduce using rule 21 (statement -> WHILE expression .)
    FOR             reduce using rule 21 (statement -> WHILE expression .)
    WHILE           reduce using rule 21 (statement -> WHILE expression .)
    IF              reduce using rule 21 (statement -> WHILE expression .)
    ELSEIF          reduce using rule 21 (statement -> WHILE expression .)
    ELSE            reduce using rule 21 (statement -> WHILE expression .)
    BREAK           reduce using rule 21 (statement -> WHILE expression .)
    CONTINUE        reduce using rule 21 (statement -> WHILE expression .)
    RETURN          reduce using rule 21 (statement -> WHILE expression .)
    SWITCH          reduce using rule 21 (statement -> WHILE expression .)
    CASE            reduce using rule 21 (statement -> WHILE expression .)
    OTHERWISE       reduce using rule 21 (statement -> WHILE expression .)
    GLOBAL          reduce using rule 21 (statement -> WHILE expression .)
    PERSISTENT      reduce using rule 21 (statement -> WHILE expression .)
    TRY             reduce using rule 21 (statement -> WHILE expression .)
    CATCH           reduce using rule 21 (statement -> WHILE expression .)
    END             reduce using rule 21 (statement -> WHILE expression .)
    NAME            reduce using rule 21 (statement -> WHILE expression .)
    LAMBDA          reduce using rule 21 (statement -> WHILE expression .)
    NOT             reduce using rule 21 (statement -> WHILE expression .)
    LPAREN          reduce using rule 21 (statement -> WHILE expression .)
    LCURLY          reduce using rule 21 (statement -> WHILE expression .)
    STRING          reduce using rule 21 (statement -> WHILE expression .)
    NUMBER          reduce using rule 21 (statement -> WHILE expression .)
    LBRACKET        reduce using rule 21 (statement -> WHILE expression .)
    $end            reduce using rule 21 (statement -> WHILE expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 21 (statement -> WHILE expression .) ]
  ! +               [ reduce using rule 21 (statement -> WHILE expression .) ]
  ! :               [ reduce using rule 21 (statement -> WHILE expression .) ]


state 48

    (93) name_attr -> name_attr . . NAME
    (94) name_attr -> name_attr . . name_sub
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY

    NAME            shift and go to state 109


    name_sub                       shift and go to state 110

state 49

    (39) statement -> name_attr = . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 111
    exprmcat                       shift and go to state 42

state 50

    (76) expression -> NOT expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RBRACKET        reduce using rule 76 (expression -> NOT expression .)
    COMMA           reduce using rule 76 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 76 (expression -> NOT expression .)
    NEWLINE         reduce using rule 76 (expression -> NOT expression .)
    LAMBDA          reduce using rule 76 (expression -> NOT expression .)
    NOT             reduce using rule 76 (expression -> NOT expression .)
    LPAREN          reduce using rule 76 (expression -> NOT expression .)
    NAME            reduce using rule 76 (expression -> NOT expression .)
    LCURLY          reduce using rule 76 (expression -> NOT expression .)
    STRING          reduce using rule 76 (expression -> NOT expression .)
    NUMBER          reduce using rule 76 (expression -> NOT expression .)
    LBRACKET        reduce using rule 76 (expression -> NOT expression .)
    RCURLY          reduce using rule 76 (expression -> NOT expression .)
    FUNCTION        reduce using rule 76 (expression -> NOT expression .)
    FOR             reduce using rule 76 (expression -> NOT expression .)
    WHILE           reduce using rule 76 (expression -> NOT expression .)
    IF              reduce using rule 76 (expression -> NOT expression .)
    ELSEIF          reduce using rule 76 (expression -> NOT expression .)
    ELSE            reduce using rule 76 (expression -> NOT expression .)
    BREAK           reduce using rule 76 (expression -> NOT expression .)
    CONTINUE        reduce using rule 76 (expression -> NOT expression .)
    RETURN          reduce using rule 76 (expression -> NOT expression .)
    SWITCH          reduce using rule 76 (expression -> NOT expression .)
    CASE            reduce using rule 76 (expression -> NOT expression .)
    OTHERWISE       reduce using rule 76 (expression -> NOT expression .)
    GLOBAL          reduce using rule 76 (expression -> NOT expression .)
    PERSISTENT      reduce using rule 76 (expression -> NOT expression .)
    TRY             reduce using rule 76 (expression -> NOT expression .)
    CATCH           reduce using rule 76 (expression -> NOT expression .)
    END             reduce using rule 76 (expression -> NOT expression .)
    $end            reduce using rule 76 (expression -> NOT expression .)
    RPAREN          reduce using rule 76 (expression -> NOT expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! +               [ reduce using rule 76 (expression -> NOT expression .) ]
  ! -               [ reduce using rule 76 (expression -> NOT expression .) ]
  ! *               [ reduce using rule 76 (expression -> NOT expression .) ]
  ! /               [ reduce using rule 76 (expression -> NOT expression .) ]
  ! \               [ reduce using rule 76 (expression -> NOT expression .) ]
  ! ^               [ reduce using rule 76 (expression -> NOT expression .) ]
  ! DOTTIMES        [ reduce using rule 76 (expression -> NOT expression .) ]
  ! DOTDIVIDE       [ reduce using rule 76 (expression -> NOT expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 76 (expression -> NOT expression .) ]
  ! DOTPOWER        [ reduce using rule 76 (expression -> NOT expression .) ]
  ! NOTEQUAL        [ reduce using rule 76 (expression -> NOT expression .) ]
  ! ISEQUAL         [ reduce using rule 76 (expression -> NOT expression .) ]
  ! LESS            [ reduce using rule 76 (expression -> NOT expression .) ]
  ! GREATER         [ reduce using rule 76 (expression -> NOT expression .) ]
  ! LESSEQUAL       [ reduce using rule 76 (expression -> NOT expression .) ]
  ! GREATEREQUAL    [ reduce using rule 76 (expression -> NOT expression .) ]
  ! ELAND           [ reduce using rule 76 (expression -> NOT expression .) ]
  ! ELOR            [ reduce using rule 76 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 76 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 76 (expression -> NOT expression .) ]
  ! CONJTRANS       [ reduce using rule 76 (expression -> NOT expression .) ]
  ! TRANS           [ reduce using rule 76 (expression -> NOT expression .) ]
  ! :               [ reduce using rule 76 (expression -> NOT expression .) ]


state 51

    (29) statement -> CASE expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    COMMA           reduce using rule 29 (statement -> CASE expression .)
    SEMICOLON       reduce using rule 29 (statement -> CASE expression .)
    FUNCTION        reduce using rule 29 (statement -> CASE expression .)
    FOR             reduce using rule 29 (statement -> CASE expression .)
    WHILE           reduce using rule 29 (statement -> CASE expression .)
    IF              reduce using rule 29 (statement -> CASE expression .)
    ELSEIF          reduce using rule 29 (statement -> CASE expression .)
    ELSE            reduce using rule 29 (statement -> CASE expression .)
    BREAK           reduce using rule 29 (statement -> CASE expression .)
    CONTINUE        reduce using rule 29 (statement -> CASE expression .)
    RETURN          reduce using rule 29 (statement -> CASE expression .)
    SWITCH          reduce using rule 29 (statement -> CASE expression .)
    CASE            reduce using rule 29 (statement -> CASE expression .)
    OTHERWISE       reduce using rule 29 (statement -> CASE expression .)
    GLOBAL          reduce using rule 29 (statement -> CASE expression .)
    PERSISTENT      reduce using rule 29 (statement -> CASE expression .)
    TRY             reduce using rule 29 (statement -> CASE expression .)
    CATCH           reduce using rule 29 (statement -> CASE expression .)
    END             reduce using rule 29 (statement -> CASE expression .)
    NAME            reduce using rule 29 (statement -> CASE expression .)
    LAMBDA          reduce using rule 29 (statement -> CASE expression .)
    NOT             reduce using rule 29 (statement -> CASE expression .)
    LPAREN          reduce using rule 29 (statement -> CASE expression .)
    LCURLY          reduce using rule 29 (statement -> CASE expression .)
    STRING          reduce using rule 29 (statement -> CASE expression .)
    NUMBER          reduce using rule 29 (statement -> CASE expression .)
    LBRACKET        reduce using rule 29 (statement -> CASE expression .)
    $end            reduce using rule 29 (statement -> CASE expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 29 (statement -> CASE expression .) ]
  ! +               [ reduce using rule 29 (statement -> CASE expression .) ]
  ! :               [ reduce using rule 29 (statement -> CASE expression .) ]


state 52

    (79) expression -> + expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    +               reduce using rule 79 (expression -> + expression .)
    -               reduce using rule 79 (expression -> + expression .)
    *               reduce using rule 79 (expression -> + expression .)
    /               reduce using rule 79 (expression -> + expression .)
    \               reduce using rule 79 (expression -> + expression .)
    ^               reduce using rule 79 (expression -> + expression .)
    DOTTIMES        reduce using rule 79 (expression -> + expression .)
    DOTDIVIDE       reduce using rule 79 (expression -> + expression .)
    DOTRDIVIDE      reduce using rule 79 (expression -> + expression .)
    DOTPOWER        reduce using rule 79 (expression -> + expression .)
    NOTEQUAL        reduce using rule 79 (expression -> + expression .)
    ISEQUAL         reduce using rule 79 (expression -> + expression .)
    LESS            reduce using rule 79 (expression -> + expression .)
    GREATER         reduce using rule 79 (expression -> + expression .)
    LESSEQUAL       reduce using rule 79 (expression -> + expression .)
    GREATEREQUAL    reduce using rule 79 (expression -> + expression .)
    ELAND           reduce using rule 79 (expression -> + expression .)
    ELOR            reduce using rule 79 (expression -> + expression .)
    AND             reduce using rule 79 (expression -> + expression .)
    OR              reduce using rule 79 (expression -> + expression .)
    CONJTRANS       reduce using rule 79 (expression -> + expression .)
    TRANS           reduce using rule 79 (expression -> + expression .)
    :               reduce using rule 79 (expression -> + expression .)
    RBRACKET        reduce using rule 79 (expression -> + expression .)
    COMMA           reduce using rule 79 (expression -> + expression .)
    SEMICOLON       reduce using rule 79 (expression -> + expression .)
    NEWLINE         reduce using rule 79 (expression -> + expression .)
    LAMBDA          reduce using rule 79 (expression -> + expression .)
    NOT             reduce using rule 79 (expression -> + expression .)
    LPAREN          reduce using rule 79 (expression -> + expression .)
    NAME            reduce using rule 79 (expression -> + expression .)
    LCURLY          reduce using rule 79 (expression -> + expression .)
    STRING          reduce using rule 79 (expression -> + expression .)
    NUMBER          reduce using rule 79 (expression -> + expression .)
    LBRACKET        reduce using rule 79 (expression -> + expression .)
    RCURLY          reduce using rule 79 (expression -> + expression .)
    FUNCTION        reduce using rule 79 (expression -> + expression .)
    FOR             reduce using rule 79 (expression -> + expression .)
    WHILE           reduce using rule 79 (expression -> + expression .)
    IF              reduce using rule 79 (expression -> + expression .)
    ELSEIF          reduce using rule 79 (expression -> + expression .)
    ELSE            reduce using rule 79 (expression -> + expression .)
    BREAK           reduce using rule 79 (expression -> + expression .)
    CONTINUE        reduce using rule 79 (expression -> + expression .)
    RETURN          reduce using rule 79 (expression -> + expression .)
    SWITCH          reduce using rule 79 (expression -> + expression .)
    CASE            reduce using rule 79 (expression -> + expression .)
    OTHERWISE       reduce using rule 79 (expression -> + expression .)
    GLOBAL          reduce using rule 79 (expression -> + expression .)
    PERSISTENT      reduce using rule 79 (expression -> + expression .)
    TRY             reduce using rule 79 (expression -> + expression .)
    CATCH           reduce using rule 79 (expression -> + expression .)
    END             reduce using rule 79 (expression -> + expression .)
    $end            reduce using rule 79 (expression -> + expression .)
    RPAREN          reduce using rule 79 (expression -> + expression .)

  ! +               [ shift and go to state 83 ]
  ! -               [ shift and go to state 85 ]
  ! *               [ shift and go to state 84 ]
  ! /               [ shift and go to state 86 ]
  ! \               [ shift and go to state 93 ]
  ! ^               [ shift and go to state 94 ]
  ! DOTTIMES        [ shift and go to state 89 ]
  ! DOTDIVIDE       [ shift and go to state 87 ]
  ! DOTRDIVIDE      [ shift and go to state 82 ]
  ! DOTPOWER        [ shift and go to state 97 ]
  ! NOTEQUAL        [ shift and go to state 77 ]
  ! ISEQUAL         [ shift and go to state 98 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 96 ]
  ! LESSEQUAL       [ shift and go to state 91 ]
  ! GREATEREQUAL    [ shift and go to state 81 ]
  ! ELAND           [ shift and go to state 78 ]
  ! ELOR            [ shift and go to state 79 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 99 ]
  ! CONJTRANS       [ shift and go to state 90 ]
  ! TRANS           [ shift and go to state 92 ]
  ! :               [ shift and go to state 88 ]


state 53

    (77) expression -> - expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    +               reduce using rule 77 (expression -> - expression .)
    -               reduce using rule 77 (expression -> - expression .)
    *               reduce using rule 77 (expression -> - expression .)
    /               reduce using rule 77 (expression -> - expression .)
    \               reduce using rule 77 (expression -> - expression .)
    ^               reduce using rule 77 (expression -> - expression .)
    DOTTIMES        reduce using rule 77 (expression -> - expression .)
    DOTDIVIDE       reduce using rule 77 (expression -> - expression .)
    DOTRDIVIDE      reduce using rule 77 (expression -> - expression .)
    DOTPOWER        reduce using rule 77 (expression -> - expression .)
    NOTEQUAL        reduce using rule 77 (expression -> - expression .)
    ISEQUAL         reduce using rule 77 (expression -> - expression .)
    LESS            reduce using rule 77 (expression -> - expression .)
    GREATER         reduce using rule 77 (expression -> - expression .)
    LESSEQUAL       reduce using rule 77 (expression -> - expression .)
    GREATEREQUAL    reduce using rule 77 (expression -> - expression .)
    ELAND           reduce using rule 77 (expression -> - expression .)
    ELOR            reduce using rule 77 (expression -> - expression .)
    AND             reduce using rule 77 (expression -> - expression .)
    OR              reduce using rule 77 (expression -> - expression .)
    CONJTRANS       reduce using rule 77 (expression -> - expression .)
    TRANS           reduce using rule 77 (expression -> - expression .)
    :               reduce using rule 77 (expression -> - expression .)
    RBRACKET        reduce using rule 77 (expression -> - expression .)
    COMMA           reduce using rule 77 (expression -> - expression .)
    SEMICOLON       reduce using rule 77 (expression -> - expression .)
    NEWLINE         reduce using rule 77 (expression -> - expression .)
    LAMBDA          reduce using rule 77 (expression -> - expression .)
    NOT             reduce using rule 77 (expression -> - expression .)
    LPAREN          reduce using rule 77 (expression -> - expression .)
    NAME            reduce using rule 77 (expression -> - expression .)
    LCURLY          reduce using rule 77 (expression -> - expression .)
    STRING          reduce using rule 77 (expression -> - expression .)
    NUMBER          reduce using rule 77 (expression -> - expression .)
    LBRACKET        reduce using rule 77 (expression -> - expression .)
    RCURLY          reduce using rule 77 (expression -> - expression .)
    FUNCTION        reduce using rule 77 (expression -> - expression .)
    FOR             reduce using rule 77 (expression -> - expression .)
    WHILE           reduce using rule 77 (expression -> - expression .)
    IF              reduce using rule 77 (expression -> - expression .)
    ELSEIF          reduce using rule 77 (expression -> - expression .)
    ELSE            reduce using rule 77 (expression -> - expression .)
    BREAK           reduce using rule 77 (expression -> - expression .)
    CONTINUE        reduce using rule 77 (expression -> - expression .)
    RETURN          reduce using rule 77 (expression -> - expression .)
    SWITCH          reduce using rule 77 (expression -> - expression .)
    CASE            reduce using rule 77 (expression -> - expression .)
    OTHERWISE       reduce using rule 77 (expression -> - expression .)
    GLOBAL          reduce using rule 77 (expression -> - expression .)
    PERSISTENT      reduce using rule 77 (expression -> - expression .)
    TRY             reduce using rule 77 (expression -> - expression .)
    CATCH           reduce using rule 77 (expression -> - expression .)
    END             reduce using rule 77 (expression -> - expression .)
    $end            reduce using rule 77 (expression -> - expression .)
    RPAREN          reduce using rule 77 (expression -> - expression .)

  ! +               [ shift and go to state 83 ]
  ! -               [ shift and go to state 85 ]
  ! *               [ shift and go to state 84 ]
  ! /               [ shift and go to state 86 ]
  ! \               [ shift and go to state 93 ]
  ! ^               [ shift and go to state 94 ]
  ! DOTTIMES        [ shift and go to state 89 ]
  ! DOTDIVIDE       [ shift and go to state 87 ]
  ! DOTRDIVIDE      [ shift and go to state 82 ]
  ! DOTPOWER        [ shift and go to state 97 ]
  ! NOTEQUAL        [ shift and go to state 77 ]
  ! ISEQUAL         [ shift and go to state 98 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 96 ]
  ! LESSEQUAL       [ shift and go to state 91 ]
  ! GREATEREQUAL    [ shift and go to state 81 ]
  ! ELAND           [ shift and go to state 78 ]
  ! ELOR            [ shift and go to state 79 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 99 ]
  ! CONJTRANS       [ shift and go to state 90 ]
  ! TRANS           [ shift and go to state 92 ]
  ! :               [ shift and go to state 88 ]


state 54

    (28) statement -> SWITCH expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    COMMA           reduce using rule 28 (statement -> SWITCH expression .)
    SEMICOLON       reduce using rule 28 (statement -> SWITCH expression .)
    FUNCTION        reduce using rule 28 (statement -> SWITCH expression .)
    FOR             reduce using rule 28 (statement -> SWITCH expression .)
    WHILE           reduce using rule 28 (statement -> SWITCH expression .)
    IF              reduce using rule 28 (statement -> SWITCH expression .)
    ELSEIF          reduce using rule 28 (statement -> SWITCH expression .)
    ELSE            reduce using rule 28 (statement -> SWITCH expression .)
    BREAK           reduce using rule 28 (statement -> SWITCH expression .)
    CONTINUE        reduce using rule 28 (statement -> SWITCH expression .)
    RETURN          reduce using rule 28 (statement -> SWITCH expression .)
    SWITCH          reduce using rule 28 (statement -> SWITCH expression .)
    CASE            reduce using rule 28 (statement -> SWITCH expression .)
    OTHERWISE       reduce using rule 28 (statement -> SWITCH expression .)
    GLOBAL          reduce using rule 28 (statement -> SWITCH expression .)
    PERSISTENT      reduce using rule 28 (statement -> SWITCH expression .)
    TRY             reduce using rule 28 (statement -> SWITCH expression .)
    CATCH           reduce using rule 28 (statement -> SWITCH expression .)
    END             reduce using rule 28 (statement -> SWITCH expression .)
    NAME            reduce using rule 28 (statement -> SWITCH expression .)
    LAMBDA          reduce using rule 28 (statement -> SWITCH expression .)
    NOT             reduce using rule 28 (statement -> SWITCH expression .)
    LPAREN          reduce using rule 28 (statement -> SWITCH expression .)
    LCURLY          reduce using rule 28 (statement -> SWITCH expression .)
    STRING          reduce using rule 28 (statement -> SWITCH expression .)
    NUMBER          reduce using rule 28 (statement -> SWITCH expression .)
    LBRACKET        reduce using rule 28 (statement -> SWITCH expression .)
    $end            reduce using rule 28 (statement -> SWITCH expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 28 (statement -> SWITCH expression .) ]
  ! +               [ reduce using rule 28 (statement -> SWITCH expression .) ]
  ! :               [ reduce using rule 28 (statement -> SWITCH expression .) ]


state 55

    (2) statement_list -> statement COMMA .
    (8) statement -> statement COMMA .

  ! reduce/reduce conflict for COMMA resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for SEMICOLON resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for FUNCTION resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for FOR resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for WHILE resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for IF resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for ELSEIF resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for ELSE resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for BREAK resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for CONTINUE resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for RETURN resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for SWITCH resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for CASE resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for OTHERWISE resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for GLOBAL resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for PERSISTENT resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for TRY resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for CATCH resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for END resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for NAME resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for LAMBDA resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for NOT resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for - resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for + resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for LPAREN resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for LCURLY resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for STRING resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for : resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for NUMBER resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for LBRACKET resolved using rule 2 (statement_list -> statement COMMA .).
  ! reduce/reduce conflict for $end resolved using rule 2 (statement_list -> statement COMMA .).
    SEMICOLON       reduce using rule 2 (statement_list -> statement COMMA .)
    COMMA           reduce using rule 2 (statement_list -> statement COMMA .)
    FUNCTION        reduce using rule 2 (statement_list -> statement COMMA .)
    FOR             reduce using rule 2 (statement_list -> statement COMMA .)
    WHILE           reduce using rule 2 (statement_list -> statement COMMA .)
    IF              reduce using rule 2 (statement_list -> statement COMMA .)
    ELSEIF          reduce using rule 2 (statement_list -> statement COMMA .)
    ELSE            reduce using rule 2 (statement_list -> statement COMMA .)
    BREAK           reduce using rule 2 (statement_list -> statement COMMA .)
    CONTINUE        reduce using rule 2 (statement_list -> statement COMMA .)
    RETURN          reduce using rule 2 (statement_list -> statement COMMA .)
    SWITCH          reduce using rule 2 (statement_list -> statement COMMA .)
    CASE            reduce using rule 2 (statement_list -> statement COMMA .)
    OTHERWISE       reduce using rule 2 (statement_list -> statement COMMA .)
    GLOBAL          reduce using rule 2 (statement_list -> statement COMMA .)
    PERSISTENT      reduce using rule 2 (statement_list -> statement COMMA .)
    TRY             reduce using rule 2 (statement_list -> statement COMMA .)
    CATCH           reduce using rule 2 (statement_list -> statement COMMA .)
    END             reduce using rule 2 (statement_list -> statement COMMA .)
    NAME            reduce using rule 2 (statement_list -> statement COMMA .)
    LAMBDA          reduce using rule 2 (statement_list -> statement COMMA .)
    NOT             reduce using rule 2 (statement_list -> statement COMMA .)
    -               reduce using rule 2 (statement_list -> statement COMMA .)
    +               reduce using rule 2 (statement_list -> statement COMMA .)
    LPAREN          reduce using rule 2 (statement_list -> statement COMMA .)
    LCURLY          reduce using rule 2 (statement_list -> statement COMMA .)
    STRING          reduce using rule 2 (statement_list -> statement COMMA .)
    :               reduce using rule 2 (statement_list -> statement COMMA .)
    NUMBER          reduce using rule 2 (statement_list -> statement COMMA .)
    LBRACKET        reduce using rule 2 (statement_list -> statement COMMA .)
    $end            reduce using rule 2 (statement_list -> statement COMMA .)

  ! COMMA           [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! SEMICOLON       [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! FUNCTION        [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! FOR             [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! WHILE           [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! IF              [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! ELSEIF          [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! ELSE            [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! BREAK           [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! CONTINUE        [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! RETURN          [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! SWITCH          [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! CASE            [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! OTHERWISE       [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! GLOBAL          [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! PERSISTENT      [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! TRY             [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! CATCH           [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! END             [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! NAME            [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! LAMBDA          [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! NOT             [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! -               [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! +               [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! LPAREN          [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! LCURLY          [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! STRING          [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! :               [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! NUMBER          [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! LBRACKET        [ reduce using rule 8 (statement -> statement COMMA .) ]
  ! $end            [ reduce using rule 8 (statement -> statement COMMA .) ]


state 56

    (3) statement_list -> statement SEMICOLON .
    (7) statement -> statement SEMICOLON .

  ! reduce/reduce conflict for COMMA resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for SEMICOLON resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for FUNCTION resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for FOR resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for WHILE resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for IF resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for ELSEIF resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for ELSE resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for BREAK resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for CONTINUE resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for RETURN resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for SWITCH resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for CASE resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for OTHERWISE resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for GLOBAL resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for PERSISTENT resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for TRY resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for CATCH resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for END resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for NAME resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for LAMBDA resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for NOT resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for - resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for + resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for LPAREN resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for LCURLY resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for STRING resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for : resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for NUMBER resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for LBRACKET resolved using rule 3 (statement_list -> statement SEMICOLON .).
  ! reduce/reduce conflict for $end resolved using rule 3 (statement_list -> statement SEMICOLON .).
    SEMICOLON       reduce using rule 3 (statement_list -> statement SEMICOLON .)
    COMMA           reduce using rule 3 (statement_list -> statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (statement_list -> statement SEMICOLON .)
    FOR             reduce using rule 3 (statement_list -> statement SEMICOLON .)
    WHILE           reduce using rule 3 (statement_list -> statement SEMICOLON .)
    IF              reduce using rule 3 (statement_list -> statement SEMICOLON .)
    ELSEIF          reduce using rule 3 (statement_list -> statement SEMICOLON .)
    ELSE            reduce using rule 3 (statement_list -> statement SEMICOLON .)
    BREAK           reduce using rule 3 (statement_list -> statement SEMICOLON .)
    CONTINUE        reduce using rule 3 (statement_list -> statement SEMICOLON .)
    RETURN          reduce using rule 3 (statement_list -> statement SEMICOLON .)
    SWITCH          reduce using rule 3 (statement_list -> statement SEMICOLON .)
    CASE            reduce using rule 3 (statement_list -> statement SEMICOLON .)
    OTHERWISE       reduce using rule 3 (statement_list -> statement SEMICOLON .)
    GLOBAL          reduce using rule 3 (statement_list -> statement SEMICOLON .)
    PERSISTENT      reduce using rule 3 (statement_list -> statement SEMICOLON .)
    TRY             reduce using rule 3 (statement_list -> statement SEMICOLON .)
    CATCH           reduce using rule 3 (statement_list -> statement SEMICOLON .)
    END             reduce using rule 3 (statement_list -> statement SEMICOLON .)
    NAME            reduce using rule 3 (statement_list -> statement SEMICOLON .)
    LAMBDA          reduce using rule 3 (statement_list -> statement SEMICOLON .)
    NOT             reduce using rule 3 (statement_list -> statement SEMICOLON .)
    -               reduce using rule 3 (statement_list -> statement SEMICOLON .)
    +               reduce using rule 3 (statement_list -> statement SEMICOLON .)
    LPAREN          reduce using rule 3 (statement_list -> statement SEMICOLON .)
    LCURLY          reduce using rule 3 (statement_list -> statement SEMICOLON .)
    STRING          reduce using rule 3 (statement_list -> statement SEMICOLON .)
    :               reduce using rule 3 (statement_list -> statement SEMICOLON .)
    NUMBER          reduce using rule 3 (statement_list -> statement SEMICOLON .)
    LBRACKET        reduce using rule 3 (statement_list -> statement SEMICOLON .)
    $end            reduce using rule 3 (statement_list -> statement SEMICOLON .)

  ! COMMA           [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! SEMICOLON       [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! FOR             [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! WHILE           [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! IF              [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! ELSEIF          [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! ELSE            [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! BREAK           [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! RETURN          [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! CASE            [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! OTHERWISE       [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! GLOBAL          [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! PERSISTENT      [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! TRY             [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! CATCH           [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! END             [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! NAME            [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! LAMBDA          [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! NOT             [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! -               [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! +               [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! LCURLY          [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! STRING          [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! :               [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! LBRACKET        [ reduce using rule 7 (statement -> statement SEMICOLON .) ]
  ! $end            [ reduce using rule 7 (statement -> statement SEMICOLON .) ]


state 57

    (12) statement -> FUNCTION NAME . = NAME LPAREN name_list RPAREN
    (13) statement -> FUNCTION NAME . = NAME
    (14) statement -> FUNCTION NAME . LPAREN name_list RPAREN
    (15) statement -> FUNCTION NAME .

  ! shift/reduce conflict for LPAREN resolved as shift.
    =               shift and go to state 113
    LPAREN          shift and go to state 112
    COMMA           reduce using rule 15 (statement -> FUNCTION NAME .)
    SEMICOLON       reduce using rule 15 (statement -> FUNCTION NAME .)
    FUNCTION        reduce using rule 15 (statement -> FUNCTION NAME .)
    FOR             reduce using rule 15 (statement -> FUNCTION NAME .)
    WHILE           reduce using rule 15 (statement -> FUNCTION NAME .)
    IF              reduce using rule 15 (statement -> FUNCTION NAME .)
    ELSEIF          reduce using rule 15 (statement -> FUNCTION NAME .)
    ELSE            reduce using rule 15 (statement -> FUNCTION NAME .)
    BREAK           reduce using rule 15 (statement -> FUNCTION NAME .)
    CONTINUE        reduce using rule 15 (statement -> FUNCTION NAME .)
    RETURN          reduce using rule 15 (statement -> FUNCTION NAME .)
    SWITCH          reduce using rule 15 (statement -> FUNCTION NAME .)
    CASE            reduce using rule 15 (statement -> FUNCTION NAME .)
    OTHERWISE       reduce using rule 15 (statement -> FUNCTION NAME .)
    GLOBAL          reduce using rule 15 (statement -> FUNCTION NAME .)
    PERSISTENT      reduce using rule 15 (statement -> FUNCTION NAME .)
    TRY             reduce using rule 15 (statement -> FUNCTION NAME .)
    CATCH           reduce using rule 15 (statement -> FUNCTION NAME .)
    END             reduce using rule 15 (statement -> FUNCTION NAME .)
    NAME            reduce using rule 15 (statement -> FUNCTION NAME .)
    LAMBDA          reduce using rule 15 (statement -> FUNCTION NAME .)
    NOT             reduce using rule 15 (statement -> FUNCTION NAME .)
    -               reduce using rule 15 (statement -> FUNCTION NAME .)
    +               reduce using rule 15 (statement -> FUNCTION NAME .)
    LCURLY          reduce using rule 15 (statement -> FUNCTION NAME .)
    STRING          reduce using rule 15 (statement -> FUNCTION NAME .)
    :               reduce using rule 15 (statement -> FUNCTION NAME .)
    NUMBER          reduce using rule 15 (statement -> FUNCTION NAME .)
    LBRACKET        reduce using rule 15 (statement -> FUNCTION NAME .)
    $end            reduce using rule 15 (statement -> FUNCTION NAME .)

  ! LPAREN          [ reduce using rule 15 (statement -> FUNCTION NAME .) ]


state 58

    (10) statement -> FUNCTION LBRACKET . name_list RBRACKET = NAME LPAREN name_list RPAREN
    (11) statement -> FUNCTION LBRACKET . name_list RBRACKET = NAME
    (17) name_list -> . name_list COMMA NAME
    (18) name_list -> . NAME

    NAME            shift and go to state 114


    name_list                      shift and go to state 115

state 59

    (20) statement -> FOR NAME . = expression

    =               shift and go to state 116



state 60

    (38) statement -> name_sub = . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 117
    exprmcat                       shift and go to state 42

state 61

    (92) name_attr -> name_sub . . NAME
    (95) name_attr -> name_sub . . name_sub
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY

    NAME            shift and go to state 118


    name_sub                       shift and go to state 119

state 62

    (4) statement_list -> statement_list SEMICOLON . statement
    (7) statement -> . statement SEMICOLON
    (8) statement -> . statement COMMA
    (9) statement -> . expression
    (10) statement -> . FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN
    (11) statement -> . FUNCTION LBRACKET name_list RBRACKET = NAME
    (12) statement -> . FUNCTION NAME = NAME LPAREN name_list RPAREN
    (13) statement -> . FUNCTION NAME = NAME
    (14) statement -> . FUNCTION NAME LPAREN name_list RPAREN
    (15) statement -> . FUNCTION NAME
    (20) statement -> . FOR NAME = expression
    (21) statement -> . WHILE expression
    (22) statement -> . IF expression
    (23) statement -> . ELSEIF expression
    (24) statement -> . ELSE
    (25) statement -> . BREAK
    (26) statement -> . CONTINUE
    (27) statement -> . RETURN
    (28) statement -> . SWITCH expression
    (29) statement -> . CASE expression
    (30) statement -> . OTHERWISE
    (31) statement -> . GLOBAL list_spaces
    (32) statement -> . PERSISTENT list_spaces
    (35) statement -> . TRY
    (36) statement -> . CATCH
    (37) statement -> . END
    (38) statement -> . name_sub = expression
    (39) statement -> . name_attr = expression
    (40) statement -> . exprmcat = expression
    (41) statement -> . NAME = expression
    (42) statement -> . NAME NAME
    (43) statement -> . NAME NUMBER
    (52) statement -> . empty
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (54) empty -> .
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

  ! shift/reduce conflict for FUNCTION resolved as shift.
  ! shift/reduce conflict for FOR resolved as shift.
  ! shift/reduce conflict for WHILE resolved as shift.
  ! shift/reduce conflict for IF resolved as shift.
  ! shift/reduce conflict for ELSEIF resolved as shift.
  ! shift/reduce conflict for ELSE resolved as shift.
  ! shift/reduce conflict for BREAK resolved as shift.
  ! shift/reduce conflict for CONTINUE resolved as shift.
  ! shift/reduce conflict for RETURN resolved as shift.
  ! shift/reduce conflict for SWITCH resolved as shift.
  ! shift/reduce conflict for CASE resolved as shift.
  ! shift/reduce conflict for OTHERWISE resolved as shift.
  ! shift/reduce conflict for GLOBAL resolved as shift.
  ! shift/reduce conflict for PERSISTENT resolved as shift.
  ! shift/reduce conflict for TRY resolved as shift.
  ! shift/reduce conflict for CATCH resolved as shift.
  ! shift/reduce conflict for END resolved as shift.
  ! shift/reduce conflict for NAME resolved as shift.
  ! shift/reduce conflict for LAMBDA resolved as shift.
  ! shift/reduce conflict for NOT resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for LCURLY resolved as shift.
  ! shift/reduce conflict for STRING resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for LBRACKET resolved as shift.
    FUNCTION        shift and go to state 19
    FOR             shift and go to state 21
    WHILE           shift and go to state 6
    IF              shift and go to state 28
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 23
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    SWITCH          shift and go to state 14
    CASE            shift and go to state 10
    OTHERWISE       shift and go to state 9
    GLOBAL          shift and go to state 2
    PERSISTENT      shift and go to state 31
    TRY             shift and go to state 24
    CATCH           shift and go to state 16
    END             shift and go to state 20
    NAME            shift and go to state 30
    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4
    SEMICOLON       reduce using rule 54 (empty -> .)
    COMMA           reduce using rule 54 (empty -> .)
    $end            reduce using rule 54 (empty -> .)

  ! FUNCTION        [ reduce using rule 54 (empty -> .) ]
  ! FOR             [ reduce using rule 54 (empty -> .) ]
  ! WHILE           [ reduce using rule 54 (empty -> .) ]
  ! IF              [ reduce using rule 54 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 54 (empty -> .) ]
  ! ELSE            [ reduce using rule 54 (empty -> .) ]
  ! BREAK           [ reduce using rule 54 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 54 (empty -> .) ]
  ! RETURN          [ reduce using rule 54 (empty -> .) ]
  ! SWITCH          [ reduce using rule 54 (empty -> .) ]
  ! CASE            [ reduce using rule 54 (empty -> .) ]
  ! OTHERWISE       [ reduce using rule 54 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 54 (empty -> .) ]
  ! PERSISTENT      [ reduce using rule 54 (empty -> .) ]
  ! TRY             [ reduce using rule 54 (empty -> .) ]
  ! CATCH           [ reduce using rule 54 (empty -> .) ]
  ! END             [ reduce using rule 54 (empty -> .) ]
  ! NAME            [ reduce using rule 54 (empty -> .) ]
  ! LAMBDA          [ reduce using rule 54 (empty -> .) ]
  ! NOT             [ reduce using rule 54 (empty -> .) ]
  ! -               [ reduce using rule 54 (empty -> .) ]
  ! +               [ reduce using rule 54 (empty -> .) ]
  ! LPAREN          [ reduce using rule 54 (empty -> .) ]
  ! LCURLY          [ reduce using rule 54 (empty -> .) ]
  ! STRING          [ reduce using rule 54 (empty -> .) ]
  ! :               [ reduce using rule 54 (empty -> .) ]
  ! NUMBER          [ reduce using rule 54 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 54 (empty -> .) ]

    slice                          shift and go to state 11
    name_attr                      shift and go to state 7
    name_sub                       shift and go to state 22
    empty                          shift and go to state 18
    statement                      shift and go to state 120
    expression                     shift and go to state 35
    exprmcat                       shift and go to state 27

state 63

    (5) statement_list -> statement_list COMMA . statement
    (7) statement -> . statement SEMICOLON
    (8) statement -> . statement COMMA
    (9) statement -> . expression
    (10) statement -> . FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN
    (11) statement -> . FUNCTION LBRACKET name_list RBRACKET = NAME
    (12) statement -> . FUNCTION NAME = NAME LPAREN name_list RPAREN
    (13) statement -> . FUNCTION NAME = NAME
    (14) statement -> . FUNCTION NAME LPAREN name_list RPAREN
    (15) statement -> . FUNCTION NAME
    (20) statement -> . FOR NAME = expression
    (21) statement -> . WHILE expression
    (22) statement -> . IF expression
    (23) statement -> . ELSEIF expression
    (24) statement -> . ELSE
    (25) statement -> . BREAK
    (26) statement -> . CONTINUE
    (27) statement -> . RETURN
    (28) statement -> . SWITCH expression
    (29) statement -> . CASE expression
    (30) statement -> . OTHERWISE
    (31) statement -> . GLOBAL list_spaces
    (32) statement -> . PERSISTENT list_spaces
    (35) statement -> . TRY
    (36) statement -> . CATCH
    (37) statement -> . END
    (38) statement -> . name_sub = expression
    (39) statement -> . name_attr = expression
    (40) statement -> . exprmcat = expression
    (41) statement -> . NAME = expression
    (42) statement -> . NAME NAME
    (43) statement -> . NAME NUMBER
    (52) statement -> . empty
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (54) empty -> .
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

  ! shift/reduce conflict for FUNCTION resolved as shift.
  ! shift/reduce conflict for FOR resolved as shift.
  ! shift/reduce conflict for WHILE resolved as shift.
  ! shift/reduce conflict for IF resolved as shift.
  ! shift/reduce conflict for ELSEIF resolved as shift.
  ! shift/reduce conflict for ELSE resolved as shift.
  ! shift/reduce conflict for BREAK resolved as shift.
  ! shift/reduce conflict for CONTINUE resolved as shift.
  ! shift/reduce conflict for RETURN resolved as shift.
  ! shift/reduce conflict for SWITCH resolved as shift.
  ! shift/reduce conflict for CASE resolved as shift.
  ! shift/reduce conflict for OTHERWISE resolved as shift.
  ! shift/reduce conflict for GLOBAL resolved as shift.
  ! shift/reduce conflict for PERSISTENT resolved as shift.
  ! shift/reduce conflict for TRY resolved as shift.
  ! shift/reduce conflict for CATCH resolved as shift.
  ! shift/reduce conflict for END resolved as shift.
  ! shift/reduce conflict for NAME resolved as shift.
  ! shift/reduce conflict for LAMBDA resolved as shift.
  ! shift/reduce conflict for NOT resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for LCURLY resolved as shift.
  ! shift/reduce conflict for STRING resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for LBRACKET resolved as shift.
    FUNCTION        shift and go to state 19
    FOR             shift and go to state 21
    WHILE           shift and go to state 6
    IF              shift and go to state 28
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 23
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    RETURN          shift and go to state 1
    SWITCH          shift and go to state 14
    CASE            shift and go to state 10
    OTHERWISE       shift and go to state 9
    GLOBAL          shift and go to state 2
    PERSISTENT      shift and go to state 31
    TRY             shift and go to state 24
    CATCH           shift and go to state 16
    END             shift and go to state 20
    NAME            shift and go to state 30
    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4
    SEMICOLON       reduce using rule 54 (empty -> .)
    COMMA           reduce using rule 54 (empty -> .)
    $end            reduce using rule 54 (empty -> .)

  ! FUNCTION        [ reduce using rule 54 (empty -> .) ]
  ! FOR             [ reduce using rule 54 (empty -> .) ]
  ! WHILE           [ reduce using rule 54 (empty -> .) ]
  ! IF              [ reduce using rule 54 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 54 (empty -> .) ]
  ! ELSE            [ reduce using rule 54 (empty -> .) ]
  ! BREAK           [ reduce using rule 54 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 54 (empty -> .) ]
  ! RETURN          [ reduce using rule 54 (empty -> .) ]
  ! SWITCH          [ reduce using rule 54 (empty -> .) ]
  ! CASE            [ reduce using rule 54 (empty -> .) ]
  ! OTHERWISE       [ reduce using rule 54 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 54 (empty -> .) ]
  ! PERSISTENT      [ reduce using rule 54 (empty -> .) ]
  ! TRY             [ reduce using rule 54 (empty -> .) ]
  ! CATCH           [ reduce using rule 54 (empty -> .) ]
  ! END             [ reduce using rule 54 (empty -> .) ]
  ! NAME            [ reduce using rule 54 (empty -> .) ]
  ! LAMBDA          [ reduce using rule 54 (empty -> .) ]
  ! NOT             [ reduce using rule 54 (empty -> .) ]
  ! -               [ reduce using rule 54 (empty -> .) ]
  ! +               [ reduce using rule 54 (empty -> .) ]
  ! LPAREN          [ reduce using rule 54 (empty -> .) ]
  ! LCURLY          [ reduce using rule 54 (empty -> .) ]
  ! STRING          [ reduce using rule 54 (empty -> .) ]
  ! :               [ reduce using rule 54 (empty -> .) ]
  ! NUMBER          [ reduce using rule 54 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 54 (empty -> .) ]

    slice                          shift and go to state 11
    name_attr                      shift and go to state 7
    name_sub                       shift and go to state 22
    empty                          shift and go to state 18
    statement                      shift and go to state 121
    expression                     shift and go to state 35
    exprmcat                       shift and go to state 27

state 64

    (6) statement_list -> statement_list statement .
    (7) statement -> statement . SEMICOLON
    (8) statement -> statement . COMMA

  ! shift/reduce conflict for SEMICOLON resolved as shift.
  ! shift/reduce conflict for COMMA resolved as shift.
    FUNCTION        reduce using rule 6 (statement_list -> statement_list statement .)
    FOR             reduce using rule 6 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 6 (statement_list -> statement_list statement .)
    IF              reduce using rule 6 (statement_list -> statement_list statement .)
    ELSEIF          reduce using rule 6 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 6 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 6 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 6 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 6 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 6 (statement_list -> statement_list statement .)
    CASE            reduce using rule 6 (statement_list -> statement_list statement .)
    OTHERWISE       reduce using rule 6 (statement_list -> statement_list statement .)
    GLOBAL          reduce using rule 6 (statement_list -> statement_list statement .)
    PERSISTENT      reduce using rule 6 (statement_list -> statement_list statement .)
    TRY             reduce using rule 6 (statement_list -> statement_list statement .)
    CATCH           reduce using rule 6 (statement_list -> statement_list statement .)
    END             reduce using rule 6 (statement_list -> statement_list statement .)
    NAME            reduce using rule 6 (statement_list -> statement_list statement .)
    LAMBDA          reduce using rule 6 (statement_list -> statement_list statement .)
    NOT             reduce using rule 6 (statement_list -> statement_list statement .)
    -               reduce using rule 6 (statement_list -> statement_list statement .)
    +               reduce using rule 6 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 6 (statement_list -> statement_list statement .)
    LCURLY          reduce using rule 6 (statement_list -> statement_list statement .)
    STRING          reduce using rule 6 (statement_list -> statement_list statement .)
    :               reduce using rule 6 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 6 (statement_list -> statement_list statement .)
    LBRACKET        reduce using rule 6 (statement_list -> statement_list statement .)
    $end            reduce using rule 6 (statement_list -> statement_list statement .)
    SEMICOLON       shift and go to state 123
    COMMA           shift and go to state 122

  ! SEMICOLON       [ reduce using rule 6 (statement_list -> statement_list statement .) ]
  ! COMMA           [ reduce using rule 6 (statement_list -> statement_list statement .) ]


state 65

    (80) expression -> LPAREN exprlist . RPAREN
    (44) exprlist -> exprlist . COMMA expression

    RPAREN          shift and go to state 125
    COMMA           shift and go to state 124



state 66

    (45) exprlist -> expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    RPAREN          reduce using rule 45 (exprlist -> expression .)
    COMMA           reduce using rule 45 (exprlist -> expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88



state 67

    (40) statement -> exprmcat = . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 126
    exprmcat                       shift and go to state 42

state 68

    (22) statement -> IF expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    COMMA           reduce using rule 22 (statement -> IF expression .)
    SEMICOLON       reduce using rule 22 (statement -> IF expression .)
    FUNCTION        reduce using rule 22 (statement -> IF expression .)
    FOR             reduce using rule 22 (statement -> IF expression .)
    WHILE           reduce using rule 22 (statement -> IF expression .)
    IF              reduce using rule 22 (statement -> IF expression .)
    ELSEIF          reduce using rule 22 (statement -> IF expression .)
    ELSE            reduce using rule 22 (statement -> IF expression .)
    BREAK           reduce using rule 22 (statement -> IF expression .)
    CONTINUE        reduce using rule 22 (statement -> IF expression .)
    RETURN          reduce using rule 22 (statement -> IF expression .)
    SWITCH          reduce using rule 22 (statement -> IF expression .)
    CASE            reduce using rule 22 (statement -> IF expression .)
    OTHERWISE       reduce using rule 22 (statement -> IF expression .)
    GLOBAL          reduce using rule 22 (statement -> IF expression .)
    PERSISTENT      reduce using rule 22 (statement -> IF expression .)
    TRY             reduce using rule 22 (statement -> IF expression .)
    CATCH           reduce using rule 22 (statement -> IF expression .)
    END             reduce using rule 22 (statement -> IF expression .)
    NAME            reduce using rule 22 (statement -> IF expression .)
    LAMBDA          reduce using rule 22 (statement -> IF expression .)
    NOT             reduce using rule 22 (statement -> IF expression .)
    LPAREN          reduce using rule 22 (statement -> IF expression .)
    LCURLY          reduce using rule 22 (statement -> IF expression .)
    STRING          reduce using rule 22 (statement -> IF expression .)
    NUMBER          reduce using rule 22 (statement -> IF expression .)
    LBRACKET        reduce using rule 22 (statement -> IF expression .)
    $end            reduce using rule 22 (statement -> IF expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 22 (statement -> IF expression .) ]
  ! +               [ reduce using rule 22 (statement -> IF expression .) ]
  ! :               [ reduce using rule 22 (statement -> IF expression .) ]


state 69

    (42) statement -> NAME NAME .

    COMMA           reduce using rule 42 (statement -> NAME NAME .)
    SEMICOLON       reduce using rule 42 (statement -> NAME NAME .)
    FUNCTION        reduce using rule 42 (statement -> NAME NAME .)
    FOR             reduce using rule 42 (statement -> NAME NAME .)
    WHILE           reduce using rule 42 (statement -> NAME NAME .)
    IF              reduce using rule 42 (statement -> NAME NAME .)
    ELSEIF          reduce using rule 42 (statement -> NAME NAME .)
    ELSE            reduce using rule 42 (statement -> NAME NAME .)
    BREAK           reduce using rule 42 (statement -> NAME NAME .)
    CONTINUE        reduce using rule 42 (statement -> NAME NAME .)
    RETURN          reduce using rule 42 (statement -> NAME NAME .)
    SWITCH          reduce using rule 42 (statement -> NAME NAME .)
    CASE            reduce using rule 42 (statement -> NAME NAME .)
    OTHERWISE       reduce using rule 42 (statement -> NAME NAME .)
    GLOBAL          reduce using rule 42 (statement -> NAME NAME .)
    PERSISTENT      reduce using rule 42 (statement -> NAME NAME .)
    TRY             reduce using rule 42 (statement -> NAME NAME .)
    CATCH           reduce using rule 42 (statement -> NAME NAME .)
    END             reduce using rule 42 (statement -> NAME NAME .)
    NAME            reduce using rule 42 (statement -> NAME NAME .)
    LAMBDA          reduce using rule 42 (statement -> NAME NAME .)
    NOT             reduce using rule 42 (statement -> NAME NAME .)
    -               reduce using rule 42 (statement -> NAME NAME .)
    +               reduce using rule 42 (statement -> NAME NAME .)
    LPAREN          reduce using rule 42 (statement -> NAME NAME .)
    LCURLY          reduce using rule 42 (statement -> NAME NAME .)
    STRING          reduce using rule 42 (statement -> NAME NAME .)
    :               reduce using rule 42 (statement -> NAME NAME .)
    NUMBER          reduce using rule 42 (statement -> NAME NAME .)
    LBRACKET        reduce using rule 42 (statement -> NAME NAME .)
    $end            reduce using rule 42 (statement -> NAME NAME .)



state 70

    (41) statement -> NAME = . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 127
    exprmcat                       shift and go to state 42

state 71

    (43) statement -> NAME NUMBER .

    COMMA           reduce using rule 43 (statement -> NAME NUMBER .)
    SEMICOLON       reduce using rule 43 (statement -> NAME NUMBER .)
    FUNCTION        reduce using rule 43 (statement -> NAME NUMBER .)
    FOR             reduce using rule 43 (statement -> NAME NUMBER .)
    WHILE           reduce using rule 43 (statement -> NAME NUMBER .)
    IF              reduce using rule 43 (statement -> NAME NUMBER .)
    ELSEIF          reduce using rule 43 (statement -> NAME NUMBER .)
    ELSE            reduce using rule 43 (statement -> NAME NUMBER .)
    BREAK           reduce using rule 43 (statement -> NAME NUMBER .)
    CONTINUE        reduce using rule 43 (statement -> NAME NUMBER .)
    RETURN          reduce using rule 43 (statement -> NAME NUMBER .)
    SWITCH          reduce using rule 43 (statement -> NAME NUMBER .)
    CASE            reduce using rule 43 (statement -> NAME NUMBER .)
    OTHERWISE       reduce using rule 43 (statement -> NAME NUMBER .)
    GLOBAL          reduce using rule 43 (statement -> NAME NUMBER .)
    PERSISTENT      reduce using rule 43 (statement -> NAME NUMBER .)
    TRY             reduce using rule 43 (statement -> NAME NUMBER .)
    CATCH           reduce using rule 43 (statement -> NAME NUMBER .)
    END             reduce using rule 43 (statement -> NAME NUMBER .)
    NAME            reduce using rule 43 (statement -> NAME NUMBER .)
    LAMBDA          reduce using rule 43 (statement -> NAME NUMBER .)
    NOT             reduce using rule 43 (statement -> NAME NUMBER .)
    -               reduce using rule 43 (statement -> NAME NUMBER .)
    +               reduce using rule 43 (statement -> NAME NUMBER .)
    LPAREN          reduce using rule 43 (statement -> NAME NUMBER .)
    LCURLY          reduce using rule 43 (statement -> NAME NUMBER .)
    STRING          reduce using rule 43 (statement -> NAME NUMBER .)
    :               reduce using rule 43 (statement -> NAME NUMBER .)
    NUMBER          reduce using rule 43 (statement -> NAME NUMBER .)
    LBRACKET        reduce using rule 43 (statement -> NAME NUMBER .)
    $end            reduce using rule 43 (statement -> NAME NUMBER .)



state 72

    (98) name_sub -> NAME LCURLY . exprinlist RCURLY
    (46) exprinlist -> . exprinlist COMMA expression
    (47) exprinlist -> . exprinlist SEMICOLON expression
    (48) exprinlist -> . exprinlist NEWLINE expression
    (49) exprinlist -> . exprinlist expression
    (50) exprinlist -> . exprinlist SEMICOLON
    (51) exprinlist -> . exprinlist COMMA
    (53) exprinlist -> . empty
    (55) exprinlist -> . expression
    (54) empty -> .
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

  ! shift/reduce conflict for LAMBDA resolved as shift.
  ! shift/reduce conflict for NOT resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for NAME resolved as shift.
  ! shift/reduce conflict for LCURLY resolved as shift.
  ! shift/reduce conflict for STRING resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for LBRACKET resolved as shift.
    RCURLY          reduce using rule 54 (empty -> .)
    COMMA           reduce using rule 54 (empty -> .)
    SEMICOLON       reduce using rule 54 (empty -> .)
    NEWLINE         reduce using rule 54 (empty -> .)
    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4

  ! LAMBDA          [ reduce using rule 54 (empty -> .) ]
  ! NOT             [ reduce using rule 54 (empty -> .) ]
  ! -               [ reduce using rule 54 (empty -> .) ]
  ! +               [ reduce using rule 54 (empty -> .) ]
  ! LPAREN          [ reduce using rule 54 (empty -> .) ]
  ! NAME            [ reduce using rule 54 (empty -> .) ]
  ! LCURLY          [ reduce using rule 54 (empty -> .) ]
  ! STRING          [ reduce using rule 54 (empty -> .) ]
  ! :               [ reduce using rule 54 (empty -> .) ]
  ! NUMBER          [ reduce using rule 54 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 54 (empty -> .) ]

    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    exprinlist                     shift and go to state 128
    name_sub                       shift and go to state 41
    empty                          shift and go to state 39
    expression                     shift and go to state 45
    exprmcat                       shift and go to state 42

state 73

    (81) expression -> NAME LPAREN . RPAREN
    (91) name_sub -> NAME LPAREN . exprlist RPAREN
    (88) indexflat -> LPAREN . : RPAREN
    (44) exprlist -> . exprlist COMMA expression
    (45) exprlist -> . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    RPAREN          shift and go to state 129
    :               shift and go to state 131
    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 66
    exprlist                       shift and go to state 130
    exprmcat                       shift and go to state 42

state 74

    (90) expression -> NAME indexflat .

    +               reduce using rule 90 (expression -> NAME indexflat .)
    -               reduce using rule 90 (expression -> NAME indexflat .)
    *               reduce using rule 90 (expression -> NAME indexflat .)
    /               reduce using rule 90 (expression -> NAME indexflat .)
    \               reduce using rule 90 (expression -> NAME indexflat .)
    ^               reduce using rule 90 (expression -> NAME indexflat .)
    DOTTIMES        reduce using rule 90 (expression -> NAME indexflat .)
    DOTDIVIDE       reduce using rule 90 (expression -> NAME indexflat .)
    DOTRDIVIDE      reduce using rule 90 (expression -> NAME indexflat .)
    DOTPOWER        reduce using rule 90 (expression -> NAME indexflat .)
    NOTEQUAL        reduce using rule 90 (expression -> NAME indexflat .)
    ISEQUAL         reduce using rule 90 (expression -> NAME indexflat .)
    LESS            reduce using rule 90 (expression -> NAME indexflat .)
    GREATER         reduce using rule 90 (expression -> NAME indexflat .)
    LESSEQUAL       reduce using rule 90 (expression -> NAME indexflat .)
    GREATEREQUAL    reduce using rule 90 (expression -> NAME indexflat .)
    ELAND           reduce using rule 90 (expression -> NAME indexflat .)
    ELOR            reduce using rule 90 (expression -> NAME indexflat .)
    AND             reduce using rule 90 (expression -> NAME indexflat .)
    OR              reduce using rule 90 (expression -> NAME indexflat .)
    CONJTRANS       reduce using rule 90 (expression -> NAME indexflat .)
    TRANS           reduce using rule 90 (expression -> NAME indexflat .)
    :               reduce using rule 90 (expression -> NAME indexflat .)
    RBRACKET        reduce using rule 90 (expression -> NAME indexflat .)
    COMMA           reduce using rule 90 (expression -> NAME indexflat .)
    SEMICOLON       reduce using rule 90 (expression -> NAME indexflat .)
    NEWLINE         reduce using rule 90 (expression -> NAME indexflat .)
    LAMBDA          reduce using rule 90 (expression -> NAME indexflat .)
    NOT             reduce using rule 90 (expression -> NAME indexflat .)
    LPAREN          reduce using rule 90 (expression -> NAME indexflat .)
    NAME            reduce using rule 90 (expression -> NAME indexflat .)
    LCURLY          reduce using rule 90 (expression -> NAME indexflat .)
    STRING          reduce using rule 90 (expression -> NAME indexflat .)
    NUMBER          reduce using rule 90 (expression -> NAME indexflat .)
    LBRACKET        reduce using rule 90 (expression -> NAME indexflat .)
    RCURLY          reduce using rule 90 (expression -> NAME indexflat .)
    FUNCTION        reduce using rule 90 (expression -> NAME indexflat .)
    FOR             reduce using rule 90 (expression -> NAME indexflat .)
    WHILE           reduce using rule 90 (expression -> NAME indexflat .)
    IF              reduce using rule 90 (expression -> NAME indexflat .)
    ELSEIF          reduce using rule 90 (expression -> NAME indexflat .)
    ELSE            reduce using rule 90 (expression -> NAME indexflat .)
    BREAK           reduce using rule 90 (expression -> NAME indexflat .)
    CONTINUE        reduce using rule 90 (expression -> NAME indexflat .)
    RETURN          reduce using rule 90 (expression -> NAME indexflat .)
    SWITCH          reduce using rule 90 (expression -> NAME indexflat .)
    CASE            reduce using rule 90 (expression -> NAME indexflat .)
    OTHERWISE       reduce using rule 90 (expression -> NAME indexflat .)
    GLOBAL          reduce using rule 90 (expression -> NAME indexflat .)
    PERSISTENT      reduce using rule 90 (expression -> NAME indexflat .)
    TRY             reduce using rule 90 (expression -> NAME indexflat .)
    CATCH           reduce using rule 90 (expression -> NAME indexflat .)
    END             reduce using rule 90 (expression -> NAME indexflat .)
    $end            reduce using rule 90 (expression -> NAME indexflat .)
    RPAREN          reduce using rule 90 (expression -> NAME indexflat .)



state 75

    (32) statement -> PERSISTENT list_spaces .
    (33) list_spaces -> list_spaces . NAME

  ! shift/reduce conflict for NAME resolved as shift.
    COMMA           reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    SEMICOLON       reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    FUNCTION        reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    FOR             reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    WHILE           reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    IF              reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    ELSEIF          reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    ELSE            reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    BREAK           reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    CONTINUE        reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    RETURN          reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    SWITCH          reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    CASE            reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    OTHERWISE       reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    GLOBAL          reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    PERSISTENT      reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    TRY             reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    CATCH           reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    END             reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    LAMBDA          reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    NOT             reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    -               reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    +               reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    LPAREN          reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    LCURLY          reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    STRING          reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    :               reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    NUMBER          reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    LBRACKET        reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    $end            reduce using rule 32 (statement -> PERSISTENT list_spaces .)
    NAME            shift and go to state 102

  ! NAME            [ reduce using rule 32 (statement -> PERSISTENT list_spaces .) ]


state 76

    (23) statement -> ELSEIF expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    COMMA           reduce using rule 23 (statement -> ELSEIF expression .)
    SEMICOLON       reduce using rule 23 (statement -> ELSEIF expression .)
    FUNCTION        reduce using rule 23 (statement -> ELSEIF expression .)
    FOR             reduce using rule 23 (statement -> ELSEIF expression .)
    WHILE           reduce using rule 23 (statement -> ELSEIF expression .)
    IF              reduce using rule 23 (statement -> ELSEIF expression .)
    ELSEIF          reduce using rule 23 (statement -> ELSEIF expression .)
    ELSE            reduce using rule 23 (statement -> ELSEIF expression .)
    BREAK           reduce using rule 23 (statement -> ELSEIF expression .)
    CONTINUE        reduce using rule 23 (statement -> ELSEIF expression .)
    RETURN          reduce using rule 23 (statement -> ELSEIF expression .)
    SWITCH          reduce using rule 23 (statement -> ELSEIF expression .)
    CASE            reduce using rule 23 (statement -> ELSEIF expression .)
    OTHERWISE       reduce using rule 23 (statement -> ELSEIF expression .)
    GLOBAL          reduce using rule 23 (statement -> ELSEIF expression .)
    PERSISTENT      reduce using rule 23 (statement -> ELSEIF expression .)
    TRY             reduce using rule 23 (statement -> ELSEIF expression .)
    CATCH           reduce using rule 23 (statement -> ELSEIF expression .)
    END             reduce using rule 23 (statement -> ELSEIF expression .)
    NAME            reduce using rule 23 (statement -> ELSEIF expression .)
    LAMBDA          reduce using rule 23 (statement -> ELSEIF expression .)
    NOT             reduce using rule 23 (statement -> ELSEIF expression .)
    LPAREN          reduce using rule 23 (statement -> ELSEIF expression .)
    LCURLY          reduce using rule 23 (statement -> ELSEIF expression .)
    STRING          reduce using rule 23 (statement -> ELSEIF expression .)
    NUMBER          reduce using rule 23 (statement -> ELSEIF expression .)
    LBRACKET        reduce using rule 23 (statement -> ELSEIF expression .)
    $end            reduce using rule 23 (statement -> ELSEIF expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 23 (statement -> ELSEIF expression .) ]
  ! +               [ reduce using rule 23 (statement -> ELSEIF expression .) ]
  ! :               [ reduce using rule 23 (statement -> ELSEIF expression .) ]


state 77

    (66) expression -> expression NOTEQUAL . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 132
    exprmcat                       shift and go to state 42

state 78

    (72) expression -> expression ELAND . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 133
    exprmcat                       shift and go to state 42

state 79

    (73) expression -> expression ELOR . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 134
    exprmcat                       shift and go to state 42

state 80

    (68) expression -> expression LESS . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 135
    exprmcat                       shift and go to state 42

state 81

    (71) expression -> expression GREATEREQUAL . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 136
    exprmcat                       shift and go to state 42

state 82

    (64) expression -> expression DOTRDIVIDE . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 137
    exprmcat                       shift and go to state 42

state 83

    (56) expression -> expression + . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 138
    exprmcat                       shift and go to state 42

state 84

    (58) expression -> expression * . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 139
    exprmcat                       shift and go to state 42

state 85

    (57) expression -> expression - . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 140
    exprmcat                       shift and go to state 42

state 86

    (59) expression -> expression / . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 141
    exprmcat                       shift and go to state 42

state 87

    (63) expression -> expression DOTDIVIDE . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 142
    exprmcat                       shift and go to state 42

state 88

    (100) slice -> expression : . expression : expression
    (101) slice -> expression : . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 143
    exprmcat                       shift and go to state 42

state 89

    (62) expression -> expression DOTTIMES . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 144
    exprmcat                       shift and go to state 42

state 90

    (85) expression -> expression CONJTRANS .

    +               reduce using rule 85 (expression -> expression CONJTRANS .)
    -               reduce using rule 85 (expression -> expression CONJTRANS .)
    *               reduce using rule 85 (expression -> expression CONJTRANS .)
    /               reduce using rule 85 (expression -> expression CONJTRANS .)
    \               reduce using rule 85 (expression -> expression CONJTRANS .)
    ^               reduce using rule 85 (expression -> expression CONJTRANS .)
    DOTTIMES        reduce using rule 85 (expression -> expression CONJTRANS .)
    DOTDIVIDE       reduce using rule 85 (expression -> expression CONJTRANS .)
    DOTRDIVIDE      reduce using rule 85 (expression -> expression CONJTRANS .)
    DOTPOWER        reduce using rule 85 (expression -> expression CONJTRANS .)
    NOTEQUAL        reduce using rule 85 (expression -> expression CONJTRANS .)
    ISEQUAL         reduce using rule 85 (expression -> expression CONJTRANS .)
    LESS            reduce using rule 85 (expression -> expression CONJTRANS .)
    GREATER         reduce using rule 85 (expression -> expression CONJTRANS .)
    LESSEQUAL       reduce using rule 85 (expression -> expression CONJTRANS .)
    GREATEREQUAL    reduce using rule 85 (expression -> expression CONJTRANS .)
    ELAND           reduce using rule 85 (expression -> expression CONJTRANS .)
    ELOR            reduce using rule 85 (expression -> expression CONJTRANS .)
    AND             reduce using rule 85 (expression -> expression CONJTRANS .)
    OR              reduce using rule 85 (expression -> expression CONJTRANS .)
    CONJTRANS       reduce using rule 85 (expression -> expression CONJTRANS .)
    TRANS           reduce using rule 85 (expression -> expression CONJTRANS .)
    :               reduce using rule 85 (expression -> expression CONJTRANS .)
    RBRACKET        reduce using rule 85 (expression -> expression CONJTRANS .)
    COMMA           reduce using rule 85 (expression -> expression CONJTRANS .)
    SEMICOLON       reduce using rule 85 (expression -> expression CONJTRANS .)
    NEWLINE         reduce using rule 85 (expression -> expression CONJTRANS .)
    LAMBDA          reduce using rule 85 (expression -> expression CONJTRANS .)
    NOT             reduce using rule 85 (expression -> expression CONJTRANS .)
    LPAREN          reduce using rule 85 (expression -> expression CONJTRANS .)
    NAME            reduce using rule 85 (expression -> expression CONJTRANS .)
    LCURLY          reduce using rule 85 (expression -> expression CONJTRANS .)
    STRING          reduce using rule 85 (expression -> expression CONJTRANS .)
    NUMBER          reduce using rule 85 (expression -> expression CONJTRANS .)
    LBRACKET        reduce using rule 85 (expression -> expression CONJTRANS .)
    RCURLY          reduce using rule 85 (expression -> expression CONJTRANS .)
    FUNCTION        reduce using rule 85 (expression -> expression CONJTRANS .)
    FOR             reduce using rule 85 (expression -> expression CONJTRANS .)
    WHILE           reduce using rule 85 (expression -> expression CONJTRANS .)
    IF              reduce using rule 85 (expression -> expression CONJTRANS .)
    ELSEIF          reduce using rule 85 (expression -> expression CONJTRANS .)
    ELSE            reduce using rule 85 (expression -> expression CONJTRANS .)
    BREAK           reduce using rule 85 (expression -> expression CONJTRANS .)
    CONTINUE        reduce using rule 85 (expression -> expression CONJTRANS .)
    RETURN          reduce using rule 85 (expression -> expression CONJTRANS .)
    SWITCH          reduce using rule 85 (expression -> expression CONJTRANS .)
    CASE            reduce using rule 85 (expression -> expression CONJTRANS .)
    OTHERWISE       reduce using rule 85 (expression -> expression CONJTRANS .)
    GLOBAL          reduce using rule 85 (expression -> expression CONJTRANS .)
    PERSISTENT      reduce using rule 85 (expression -> expression CONJTRANS .)
    TRY             reduce using rule 85 (expression -> expression CONJTRANS .)
    CATCH           reduce using rule 85 (expression -> expression CONJTRANS .)
    END             reduce using rule 85 (expression -> expression CONJTRANS .)
    $end            reduce using rule 85 (expression -> expression CONJTRANS .)
    RPAREN          reduce using rule 85 (expression -> expression CONJTRANS .)



state 91

    (70) expression -> expression LESSEQUAL . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 145
    exprmcat                       shift and go to state 42

state 92

    (86) expression -> expression TRANS .

    +               reduce using rule 86 (expression -> expression TRANS .)
    -               reduce using rule 86 (expression -> expression TRANS .)
    *               reduce using rule 86 (expression -> expression TRANS .)
    /               reduce using rule 86 (expression -> expression TRANS .)
    \               reduce using rule 86 (expression -> expression TRANS .)
    ^               reduce using rule 86 (expression -> expression TRANS .)
    DOTTIMES        reduce using rule 86 (expression -> expression TRANS .)
    DOTDIVIDE       reduce using rule 86 (expression -> expression TRANS .)
    DOTRDIVIDE      reduce using rule 86 (expression -> expression TRANS .)
    DOTPOWER        reduce using rule 86 (expression -> expression TRANS .)
    NOTEQUAL        reduce using rule 86 (expression -> expression TRANS .)
    ISEQUAL         reduce using rule 86 (expression -> expression TRANS .)
    LESS            reduce using rule 86 (expression -> expression TRANS .)
    GREATER         reduce using rule 86 (expression -> expression TRANS .)
    LESSEQUAL       reduce using rule 86 (expression -> expression TRANS .)
    GREATEREQUAL    reduce using rule 86 (expression -> expression TRANS .)
    ELAND           reduce using rule 86 (expression -> expression TRANS .)
    ELOR            reduce using rule 86 (expression -> expression TRANS .)
    AND             reduce using rule 86 (expression -> expression TRANS .)
    OR              reduce using rule 86 (expression -> expression TRANS .)
    CONJTRANS       reduce using rule 86 (expression -> expression TRANS .)
    TRANS           reduce using rule 86 (expression -> expression TRANS .)
    :               reduce using rule 86 (expression -> expression TRANS .)
    RBRACKET        reduce using rule 86 (expression -> expression TRANS .)
    COMMA           reduce using rule 86 (expression -> expression TRANS .)
    SEMICOLON       reduce using rule 86 (expression -> expression TRANS .)
    NEWLINE         reduce using rule 86 (expression -> expression TRANS .)
    LAMBDA          reduce using rule 86 (expression -> expression TRANS .)
    NOT             reduce using rule 86 (expression -> expression TRANS .)
    LPAREN          reduce using rule 86 (expression -> expression TRANS .)
    NAME            reduce using rule 86 (expression -> expression TRANS .)
    LCURLY          reduce using rule 86 (expression -> expression TRANS .)
    STRING          reduce using rule 86 (expression -> expression TRANS .)
    NUMBER          reduce using rule 86 (expression -> expression TRANS .)
    LBRACKET        reduce using rule 86 (expression -> expression TRANS .)
    RCURLY          reduce using rule 86 (expression -> expression TRANS .)
    FUNCTION        reduce using rule 86 (expression -> expression TRANS .)
    FOR             reduce using rule 86 (expression -> expression TRANS .)
    WHILE           reduce using rule 86 (expression -> expression TRANS .)
    IF              reduce using rule 86 (expression -> expression TRANS .)
    ELSEIF          reduce using rule 86 (expression -> expression TRANS .)
    ELSE            reduce using rule 86 (expression -> expression TRANS .)
    BREAK           reduce using rule 86 (expression -> expression TRANS .)
    CONTINUE        reduce using rule 86 (expression -> expression TRANS .)
    RETURN          reduce using rule 86 (expression -> expression TRANS .)
    SWITCH          reduce using rule 86 (expression -> expression TRANS .)
    CASE            reduce using rule 86 (expression -> expression TRANS .)
    OTHERWISE       reduce using rule 86 (expression -> expression TRANS .)
    GLOBAL          reduce using rule 86 (expression -> expression TRANS .)
    PERSISTENT      reduce using rule 86 (expression -> expression TRANS .)
    TRY             reduce using rule 86 (expression -> expression TRANS .)
    CATCH           reduce using rule 86 (expression -> expression TRANS .)
    END             reduce using rule 86 (expression -> expression TRANS .)
    $end            reduce using rule 86 (expression -> expression TRANS .)
    RPAREN          reduce using rule 86 (expression -> expression TRANS .)



state 93

    (60) expression -> expression \ . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 146
    exprmcat                       shift and go to state 42

state 94

    (61) expression -> expression ^ . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 147
    exprmcat                       shift and go to state 42

state 95

    (74) expression -> expression AND . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 148
    exprmcat                       shift and go to state 42

state 96

    (69) expression -> expression GREATER . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 149
    exprmcat                       shift and go to state 42

state 97

    (65) expression -> expression DOTPOWER . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 150
    exprmcat                       shift and go to state 42

state 98

    (67) expression -> expression ISEQUAL . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 151
    exprmcat                       shift and go to state 42

state 99

    (75) expression -> expression OR . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 152
    exprmcat                       shift and go to state 42

state 100

    (16) expression -> LAMBDA NAME .

    +               reduce using rule 16 (expression -> LAMBDA NAME .)
    -               reduce using rule 16 (expression -> LAMBDA NAME .)
    *               reduce using rule 16 (expression -> LAMBDA NAME .)
    /               reduce using rule 16 (expression -> LAMBDA NAME .)
    \               reduce using rule 16 (expression -> LAMBDA NAME .)
    ^               reduce using rule 16 (expression -> LAMBDA NAME .)
    DOTTIMES        reduce using rule 16 (expression -> LAMBDA NAME .)
    DOTDIVIDE       reduce using rule 16 (expression -> LAMBDA NAME .)
    DOTRDIVIDE      reduce using rule 16 (expression -> LAMBDA NAME .)
    DOTPOWER        reduce using rule 16 (expression -> LAMBDA NAME .)
    NOTEQUAL        reduce using rule 16 (expression -> LAMBDA NAME .)
    ISEQUAL         reduce using rule 16 (expression -> LAMBDA NAME .)
    LESS            reduce using rule 16 (expression -> LAMBDA NAME .)
    GREATER         reduce using rule 16 (expression -> LAMBDA NAME .)
    LESSEQUAL       reduce using rule 16 (expression -> LAMBDA NAME .)
    GREATEREQUAL    reduce using rule 16 (expression -> LAMBDA NAME .)
    ELAND           reduce using rule 16 (expression -> LAMBDA NAME .)
    ELOR            reduce using rule 16 (expression -> LAMBDA NAME .)
    AND             reduce using rule 16 (expression -> LAMBDA NAME .)
    OR              reduce using rule 16 (expression -> LAMBDA NAME .)
    CONJTRANS       reduce using rule 16 (expression -> LAMBDA NAME .)
    TRANS           reduce using rule 16 (expression -> LAMBDA NAME .)
    :               reduce using rule 16 (expression -> LAMBDA NAME .)
    RBRACKET        reduce using rule 16 (expression -> LAMBDA NAME .)
    COMMA           reduce using rule 16 (expression -> LAMBDA NAME .)
    SEMICOLON       reduce using rule 16 (expression -> LAMBDA NAME .)
    NEWLINE         reduce using rule 16 (expression -> LAMBDA NAME .)
    LAMBDA          reduce using rule 16 (expression -> LAMBDA NAME .)
    NOT             reduce using rule 16 (expression -> LAMBDA NAME .)
    LPAREN          reduce using rule 16 (expression -> LAMBDA NAME .)
    NAME            reduce using rule 16 (expression -> LAMBDA NAME .)
    LCURLY          reduce using rule 16 (expression -> LAMBDA NAME .)
    STRING          reduce using rule 16 (expression -> LAMBDA NAME .)
    NUMBER          reduce using rule 16 (expression -> LAMBDA NAME .)
    LBRACKET        reduce using rule 16 (expression -> LAMBDA NAME .)
    RCURLY          reduce using rule 16 (expression -> LAMBDA NAME .)
    FUNCTION        reduce using rule 16 (expression -> LAMBDA NAME .)
    FOR             reduce using rule 16 (expression -> LAMBDA NAME .)
    WHILE           reduce using rule 16 (expression -> LAMBDA NAME .)
    IF              reduce using rule 16 (expression -> LAMBDA NAME .)
    ELSEIF          reduce using rule 16 (expression -> LAMBDA NAME .)
    ELSE            reduce using rule 16 (expression -> LAMBDA NAME .)
    BREAK           reduce using rule 16 (expression -> LAMBDA NAME .)
    CONTINUE        reduce using rule 16 (expression -> LAMBDA NAME .)
    RETURN          reduce using rule 16 (expression -> LAMBDA NAME .)
    SWITCH          reduce using rule 16 (expression -> LAMBDA NAME .)
    CASE            reduce using rule 16 (expression -> LAMBDA NAME .)
    OTHERWISE       reduce using rule 16 (expression -> LAMBDA NAME .)
    GLOBAL          reduce using rule 16 (expression -> LAMBDA NAME .)
    PERSISTENT      reduce using rule 16 (expression -> LAMBDA NAME .)
    TRY             reduce using rule 16 (expression -> LAMBDA NAME .)
    CATCH           reduce using rule 16 (expression -> LAMBDA NAME .)
    END             reduce using rule 16 (expression -> LAMBDA NAME .)
    $end            reduce using rule 16 (expression -> LAMBDA NAME .)
    RPAREN          reduce using rule 16 (expression -> LAMBDA NAME .)



state 101

    (19) expression -> LAMBDA LPAREN . name_list RPAREN expression
    (17) name_list -> . name_list COMMA NAME
    (18) name_list -> . NAME

    NAME            shift and go to state 114


    name_list                      shift and go to state 153

state 102

    (33) list_spaces -> list_spaces NAME .

    NAME            reduce using rule 33 (list_spaces -> list_spaces NAME .)
    COMMA           reduce using rule 33 (list_spaces -> list_spaces NAME .)
    SEMICOLON       reduce using rule 33 (list_spaces -> list_spaces NAME .)
    FUNCTION        reduce using rule 33 (list_spaces -> list_spaces NAME .)
    FOR             reduce using rule 33 (list_spaces -> list_spaces NAME .)
    WHILE           reduce using rule 33 (list_spaces -> list_spaces NAME .)
    IF              reduce using rule 33 (list_spaces -> list_spaces NAME .)
    ELSEIF          reduce using rule 33 (list_spaces -> list_spaces NAME .)
    ELSE            reduce using rule 33 (list_spaces -> list_spaces NAME .)
    BREAK           reduce using rule 33 (list_spaces -> list_spaces NAME .)
    CONTINUE        reduce using rule 33 (list_spaces -> list_spaces NAME .)
    RETURN          reduce using rule 33 (list_spaces -> list_spaces NAME .)
    SWITCH          reduce using rule 33 (list_spaces -> list_spaces NAME .)
    CASE            reduce using rule 33 (list_spaces -> list_spaces NAME .)
    OTHERWISE       reduce using rule 33 (list_spaces -> list_spaces NAME .)
    GLOBAL          reduce using rule 33 (list_spaces -> list_spaces NAME .)
    PERSISTENT      reduce using rule 33 (list_spaces -> list_spaces NAME .)
    TRY             reduce using rule 33 (list_spaces -> list_spaces NAME .)
    CATCH           reduce using rule 33 (list_spaces -> list_spaces NAME .)
    END             reduce using rule 33 (list_spaces -> list_spaces NAME .)
    LAMBDA          reduce using rule 33 (list_spaces -> list_spaces NAME .)
    NOT             reduce using rule 33 (list_spaces -> list_spaces NAME .)
    -               reduce using rule 33 (list_spaces -> list_spaces NAME .)
    +               reduce using rule 33 (list_spaces -> list_spaces NAME .)
    LPAREN          reduce using rule 33 (list_spaces -> list_spaces NAME .)
    LCURLY          reduce using rule 33 (list_spaces -> list_spaces NAME .)
    STRING          reduce using rule 33 (list_spaces -> list_spaces NAME .)
    :               reduce using rule 33 (list_spaces -> list_spaces NAME .)
    NUMBER          reduce using rule 33 (list_spaces -> list_spaces NAME .)
    LBRACKET        reduce using rule 33 (list_spaces -> list_spaces NAME .)
    $end            reduce using rule 33 (list_spaces -> list_spaces NAME .)



state 103

    (48) exprinlist -> exprinlist NEWLINE . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 154
    exprmcat                       shift and go to state 42

state 104

    (47) exprinlist -> exprinlist SEMICOLON . expression
    (50) exprinlist -> exprinlist SEMICOLON .
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

  ! shift/reduce conflict for LAMBDA resolved as shift.
  ! shift/reduce conflict for NOT resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for NAME resolved as shift.
  ! shift/reduce conflict for LCURLY resolved as shift.
  ! shift/reduce conflict for STRING resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for LBRACKET resolved as shift.
    RCURLY          reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .)
    COMMA           reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .)
    SEMICOLON       reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .)
    NEWLINE         reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .)
    RBRACKET        reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .)
    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4

  ! LAMBDA          [ reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .) ]
  ! NOT             [ reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .) ]
  ! -               [ reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .) ]
  ! +               [ reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .) ]
  ! NAME            [ reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .) ]
  ! LCURLY          [ reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .) ]
  ! STRING          [ reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .) ]
  ! :               [ reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .) ]
  ! LBRACKET        [ reduce using rule 50 (exprinlist -> exprinlist SEMICOLON .) ]

    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 155
    exprmcat                       shift and go to state 42

state 105

    (46) exprinlist -> exprinlist COMMA . expression
    (51) exprinlist -> exprinlist COMMA .
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

  ! shift/reduce conflict for LAMBDA resolved as shift.
  ! shift/reduce conflict for NOT resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for NAME resolved as shift.
  ! shift/reduce conflict for LCURLY resolved as shift.
  ! shift/reduce conflict for STRING resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for LBRACKET resolved as shift.
    RCURLY          reduce using rule 51 (exprinlist -> exprinlist COMMA .)
    COMMA           reduce using rule 51 (exprinlist -> exprinlist COMMA .)
    SEMICOLON       reduce using rule 51 (exprinlist -> exprinlist COMMA .)
    NEWLINE         reduce using rule 51 (exprinlist -> exprinlist COMMA .)
    RBRACKET        reduce using rule 51 (exprinlist -> exprinlist COMMA .)
    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4

  ! LAMBDA          [ reduce using rule 51 (exprinlist -> exprinlist COMMA .) ]
  ! NOT             [ reduce using rule 51 (exprinlist -> exprinlist COMMA .) ]
  ! -               [ reduce using rule 51 (exprinlist -> exprinlist COMMA .) ]
  ! +               [ reduce using rule 51 (exprinlist -> exprinlist COMMA .) ]
  ! LPAREN          [ reduce using rule 51 (exprinlist -> exprinlist COMMA .) ]
  ! NAME            [ reduce using rule 51 (exprinlist -> exprinlist COMMA .) ]
  ! LCURLY          [ reduce using rule 51 (exprinlist -> exprinlist COMMA .) ]
  ! STRING          [ reduce using rule 51 (exprinlist -> exprinlist COMMA .) ]
  ! :               [ reduce using rule 51 (exprinlist -> exprinlist COMMA .) ]
  ! NUMBER          [ reduce using rule 51 (exprinlist -> exprinlist COMMA .) ]
  ! LBRACKET        [ reduce using rule 51 (exprinlist -> exprinlist COMMA .) ]

    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 156
    exprmcat                       shift and go to state 42

state 106

    (83) exprmcat -> LBRACKET exprinlist RBRACKET .

    +               reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    -               reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    *               reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    /               reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    \               reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    ^               reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    DOTTIMES        reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    DOTDIVIDE       reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    DOTRDIVIDE      reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    DOTPOWER        reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    NOTEQUAL        reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    ISEQUAL         reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    LESS            reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    GREATER         reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    LESSEQUAL       reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    GREATEREQUAL    reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    ELAND           reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    ELOR            reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    AND             reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    OR              reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    CONJTRANS       reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    TRANS           reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    :               reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    COMMA           reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    SEMICOLON       reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    FUNCTION        reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    FOR             reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    WHILE           reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    IF              reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    ELSEIF          reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    ELSE            reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    BREAK           reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    CONTINUE        reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    RETURN          reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    SWITCH          reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    CASE            reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    OTHERWISE       reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    GLOBAL          reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    PERSISTENT      reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    TRY             reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    CATCH           reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    END             reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    NAME            reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    LAMBDA          reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    NOT             reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    LPAREN          reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    LCURLY          reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    STRING          reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    NUMBER          reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    LBRACKET        reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    $end            reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    RBRACKET        reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    NEWLINE         reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    RCURLY          reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    RPAREN          reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)
    =               reduce using rule 83 (exprmcat -> LBRACKET exprinlist RBRACKET .)



state 107

    (49) exprinlist -> exprinlist expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RCURLY          reduce using rule 49 (exprinlist -> exprinlist expression .)
    COMMA           reduce using rule 49 (exprinlist -> exprinlist expression .)
    SEMICOLON       reduce using rule 49 (exprinlist -> exprinlist expression .)
    NEWLINE         reduce using rule 49 (exprinlist -> exprinlist expression .)
    LAMBDA          reduce using rule 49 (exprinlist -> exprinlist expression .)
    NOT             reduce using rule 49 (exprinlist -> exprinlist expression .)
    LPAREN          reduce using rule 49 (exprinlist -> exprinlist expression .)
    NAME            reduce using rule 49 (exprinlist -> exprinlist expression .)
    LCURLY          reduce using rule 49 (exprinlist -> exprinlist expression .)
    STRING          reduce using rule 49 (exprinlist -> exprinlist expression .)
    NUMBER          reduce using rule 49 (exprinlist -> exprinlist expression .)
    LBRACKET        reduce using rule 49 (exprinlist -> exprinlist expression .)
    RBRACKET        reduce using rule 49 (exprinlist -> exprinlist expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 49 (exprinlist -> exprinlist expression .) ]
  ! +               [ reduce using rule 49 (exprinlist -> exprinlist expression .) ]
  ! :               [ reduce using rule 49 (exprinlist -> exprinlist expression .) ]


state 108

    (84) expression -> LCURLY exprinlist RCURLY .

    +               reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    -               reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    *               reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    /               reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    \               reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    ^               reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    DOTTIMES        reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    DOTDIVIDE       reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    DOTRDIVIDE      reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    DOTPOWER        reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    NOTEQUAL        reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    ISEQUAL         reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    LESS            reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    GREATER         reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    LESSEQUAL       reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    GREATEREQUAL    reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    ELAND           reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    ELOR            reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    AND             reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    OR              reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    CONJTRANS       reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    TRANS           reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    :               reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    RBRACKET        reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    COMMA           reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    SEMICOLON       reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    NEWLINE         reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    LAMBDA          reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    NOT             reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    LPAREN          reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    NAME            reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    LCURLY          reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    STRING          reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    NUMBER          reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    LBRACKET        reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    RCURLY          reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    FUNCTION        reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    FOR             reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    WHILE           reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    IF              reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    ELSEIF          reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    ELSE            reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    BREAK           reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    CONTINUE        reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    RETURN          reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    SWITCH          reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    CASE            reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    OTHERWISE       reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    GLOBAL          reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    PERSISTENT      reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    TRY             reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    CATCH           reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    END             reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    $end            reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)
    RPAREN          reduce using rule 84 (expression -> LCURLY exprinlist RCURLY .)



state 109

    (93) name_attr -> name_attr . NAME .
    (91) name_sub -> NAME . LPAREN exprlist RPAREN
    (98) name_sub -> NAME . LCURLY exprinlist RCURLY

  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for LCURLY resolved as shift.
    .               reduce using rule 93 (name_attr -> name_attr . NAME .)
    +               reduce using rule 93 (name_attr -> name_attr . NAME .)
    -               reduce using rule 93 (name_attr -> name_attr . NAME .)
    *               reduce using rule 93 (name_attr -> name_attr . NAME .)
    /               reduce using rule 93 (name_attr -> name_attr . NAME .)
    \               reduce using rule 93 (name_attr -> name_attr . NAME .)
    ^               reduce using rule 93 (name_attr -> name_attr . NAME .)
    DOTTIMES        reduce using rule 93 (name_attr -> name_attr . NAME .)
    DOTDIVIDE       reduce using rule 93 (name_attr -> name_attr . NAME .)
    DOTRDIVIDE      reduce using rule 93 (name_attr -> name_attr . NAME .)
    DOTPOWER        reduce using rule 93 (name_attr -> name_attr . NAME .)
    NOTEQUAL        reduce using rule 93 (name_attr -> name_attr . NAME .)
    ISEQUAL         reduce using rule 93 (name_attr -> name_attr . NAME .)
    LESS            reduce using rule 93 (name_attr -> name_attr . NAME .)
    GREATER         reduce using rule 93 (name_attr -> name_attr . NAME .)
    LESSEQUAL       reduce using rule 93 (name_attr -> name_attr . NAME .)
    GREATEREQUAL    reduce using rule 93 (name_attr -> name_attr . NAME .)
    ELAND           reduce using rule 93 (name_attr -> name_attr . NAME .)
    ELOR            reduce using rule 93 (name_attr -> name_attr . NAME .)
    AND             reduce using rule 93 (name_attr -> name_attr . NAME .)
    OR              reduce using rule 93 (name_attr -> name_attr . NAME .)
    CONJTRANS       reduce using rule 93 (name_attr -> name_attr . NAME .)
    TRANS           reduce using rule 93 (name_attr -> name_attr . NAME .)
    :               reduce using rule 93 (name_attr -> name_attr . NAME .)
    RCURLY          reduce using rule 93 (name_attr -> name_attr . NAME .)
    COMMA           reduce using rule 93 (name_attr -> name_attr . NAME .)
    SEMICOLON       reduce using rule 93 (name_attr -> name_attr . NAME .)
    NEWLINE         reduce using rule 93 (name_attr -> name_attr . NAME .)
    LAMBDA          reduce using rule 93 (name_attr -> name_attr . NAME .)
    NOT             reduce using rule 93 (name_attr -> name_attr . NAME .)
    NAME            reduce using rule 93 (name_attr -> name_attr . NAME .)
    STRING          reduce using rule 93 (name_attr -> name_attr . NAME .)
    NUMBER          reduce using rule 93 (name_attr -> name_attr . NAME .)
    LBRACKET        reduce using rule 93 (name_attr -> name_attr . NAME .)
    FUNCTION        reduce using rule 93 (name_attr -> name_attr . NAME .)
    FOR             reduce using rule 93 (name_attr -> name_attr . NAME .)
    WHILE           reduce using rule 93 (name_attr -> name_attr . NAME .)
    IF              reduce using rule 93 (name_attr -> name_attr . NAME .)
    ELSEIF          reduce using rule 93 (name_attr -> name_attr . NAME .)
    ELSE            reduce using rule 93 (name_attr -> name_attr . NAME .)
    BREAK           reduce using rule 93 (name_attr -> name_attr . NAME .)
    CONTINUE        reduce using rule 93 (name_attr -> name_attr . NAME .)
    RETURN          reduce using rule 93 (name_attr -> name_attr . NAME .)
    SWITCH          reduce using rule 93 (name_attr -> name_attr . NAME .)
    CASE            reduce using rule 93 (name_attr -> name_attr . NAME .)
    OTHERWISE       reduce using rule 93 (name_attr -> name_attr . NAME .)
    GLOBAL          reduce using rule 93 (name_attr -> name_attr . NAME .)
    PERSISTENT      reduce using rule 93 (name_attr -> name_attr . NAME .)
    TRY             reduce using rule 93 (name_attr -> name_attr . NAME .)
    CATCH           reduce using rule 93 (name_attr -> name_attr . NAME .)
    END             reduce using rule 93 (name_attr -> name_attr . NAME .)
    $end            reduce using rule 93 (name_attr -> name_attr . NAME .)
    RBRACKET        reduce using rule 93 (name_attr -> name_attr . NAME .)
    RPAREN          reduce using rule 93 (name_attr -> name_attr . NAME .)
    =               reduce using rule 93 (name_attr -> name_attr . NAME .)
    LPAREN          shift and go to state 157
    LCURLY          shift and go to state 72

  ! LPAREN          [ reduce using rule 93 (name_attr -> name_attr . NAME .) ]
  ! LCURLY          [ reduce using rule 93 (name_attr -> name_attr . NAME .) ]


state 110

    (94) name_attr -> name_attr . name_sub .

    .               reduce using rule 94 (name_attr -> name_attr . name_sub .)
    +               reduce using rule 94 (name_attr -> name_attr . name_sub .)
    -               reduce using rule 94 (name_attr -> name_attr . name_sub .)
    *               reduce using rule 94 (name_attr -> name_attr . name_sub .)
    /               reduce using rule 94 (name_attr -> name_attr . name_sub .)
    \               reduce using rule 94 (name_attr -> name_attr . name_sub .)
    ^               reduce using rule 94 (name_attr -> name_attr . name_sub .)
    DOTTIMES        reduce using rule 94 (name_attr -> name_attr . name_sub .)
    DOTDIVIDE       reduce using rule 94 (name_attr -> name_attr . name_sub .)
    DOTRDIVIDE      reduce using rule 94 (name_attr -> name_attr . name_sub .)
    DOTPOWER        reduce using rule 94 (name_attr -> name_attr . name_sub .)
    NOTEQUAL        reduce using rule 94 (name_attr -> name_attr . name_sub .)
    ISEQUAL         reduce using rule 94 (name_attr -> name_attr . name_sub .)
    LESS            reduce using rule 94 (name_attr -> name_attr . name_sub .)
    GREATER         reduce using rule 94 (name_attr -> name_attr . name_sub .)
    LESSEQUAL       reduce using rule 94 (name_attr -> name_attr . name_sub .)
    GREATEREQUAL    reduce using rule 94 (name_attr -> name_attr . name_sub .)
    ELAND           reduce using rule 94 (name_attr -> name_attr . name_sub .)
    ELOR            reduce using rule 94 (name_attr -> name_attr . name_sub .)
    AND             reduce using rule 94 (name_attr -> name_attr . name_sub .)
    OR              reduce using rule 94 (name_attr -> name_attr . name_sub .)
    CONJTRANS       reduce using rule 94 (name_attr -> name_attr . name_sub .)
    TRANS           reduce using rule 94 (name_attr -> name_attr . name_sub .)
    :               reduce using rule 94 (name_attr -> name_attr . name_sub .)
    RCURLY          reduce using rule 94 (name_attr -> name_attr . name_sub .)
    COMMA           reduce using rule 94 (name_attr -> name_attr . name_sub .)
    SEMICOLON       reduce using rule 94 (name_attr -> name_attr . name_sub .)
    NEWLINE         reduce using rule 94 (name_attr -> name_attr . name_sub .)
    LAMBDA          reduce using rule 94 (name_attr -> name_attr . name_sub .)
    NOT             reduce using rule 94 (name_attr -> name_attr . name_sub .)
    LPAREN          reduce using rule 94 (name_attr -> name_attr . name_sub .)
    NAME            reduce using rule 94 (name_attr -> name_attr . name_sub .)
    LCURLY          reduce using rule 94 (name_attr -> name_attr . name_sub .)
    STRING          reduce using rule 94 (name_attr -> name_attr . name_sub .)
    NUMBER          reduce using rule 94 (name_attr -> name_attr . name_sub .)
    LBRACKET        reduce using rule 94 (name_attr -> name_attr . name_sub .)
    FUNCTION        reduce using rule 94 (name_attr -> name_attr . name_sub .)
    FOR             reduce using rule 94 (name_attr -> name_attr . name_sub .)
    WHILE           reduce using rule 94 (name_attr -> name_attr . name_sub .)
    IF              reduce using rule 94 (name_attr -> name_attr . name_sub .)
    ELSEIF          reduce using rule 94 (name_attr -> name_attr . name_sub .)
    ELSE            reduce using rule 94 (name_attr -> name_attr . name_sub .)
    BREAK           reduce using rule 94 (name_attr -> name_attr . name_sub .)
    CONTINUE        reduce using rule 94 (name_attr -> name_attr . name_sub .)
    RETURN          reduce using rule 94 (name_attr -> name_attr . name_sub .)
    SWITCH          reduce using rule 94 (name_attr -> name_attr . name_sub .)
    CASE            reduce using rule 94 (name_attr -> name_attr . name_sub .)
    OTHERWISE       reduce using rule 94 (name_attr -> name_attr . name_sub .)
    GLOBAL          reduce using rule 94 (name_attr -> name_attr . name_sub .)
    PERSISTENT      reduce using rule 94 (name_attr -> name_attr . name_sub .)
    TRY             reduce using rule 94 (name_attr -> name_attr . name_sub .)
    CATCH           reduce using rule 94 (name_attr -> name_attr . name_sub .)
    END             reduce using rule 94 (name_attr -> name_attr . name_sub .)
    $end            reduce using rule 94 (name_attr -> name_attr . name_sub .)
    RBRACKET        reduce using rule 94 (name_attr -> name_attr . name_sub .)
    RPAREN          reduce using rule 94 (name_attr -> name_attr . name_sub .)
    =               reduce using rule 94 (name_attr -> name_attr . name_sub .)



state 111

    (39) statement -> name_attr = expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    COMMA           reduce using rule 39 (statement -> name_attr = expression .)
    SEMICOLON       reduce using rule 39 (statement -> name_attr = expression .)
    FUNCTION        reduce using rule 39 (statement -> name_attr = expression .)
    FOR             reduce using rule 39 (statement -> name_attr = expression .)
    WHILE           reduce using rule 39 (statement -> name_attr = expression .)
    IF              reduce using rule 39 (statement -> name_attr = expression .)
    ELSEIF          reduce using rule 39 (statement -> name_attr = expression .)
    ELSE            reduce using rule 39 (statement -> name_attr = expression .)
    BREAK           reduce using rule 39 (statement -> name_attr = expression .)
    CONTINUE        reduce using rule 39 (statement -> name_attr = expression .)
    RETURN          reduce using rule 39 (statement -> name_attr = expression .)
    SWITCH          reduce using rule 39 (statement -> name_attr = expression .)
    CASE            reduce using rule 39 (statement -> name_attr = expression .)
    OTHERWISE       reduce using rule 39 (statement -> name_attr = expression .)
    GLOBAL          reduce using rule 39 (statement -> name_attr = expression .)
    PERSISTENT      reduce using rule 39 (statement -> name_attr = expression .)
    TRY             reduce using rule 39 (statement -> name_attr = expression .)
    CATCH           reduce using rule 39 (statement -> name_attr = expression .)
    END             reduce using rule 39 (statement -> name_attr = expression .)
    NAME            reduce using rule 39 (statement -> name_attr = expression .)
    LAMBDA          reduce using rule 39 (statement -> name_attr = expression .)
    NOT             reduce using rule 39 (statement -> name_attr = expression .)
    LPAREN          reduce using rule 39 (statement -> name_attr = expression .)
    LCURLY          reduce using rule 39 (statement -> name_attr = expression .)
    STRING          reduce using rule 39 (statement -> name_attr = expression .)
    NUMBER          reduce using rule 39 (statement -> name_attr = expression .)
    LBRACKET        reduce using rule 39 (statement -> name_attr = expression .)
    $end            reduce using rule 39 (statement -> name_attr = expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 39 (statement -> name_attr = expression .) ]
  ! +               [ reduce using rule 39 (statement -> name_attr = expression .) ]
  ! :               [ reduce using rule 39 (statement -> name_attr = expression .) ]


state 112

    (14) statement -> FUNCTION NAME LPAREN . name_list RPAREN
    (17) name_list -> . name_list COMMA NAME
    (18) name_list -> . NAME

    NAME            shift and go to state 114


    name_list                      shift and go to state 158

state 113

    (12) statement -> FUNCTION NAME = . NAME LPAREN name_list RPAREN
    (13) statement -> FUNCTION NAME = . NAME

    NAME            shift and go to state 159



state 114

    (18) name_list -> NAME .

    RPAREN          reduce using rule 18 (name_list -> NAME .)
    COMMA           reduce using rule 18 (name_list -> NAME .)
    RBRACKET        reduce using rule 18 (name_list -> NAME .)



state 115

    (10) statement -> FUNCTION LBRACKET name_list . RBRACKET = NAME LPAREN name_list RPAREN
    (11) statement -> FUNCTION LBRACKET name_list . RBRACKET = NAME
    (17) name_list -> name_list . COMMA NAME

    RBRACKET        shift and go to state 161
    COMMA           shift and go to state 160



state 116

    (20) statement -> FOR NAME = . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 162
    exprmcat                       shift and go to state 42

state 117

    (38) statement -> name_sub = expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    COMMA           reduce using rule 38 (statement -> name_sub = expression .)
    SEMICOLON       reduce using rule 38 (statement -> name_sub = expression .)
    FUNCTION        reduce using rule 38 (statement -> name_sub = expression .)
    FOR             reduce using rule 38 (statement -> name_sub = expression .)
    WHILE           reduce using rule 38 (statement -> name_sub = expression .)
    IF              reduce using rule 38 (statement -> name_sub = expression .)
    ELSEIF          reduce using rule 38 (statement -> name_sub = expression .)
    ELSE            reduce using rule 38 (statement -> name_sub = expression .)
    BREAK           reduce using rule 38 (statement -> name_sub = expression .)
    CONTINUE        reduce using rule 38 (statement -> name_sub = expression .)
    RETURN          reduce using rule 38 (statement -> name_sub = expression .)
    SWITCH          reduce using rule 38 (statement -> name_sub = expression .)
    CASE            reduce using rule 38 (statement -> name_sub = expression .)
    OTHERWISE       reduce using rule 38 (statement -> name_sub = expression .)
    GLOBAL          reduce using rule 38 (statement -> name_sub = expression .)
    PERSISTENT      reduce using rule 38 (statement -> name_sub = expression .)
    TRY             reduce using rule 38 (statement -> name_sub = expression .)
    CATCH           reduce using rule 38 (statement -> name_sub = expression .)
    END             reduce using rule 38 (statement -> name_sub = expression .)
    NAME            reduce using rule 38 (statement -> name_sub = expression .)
    LAMBDA          reduce using rule 38 (statement -> name_sub = expression .)
    NOT             reduce using rule 38 (statement -> name_sub = expression .)
    LPAREN          reduce using rule 38 (statement -> name_sub = expression .)
    LCURLY          reduce using rule 38 (statement -> name_sub = expression .)
    STRING          reduce using rule 38 (statement -> name_sub = expression .)
    NUMBER          reduce using rule 38 (statement -> name_sub = expression .)
    LBRACKET        reduce using rule 38 (statement -> name_sub = expression .)
    $end            reduce using rule 38 (statement -> name_sub = expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 38 (statement -> name_sub = expression .) ]
  ! +               [ reduce using rule 38 (statement -> name_sub = expression .) ]
  ! :               [ reduce using rule 38 (statement -> name_sub = expression .) ]


state 118

    (92) name_attr -> name_sub . NAME .
    (91) name_sub -> NAME . LPAREN exprlist RPAREN
    (98) name_sub -> NAME . LCURLY exprinlist RCURLY

  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for LCURLY resolved as shift.
    .               reduce using rule 92 (name_attr -> name_sub . NAME .)
    +               reduce using rule 92 (name_attr -> name_sub . NAME .)
    -               reduce using rule 92 (name_attr -> name_sub . NAME .)
    *               reduce using rule 92 (name_attr -> name_sub . NAME .)
    /               reduce using rule 92 (name_attr -> name_sub . NAME .)
    \               reduce using rule 92 (name_attr -> name_sub . NAME .)
    ^               reduce using rule 92 (name_attr -> name_sub . NAME .)
    DOTTIMES        reduce using rule 92 (name_attr -> name_sub . NAME .)
    DOTDIVIDE       reduce using rule 92 (name_attr -> name_sub . NAME .)
    DOTRDIVIDE      reduce using rule 92 (name_attr -> name_sub . NAME .)
    DOTPOWER        reduce using rule 92 (name_attr -> name_sub . NAME .)
    NOTEQUAL        reduce using rule 92 (name_attr -> name_sub . NAME .)
    ISEQUAL         reduce using rule 92 (name_attr -> name_sub . NAME .)
    LESS            reduce using rule 92 (name_attr -> name_sub . NAME .)
    GREATER         reduce using rule 92 (name_attr -> name_sub . NAME .)
    LESSEQUAL       reduce using rule 92 (name_attr -> name_sub . NAME .)
    GREATEREQUAL    reduce using rule 92 (name_attr -> name_sub . NAME .)
    ELAND           reduce using rule 92 (name_attr -> name_sub . NAME .)
    ELOR            reduce using rule 92 (name_attr -> name_sub . NAME .)
    AND             reduce using rule 92 (name_attr -> name_sub . NAME .)
    OR              reduce using rule 92 (name_attr -> name_sub . NAME .)
    CONJTRANS       reduce using rule 92 (name_attr -> name_sub . NAME .)
    TRANS           reduce using rule 92 (name_attr -> name_sub . NAME .)
    :               reduce using rule 92 (name_attr -> name_sub . NAME .)
    RCURLY          reduce using rule 92 (name_attr -> name_sub . NAME .)
    COMMA           reduce using rule 92 (name_attr -> name_sub . NAME .)
    SEMICOLON       reduce using rule 92 (name_attr -> name_sub . NAME .)
    NEWLINE         reduce using rule 92 (name_attr -> name_sub . NAME .)
    LAMBDA          reduce using rule 92 (name_attr -> name_sub . NAME .)
    NOT             reduce using rule 92 (name_attr -> name_sub . NAME .)
    NAME            reduce using rule 92 (name_attr -> name_sub . NAME .)
    STRING          reduce using rule 92 (name_attr -> name_sub . NAME .)
    NUMBER          reduce using rule 92 (name_attr -> name_sub . NAME .)
    LBRACKET        reduce using rule 92 (name_attr -> name_sub . NAME .)
    FUNCTION        reduce using rule 92 (name_attr -> name_sub . NAME .)
    FOR             reduce using rule 92 (name_attr -> name_sub . NAME .)
    WHILE           reduce using rule 92 (name_attr -> name_sub . NAME .)
    IF              reduce using rule 92 (name_attr -> name_sub . NAME .)
    ELSEIF          reduce using rule 92 (name_attr -> name_sub . NAME .)
    ELSE            reduce using rule 92 (name_attr -> name_sub . NAME .)
    BREAK           reduce using rule 92 (name_attr -> name_sub . NAME .)
    CONTINUE        reduce using rule 92 (name_attr -> name_sub . NAME .)
    RETURN          reduce using rule 92 (name_attr -> name_sub . NAME .)
    SWITCH          reduce using rule 92 (name_attr -> name_sub . NAME .)
    CASE            reduce using rule 92 (name_attr -> name_sub . NAME .)
    OTHERWISE       reduce using rule 92 (name_attr -> name_sub . NAME .)
    GLOBAL          reduce using rule 92 (name_attr -> name_sub . NAME .)
    PERSISTENT      reduce using rule 92 (name_attr -> name_sub . NAME .)
    TRY             reduce using rule 92 (name_attr -> name_sub . NAME .)
    CATCH           reduce using rule 92 (name_attr -> name_sub . NAME .)
    END             reduce using rule 92 (name_attr -> name_sub . NAME .)
    $end            reduce using rule 92 (name_attr -> name_sub . NAME .)
    RBRACKET        reduce using rule 92 (name_attr -> name_sub . NAME .)
    RPAREN          reduce using rule 92 (name_attr -> name_sub . NAME .)
    =               reduce using rule 92 (name_attr -> name_sub . NAME .)
    LPAREN          shift and go to state 157
    LCURLY          shift and go to state 72

  ! LPAREN          [ reduce using rule 92 (name_attr -> name_sub . NAME .) ]
  ! LCURLY          [ reduce using rule 92 (name_attr -> name_sub . NAME .) ]


state 119

    (95) name_attr -> name_sub . name_sub .

    .               reduce using rule 95 (name_attr -> name_sub . name_sub .)
    +               reduce using rule 95 (name_attr -> name_sub . name_sub .)
    -               reduce using rule 95 (name_attr -> name_sub . name_sub .)
    *               reduce using rule 95 (name_attr -> name_sub . name_sub .)
    /               reduce using rule 95 (name_attr -> name_sub . name_sub .)
    \               reduce using rule 95 (name_attr -> name_sub . name_sub .)
    ^               reduce using rule 95 (name_attr -> name_sub . name_sub .)
    DOTTIMES        reduce using rule 95 (name_attr -> name_sub . name_sub .)
    DOTDIVIDE       reduce using rule 95 (name_attr -> name_sub . name_sub .)
    DOTRDIVIDE      reduce using rule 95 (name_attr -> name_sub . name_sub .)
    DOTPOWER        reduce using rule 95 (name_attr -> name_sub . name_sub .)
    NOTEQUAL        reduce using rule 95 (name_attr -> name_sub . name_sub .)
    ISEQUAL         reduce using rule 95 (name_attr -> name_sub . name_sub .)
    LESS            reduce using rule 95 (name_attr -> name_sub . name_sub .)
    GREATER         reduce using rule 95 (name_attr -> name_sub . name_sub .)
    LESSEQUAL       reduce using rule 95 (name_attr -> name_sub . name_sub .)
    GREATEREQUAL    reduce using rule 95 (name_attr -> name_sub . name_sub .)
    ELAND           reduce using rule 95 (name_attr -> name_sub . name_sub .)
    ELOR            reduce using rule 95 (name_attr -> name_sub . name_sub .)
    AND             reduce using rule 95 (name_attr -> name_sub . name_sub .)
    OR              reduce using rule 95 (name_attr -> name_sub . name_sub .)
    CONJTRANS       reduce using rule 95 (name_attr -> name_sub . name_sub .)
    TRANS           reduce using rule 95 (name_attr -> name_sub . name_sub .)
    :               reduce using rule 95 (name_attr -> name_sub . name_sub .)
    RCURLY          reduce using rule 95 (name_attr -> name_sub . name_sub .)
    COMMA           reduce using rule 95 (name_attr -> name_sub . name_sub .)
    SEMICOLON       reduce using rule 95 (name_attr -> name_sub . name_sub .)
    NEWLINE         reduce using rule 95 (name_attr -> name_sub . name_sub .)
    LAMBDA          reduce using rule 95 (name_attr -> name_sub . name_sub .)
    NOT             reduce using rule 95 (name_attr -> name_sub . name_sub .)
    LPAREN          reduce using rule 95 (name_attr -> name_sub . name_sub .)
    NAME            reduce using rule 95 (name_attr -> name_sub . name_sub .)
    LCURLY          reduce using rule 95 (name_attr -> name_sub . name_sub .)
    STRING          reduce using rule 95 (name_attr -> name_sub . name_sub .)
    NUMBER          reduce using rule 95 (name_attr -> name_sub . name_sub .)
    LBRACKET        reduce using rule 95 (name_attr -> name_sub . name_sub .)
    FUNCTION        reduce using rule 95 (name_attr -> name_sub . name_sub .)
    FOR             reduce using rule 95 (name_attr -> name_sub . name_sub .)
    WHILE           reduce using rule 95 (name_attr -> name_sub . name_sub .)
    IF              reduce using rule 95 (name_attr -> name_sub . name_sub .)
    ELSEIF          reduce using rule 95 (name_attr -> name_sub . name_sub .)
    ELSE            reduce using rule 95 (name_attr -> name_sub . name_sub .)
    BREAK           reduce using rule 95 (name_attr -> name_sub . name_sub .)
    CONTINUE        reduce using rule 95 (name_attr -> name_sub . name_sub .)
    RETURN          reduce using rule 95 (name_attr -> name_sub . name_sub .)
    SWITCH          reduce using rule 95 (name_attr -> name_sub . name_sub .)
    CASE            reduce using rule 95 (name_attr -> name_sub . name_sub .)
    OTHERWISE       reduce using rule 95 (name_attr -> name_sub . name_sub .)
    GLOBAL          reduce using rule 95 (name_attr -> name_sub . name_sub .)
    PERSISTENT      reduce using rule 95 (name_attr -> name_sub . name_sub .)
    TRY             reduce using rule 95 (name_attr -> name_sub . name_sub .)
    CATCH           reduce using rule 95 (name_attr -> name_sub . name_sub .)
    END             reduce using rule 95 (name_attr -> name_sub . name_sub .)
    $end            reduce using rule 95 (name_attr -> name_sub . name_sub .)
    RBRACKET        reduce using rule 95 (name_attr -> name_sub . name_sub .)
    RPAREN          reduce using rule 95 (name_attr -> name_sub . name_sub .)
    =               reduce using rule 95 (name_attr -> name_sub . name_sub .)



state 120

    (4) statement_list -> statement_list SEMICOLON statement .
    (7) statement -> statement . SEMICOLON
    (8) statement -> statement . COMMA

  ! shift/reduce conflict for SEMICOLON resolved as shift.
  ! shift/reduce conflict for COMMA resolved as shift.
    FUNCTION        reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    FOR             reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    WHILE           reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    IF              reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    ELSEIF          reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    ELSE            reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    BREAK           reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    CONTINUE        reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    RETURN          reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    SWITCH          reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    CASE            reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    OTHERWISE       reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    GLOBAL          reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    PERSISTENT      reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    TRY             reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    CATCH           reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    END             reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    NAME            reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    LAMBDA          reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    NOT             reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    -               reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    +               reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    LPAREN          reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    LCURLY          reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    STRING          reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    :               reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    NUMBER          reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    LBRACKET        reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    $end            reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .)
    SEMICOLON       shift and go to state 123
    COMMA           shift and go to state 122

  ! SEMICOLON       [ reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .) ]
  ! COMMA           [ reduce using rule 4 (statement_list -> statement_list SEMICOLON statement .) ]


state 121

    (5) statement_list -> statement_list COMMA statement .
    (7) statement -> statement . SEMICOLON
    (8) statement -> statement . COMMA

  ! shift/reduce conflict for SEMICOLON resolved as shift.
  ! shift/reduce conflict for COMMA resolved as shift.
    FUNCTION        reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    FOR             reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    WHILE           reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    IF              reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    ELSEIF          reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    ELSE            reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    BREAK           reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    CONTINUE        reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    RETURN          reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    SWITCH          reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    CASE            reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    OTHERWISE       reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    GLOBAL          reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    PERSISTENT      reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    TRY             reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    CATCH           reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    END             reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    NAME            reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    LAMBDA          reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    NOT             reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    -               reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    +               reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    LPAREN          reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    LCURLY          reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    STRING          reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    :               reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    NUMBER          reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    LBRACKET        reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    $end            reduce using rule 5 (statement_list -> statement_list COMMA statement .)
    SEMICOLON       shift and go to state 123
    COMMA           shift and go to state 122

  ! SEMICOLON       [ reduce using rule 5 (statement_list -> statement_list COMMA statement .) ]
  ! COMMA           [ reduce using rule 5 (statement_list -> statement_list COMMA statement .) ]


state 122

    (8) statement -> statement COMMA .

    SEMICOLON       reduce using rule 8 (statement -> statement COMMA .)
    COMMA           reduce using rule 8 (statement -> statement COMMA .)
    FUNCTION        reduce using rule 8 (statement -> statement COMMA .)
    FOR             reduce using rule 8 (statement -> statement COMMA .)
    WHILE           reduce using rule 8 (statement -> statement COMMA .)
    IF              reduce using rule 8 (statement -> statement COMMA .)
    ELSEIF          reduce using rule 8 (statement -> statement COMMA .)
    ELSE            reduce using rule 8 (statement -> statement COMMA .)
    BREAK           reduce using rule 8 (statement -> statement COMMA .)
    CONTINUE        reduce using rule 8 (statement -> statement COMMA .)
    RETURN          reduce using rule 8 (statement -> statement COMMA .)
    SWITCH          reduce using rule 8 (statement -> statement COMMA .)
    CASE            reduce using rule 8 (statement -> statement COMMA .)
    OTHERWISE       reduce using rule 8 (statement -> statement COMMA .)
    GLOBAL          reduce using rule 8 (statement -> statement COMMA .)
    PERSISTENT      reduce using rule 8 (statement -> statement COMMA .)
    TRY             reduce using rule 8 (statement -> statement COMMA .)
    CATCH           reduce using rule 8 (statement -> statement COMMA .)
    END             reduce using rule 8 (statement -> statement COMMA .)
    NAME            reduce using rule 8 (statement -> statement COMMA .)
    LAMBDA          reduce using rule 8 (statement -> statement COMMA .)
    NOT             reduce using rule 8 (statement -> statement COMMA .)
    -               reduce using rule 8 (statement -> statement COMMA .)
    +               reduce using rule 8 (statement -> statement COMMA .)
    LPAREN          reduce using rule 8 (statement -> statement COMMA .)
    LCURLY          reduce using rule 8 (statement -> statement COMMA .)
    STRING          reduce using rule 8 (statement -> statement COMMA .)
    :               reduce using rule 8 (statement -> statement COMMA .)
    NUMBER          reduce using rule 8 (statement -> statement COMMA .)
    LBRACKET        reduce using rule 8 (statement -> statement COMMA .)
    $end            reduce using rule 8 (statement -> statement COMMA .)



state 123

    (7) statement -> statement SEMICOLON .

    SEMICOLON       reduce using rule 7 (statement -> statement SEMICOLON .)
    COMMA           reduce using rule 7 (statement -> statement SEMICOLON .)
    FUNCTION        reduce using rule 7 (statement -> statement SEMICOLON .)
    FOR             reduce using rule 7 (statement -> statement SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> statement SEMICOLON .)
    IF              reduce using rule 7 (statement -> statement SEMICOLON .)
    ELSEIF          reduce using rule 7 (statement -> statement SEMICOLON .)
    ELSE            reduce using rule 7 (statement -> statement SEMICOLON .)
    BREAK           reduce using rule 7 (statement -> statement SEMICOLON .)
    CONTINUE        reduce using rule 7 (statement -> statement SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> statement SEMICOLON .)
    SWITCH          reduce using rule 7 (statement -> statement SEMICOLON .)
    CASE            reduce using rule 7 (statement -> statement SEMICOLON .)
    OTHERWISE       reduce using rule 7 (statement -> statement SEMICOLON .)
    GLOBAL          reduce using rule 7 (statement -> statement SEMICOLON .)
    PERSISTENT      reduce using rule 7 (statement -> statement SEMICOLON .)
    TRY             reduce using rule 7 (statement -> statement SEMICOLON .)
    CATCH           reduce using rule 7 (statement -> statement SEMICOLON .)
    END             reduce using rule 7 (statement -> statement SEMICOLON .)
    NAME            reduce using rule 7 (statement -> statement SEMICOLON .)
    LAMBDA          reduce using rule 7 (statement -> statement SEMICOLON .)
    NOT             reduce using rule 7 (statement -> statement SEMICOLON .)
    -               reduce using rule 7 (statement -> statement SEMICOLON .)
    +               reduce using rule 7 (statement -> statement SEMICOLON .)
    LPAREN          reduce using rule 7 (statement -> statement SEMICOLON .)
    LCURLY          reduce using rule 7 (statement -> statement SEMICOLON .)
    STRING          reduce using rule 7 (statement -> statement SEMICOLON .)
    :               reduce using rule 7 (statement -> statement SEMICOLON .)
    NUMBER          reduce using rule 7 (statement -> statement SEMICOLON .)
    LBRACKET        reduce using rule 7 (statement -> statement SEMICOLON .)
    $end            reduce using rule 7 (statement -> statement SEMICOLON .)



state 124

    (44) exprlist -> exprlist COMMA . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 163
    exprmcat                       shift and go to state 42

state 125

    (80) expression -> LPAREN exprlist RPAREN .

    +               reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    -               reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    *               reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    /               reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    \               reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    ^               reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    DOTTIMES        reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    DOTDIVIDE       reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    DOTRDIVIDE      reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    DOTPOWER        reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    NOTEQUAL        reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    ISEQUAL         reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    LESS            reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    GREATER         reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    LESSEQUAL       reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    GREATEREQUAL    reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    ELAND           reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    ELOR            reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    AND             reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    OR              reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    CONJTRANS       reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    TRANS           reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    :               reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    RBRACKET        reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    SEMICOLON       reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    NEWLINE         reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    LAMBDA          reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    NOT             reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    LPAREN          reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    NAME            reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    LCURLY          reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    STRING          reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    NUMBER          reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    LBRACKET        reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    RCURLY          reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    FUNCTION        reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    FOR             reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    WHILE           reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    IF              reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    ELSEIF          reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    ELSE            reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    BREAK           reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    CONTINUE        reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    RETURN          reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    SWITCH          reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    CASE            reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    OTHERWISE       reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    GLOBAL          reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    PERSISTENT      reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    TRY             reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    CATCH           reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    END             reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    $end            reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 80 (expression -> LPAREN exprlist RPAREN .)



state 126

    (40) statement -> exprmcat = expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    COMMA           reduce using rule 40 (statement -> exprmcat = expression .)
    SEMICOLON       reduce using rule 40 (statement -> exprmcat = expression .)
    FUNCTION        reduce using rule 40 (statement -> exprmcat = expression .)
    FOR             reduce using rule 40 (statement -> exprmcat = expression .)
    WHILE           reduce using rule 40 (statement -> exprmcat = expression .)
    IF              reduce using rule 40 (statement -> exprmcat = expression .)
    ELSEIF          reduce using rule 40 (statement -> exprmcat = expression .)
    ELSE            reduce using rule 40 (statement -> exprmcat = expression .)
    BREAK           reduce using rule 40 (statement -> exprmcat = expression .)
    CONTINUE        reduce using rule 40 (statement -> exprmcat = expression .)
    RETURN          reduce using rule 40 (statement -> exprmcat = expression .)
    SWITCH          reduce using rule 40 (statement -> exprmcat = expression .)
    CASE            reduce using rule 40 (statement -> exprmcat = expression .)
    OTHERWISE       reduce using rule 40 (statement -> exprmcat = expression .)
    GLOBAL          reduce using rule 40 (statement -> exprmcat = expression .)
    PERSISTENT      reduce using rule 40 (statement -> exprmcat = expression .)
    TRY             reduce using rule 40 (statement -> exprmcat = expression .)
    CATCH           reduce using rule 40 (statement -> exprmcat = expression .)
    END             reduce using rule 40 (statement -> exprmcat = expression .)
    NAME            reduce using rule 40 (statement -> exprmcat = expression .)
    LAMBDA          reduce using rule 40 (statement -> exprmcat = expression .)
    NOT             reduce using rule 40 (statement -> exprmcat = expression .)
    LPAREN          reduce using rule 40 (statement -> exprmcat = expression .)
    LCURLY          reduce using rule 40 (statement -> exprmcat = expression .)
    STRING          reduce using rule 40 (statement -> exprmcat = expression .)
    NUMBER          reduce using rule 40 (statement -> exprmcat = expression .)
    LBRACKET        reduce using rule 40 (statement -> exprmcat = expression .)
    $end            reduce using rule 40 (statement -> exprmcat = expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 40 (statement -> exprmcat = expression .) ]
  ! +               [ reduce using rule 40 (statement -> exprmcat = expression .) ]
  ! :               [ reduce using rule 40 (statement -> exprmcat = expression .) ]


state 127

    (41) statement -> NAME = expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    COMMA           reduce using rule 41 (statement -> NAME = expression .)
    SEMICOLON       reduce using rule 41 (statement -> NAME = expression .)
    FUNCTION        reduce using rule 41 (statement -> NAME = expression .)
    FOR             reduce using rule 41 (statement -> NAME = expression .)
    WHILE           reduce using rule 41 (statement -> NAME = expression .)
    IF              reduce using rule 41 (statement -> NAME = expression .)
    ELSEIF          reduce using rule 41 (statement -> NAME = expression .)
    ELSE            reduce using rule 41 (statement -> NAME = expression .)
    BREAK           reduce using rule 41 (statement -> NAME = expression .)
    CONTINUE        reduce using rule 41 (statement -> NAME = expression .)
    RETURN          reduce using rule 41 (statement -> NAME = expression .)
    SWITCH          reduce using rule 41 (statement -> NAME = expression .)
    CASE            reduce using rule 41 (statement -> NAME = expression .)
    OTHERWISE       reduce using rule 41 (statement -> NAME = expression .)
    GLOBAL          reduce using rule 41 (statement -> NAME = expression .)
    PERSISTENT      reduce using rule 41 (statement -> NAME = expression .)
    TRY             reduce using rule 41 (statement -> NAME = expression .)
    CATCH           reduce using rule 41 (statement -> NAME = expression .)
    END             reduce using rule 41 (statement -> NAME = expression .)
    NAME            reduce using rule 41 (statement -> NAME = expression .)
    LAMBDA          reduce using rule 41 (statement -> NAME = expression .)
    NOT             reduce using rule 41 (statement -> NAME = expression .)
    LPAREN          reduce using rule 41 (statement -> NAME = expression .)
    LCURLY          reduce using rule 41 (statement -> NAME = expression .)
    STRING          reduce using rule 41 (statement -> NAME = expression .)
    NUMBER          reduce using rule 41 (statement -> NAME = expression .)
    LBRACKET        reduce using rule 41 (statement -> NAME = expression .)
    $end            reduce using rule 41 (statement -> NAME = expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 41 (statement -> NAME = expression .) ]
  ! +               [ reduce using rule 41 (statement -> NAME = expression .) ]
  ! :               [ reduce using rule 41 (statement -> NAME = expression .) ]


state 128

    (98) name_sub -> NAME LCURLY exprinlist . RCURLY
    (46) exprinlist -> exprinlist . COMMA expression
    (47) exprinlist -> exprinlist . SEMICOLON expression
    (48) exprinlist -> exprinlist . NEWLINE expression
    (49) exprinlist -> exprinlist . expression
    (50) exprinlist -> exprinlist . SEMICOLON
    (51) exprinlist -> exprinlist . COMMA
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    RCURLY          shift and go to state 164
    COMMA           shift and go to state 105
    SEMICOLON       shift and go to state 104
    NEWLINE         shift and go to state 103
    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 107
    exprmcat                       shift and go to state 42

state 129

    (81) expression -> NAME LPAREN RPAREN .

    +               reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    -               reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    *               reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    /               reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    \               reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    ^               reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    DOTTIMES        reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    DOTDIVIDE       reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    DOTRDIVIDE      reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    DOTPOWER        reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    ISEQUAL         reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    LESS            reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    GREATER         reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    ELAND           reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    ELOR            reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    AND             reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    OR              reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    CONJTRANS       reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    TRANS           reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    :               reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    RBRACKET        reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    COMMA           reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    SEMICOLON       reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    NEWLINE         reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    LAMBDA          reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    NOT             reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    LPAREN          reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    NAME            reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    LCURLY          reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    STRING          reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    NUMBER          reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    LBRACKET        reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    RCURLY          reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    FUNCTION        reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    FOR             reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    WHILE           reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    IF              reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    ELSEIF          reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    ELSE            reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    BREAK           reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    CONTINUE        reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    RETURN          reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    SWITCH          reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    CASE            reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    OTHERWISE       reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    GLOBAL          reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    PERSISTENT      reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    TRY             reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    CATCH           reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    END             reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    $end            reduce using rule 81 (expression -> NAME LPAREN RPAREN .)
    RPAREN          reduce using rule 81 (expression -> NAME LPAREN RPAREN .)



state 130

    (91) name_sub -> NAME LPAREN exprlist . RPAREN
    (44) exprlist -> exprlist . COMMA expression

    RPAREN          shift and go to state 165
    COMMA           shift and go to state 124



state 131

    (88) indexflat -> LPAREN : . RPAREN
    (89) expression -> : .

  ! shift/reduce conflict for RPAREN resolved as shift.
    RPAREN          shift and go to state 166
    +               reduce using rule 89 (expression -> : .)
    -               reduce using rule 89 (expression -> : .)
    *               reduce using rule 89 (expression -> : .)
    /               reduce using rule 89 (expression -> : .)
    \               reduce using rule 89 (expression -> : .)
    ^               reduce using rule 89 (expression -> : .)
    DOTTIMES        reduce using rule 89 (expression -> : .)
    DOTDIVIDE       reduce using rule 89 (expression -> : .)
    DOTRDIVIDE      reduce using rule 89 (expression -> : .)
    DOTPOWER        reduce using rule 89 (expression -> : .)
    NOTEQUAL        reduce using rule 89 (expression -> : .)
    ISEQUAL         reduce using rule 89 (expression -> : .)
    LESS            reduce using rule 89 (expression -> : .)
    GREATER         reduce using rule 89 (expression -> : .)
    LESSEQUAL       reduce using rule 89 (expression -> : .)
    GREATEREQUAL    reduce using rule 89 (expression -> : .)
    ELAND           reduce using rule 89 (expression -> : .)
    ELOR            reduce using rule 89 (expression -> : .)
    AND             reduce using rule 89 (expression -> : .)
    OR              reduce using rule 89 (expression -> : .)
    CONJTRANS       reduce using rule 89 (expression -> : .)
    TRANS           reduce using rule 89 (expression -> : .)
    :               reduce using rule 89 (expression -> : .)
    COMMA           reduce using rule 89 (expression -> : .)

  ! RPAREN          [ reduce using rule 89 (expression -> : .) ]


state 132

    (66) expression -> expression NOTEQUAL expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RBRACKET        reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    COMMA           reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    SEMICOLON       reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    NEWLINE         reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    LAMBDA          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    NOT             reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    LPAREN          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    NAME            reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    LCURLY          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    STRING          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    NUMBER          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    LBRACKET        reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    RCURLY          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    FUNCTION        reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    FOR             reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    WHILE           reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    IF              reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    ELSEIF          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    ELSE            reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    BREAK           reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    CONTINUE        reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    RETURN          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    SWITCH          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    CASE            reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    OTHERWISE       reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    GLOBAL          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    PERSISTENT      reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    TRY             reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    CATCH           reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    END             reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    $end            reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! +               [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! -               [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! *               [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! /               [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! \               [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! ^               [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! DOTTIMES        [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! DOTDIVIDE       [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! DOTPOWER        [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! ISEQUAL         [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! LESS            [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! GREATER         [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! LESSEQUAL       [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! GREATEREQUAL    [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! ELAND           [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! ELOR            [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! AND             [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! OR              [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! CONJTRANS       [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! TRANS           [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! :               [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]


state 133

    (72) expression -> expression ELAND expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RBRACKET        reduce using rule 72 (expression -> expression ELAND expression .)
    COMMA           reduce using rule 72 (expression -> expression ELAND expression .)
    SEMICOLON       reduce using rule 72 (expression -> expression ELAND expression .)
    NEWLINE         reduce using rule 72 (expression -> expression ELAND expression .)
    LAMBDA          reduce using rule 72 (expression -> expression ELAND expression .)
    NOT             reduce using rule 72 (expression -> expression ELAND expression .)
    LPAREN          reduce using rule 72 (expression -> expression ELAND expression .)
    NAME            reduce using rule 72 (expression -> expression ELAND expression .)
    LCURLY          reduce using rule 72 (expression -> expression ELAND expression .)
    STRING          reduce using rule 72 (expression -> expression ELAND expression .)
    NUMBER          reduce using rule 72 (expression -> expression ELAND expression .)
    LBRACKET        reduce using rule 72 (expression -> expression ELAND expression .)
    RCURLY          reduce using rule 72 (expression -> expression ELAND expression .)
    FUNCTION        reduce using rule 72 (expression -> expression ELAND expression .)
    FOR             reduce using rule 72 (expression -> expression ELAND expression .)
    WHILE           reduce using rule 72 (expression -> expression ELAND expression .)
    IF              reduce using rule 72 (expression -> expression ELAND expression .)
    ELSEIF          reduce using rule 72 (expression -> expression ELAND expression .)
    ELSE            reduce using rule 72 (expression -> expression ELAND expression .)
    BREAK           reduce using rule 72 (expression -> expression ELAND expression .)
    CONTINUE        reduce using rule 72 (expression -> expression ELAND expression .)
    RETURN          reduce using rule 72 (expression -> expression ELAND expression .)
    SWITCH          reduce using rule 72 (expression -> expression ELAND expression .)
    CASE            reduce using rule 72 (expression -> expression ELAND expression .)
    OTHERWISE       reduce using rule 72 (expression -> expression ELAND expression .)
    GLOBAL          reduce using rule 72 (expression -> expression ELAND expression .)
    PERSISTENT      reduce using rule 72 (expression -> expression ELAND expression .)
    TRY             reduce using rule 72 (expression -> expression ELAND expression .)
    CATCH           reduce using rule 72 (expression -> expression ELAND expression .)
    END             reduce using rule 72 (expression -> expression ELAND expression .)
    $end            reduce using rule 72 (expression -> expression ELAND expression .)
    RPAREN          reduce using rule 72 (expression -> expression ELAND expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! +               [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! -               [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! *               [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! /               [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! \               [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! ^               [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! DOTTIMES        [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! DOTDIVIDE       [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! DOTPOWER        [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! NOTEQUAL        [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! ISEQUAL         [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! LESS            [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! GREATER         [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! LESSEQUAL       [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! GREATEREQUAL    [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! ELAND           [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! ELOR            [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! AND             [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! OR              [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! CONJTRANS       [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! TRANS           [ reduce using rule 72 (expression -> expression ELAND expression .) ]
  ! :               [ reduce using rule 72 (expression -> expression ELAND expression .) ]


state 134

    (73) expression -> expression ELOR expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RBRACKET        reduce using rule 73 (expression -> expression ELOR expression .)
    COMMA           reduce using rule 73 (expression -> expression ELOR expression .)
    SEMICOLON       reduce using rule 73 (expression -> expression ELOR expression .)
    NEWLINE         reduce using rule 73 (expression -> expression ELOR expression .)
    LAMBDA          reduce using rule 73 (expression -> expression ELOR expression .)
    NOT             reduce using rule 73 (expression -> expression ELOR expression .)
    LPAREN          reduce using rule 73 (expression -> expression ELOR expression .)
    NAME            reduce using rule 73 (expression -> expression ELOR expression .)
    LCURLY          reduce using rule 73 (expression -> expression ELOR expression .)
    STRING          reduce using rule 73 (expression -> expression ELOR expression .)
    NUMBER          reduce using rule 73 (expression -> expression ELOR expression .)
    LBRACKET        reduce using rule 73 (expression -> expression ELOR expression .)
    RCURLY          reduce using rule 73 (expression -> expression ELOR expression .)
    FUNCTION        reduce using rule 73 (expression -> expression ELOR expression .)
    FOR             reduce using rule 73 (expression -> expression ELOR expression .)
    WHILE           reduce using rule 73 (expression -> expression ELOR expression .)
    IF              reduce using rule 73 (expression -> expression ELOR expression .)
    ELSEIF          reduce using rule 73 (expression -> expression ELOR expression .)
    ELSE            reduce using rule 73 (expression -> expression ELOR expression .)
    BREAK           reduce using rule 73 (expression -> expression ELOR expression .)
    CONTINUE        reduce using rule 73 (expression -> expression ELOR expression .)
    RETURN          reduce using rule 73 (expression -> expression ELOR expression .)
    SWITCH          reduce using rule 73 (expression -> expression ELOR expression .)
    CASE            reduce using rule 73 (expression -> expression ELOR expression .)
    OTHERWISE       reduce using rule 73 (expression -> expression ELOR expression .)
    GLOBAL          reduce using rule 73 (expression -> expression ELOR expression .)
    PERSISTENT      reduce using rule 73 (expression -> expression ELOR expression .)
    TRY             reduce using rule 73 (expression -> expression ELOR expression .)
    CATCH           reduce using rule 73 (expression -> expression ELOR expression .)
    END             reduce using rule 73 (expression -> expression ELOR expression .)
    $end            reduce using rule 73 (expression -> expression ELOR expression .)
    RPAREN          reduce using rule 73 (expression -> expression ELOR expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! +               [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! -               [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! *               [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! /               [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! \               [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! ^               [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! DOTTIMES        [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! DOTDIVIDE       [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! DOTPOWER        [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! NOTEQUAL        [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! ISEQUAL         [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! LESS            [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! GREATER         [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! LESSEQUAL       [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! GREATEREQUAL    [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! ELAND           [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! ELOR            [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! AND             [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! OR              [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! CONJTRANS       [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! TRANS           [ reduce using rule 73 (expression -> expression ELOR expression .) ]
  ! :               [ reduce using rule 73 (expression -> expression ELOR expression .) ]


state 135

    (68) expression -> expression LESS expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    \               reduce using rule 68 (expression -> expression LESS expression .)
    DOTRDIVIDE      reduce using rule 68 (expression -> expression LESS expression .)
    NOTEQUAL        reduce using rule 68 (expression -> expression LESS expression .)
    ISEQUAL         reduce using rule 68 (expression -> expression LESS expression .)
    LESS            reduce using rule 68 (expression -> expression LESS expression .)
    GREATER         reduce using rule 68 (expression -> expression LESS expression .)
    LESSEQUAL       reduce using rule 68 (expression -> expression LESS expression .)
    GREATEREQUAL    reduce using rule 68 (expression -> expression LESS expression .)
    ELAND           reduce using rule 68 (expression -> expression LESS expression .)
    ELOR            reduce using rule 68 (expression -> expression LESS expression .)
    AND             reduce using rule 68 (expression -> expression LESS expression .)
    OR              reduce using rule 68 (expression -> expression LESS expression .)
    CONJTRANS       reduce using rule 68 (expression -> expression LESS expression .)
    TRANS           reduce using rule 68 (expression -> expression LESS expression .)
    :               reduce using rule 68 (expression -> expression LESS expression .)
    RBRACKET        reduce using rule 68 (expression -> expression LESS expression .)
    COMMA           reduce using rule 68 (expression -> expression LESS expression .)
    SEMICOLON       reduce using rule 68 (expression -> expression LESS expression .)
    NEWLINE         reduce using rule 68 (expression -> expression LESS expression .)
    LAMBDA          reduce using rule 68 (expression -> expression LESS expression .)
    NOT             reduce using rule 68 (expression -> expression LESS expression .)
    LPAREN          reduce using rule 68 (expression -> expression LESS expression .)
    NAME            reduce using rule 68 (expression -> expression LESS expression .)
    LCURLY          reduce using rule 68 (expression -> expression LESS expression .)
    STRING          reduce using rule 68 (expression -> expression LESS expression .)
    NUMBER          reduce using rule 68 (expression -> expression LESS expression .)
    LBRACKET        reduce using rule 68 (expression -> expression LESS expression .)
    RCURLY          reduce using rule 68 (expression -> expression LESS expression .)
    FUNCTION        reduce using rule 68 (expression -> expression LESS expression .)
    FOR             reduce using rule 68 (expression -> expression LESS expression .)
    WHILE           reduce using rule 68 (expression -> expression LESS expression .)
    IF              reduce using rule 68 (expression -> expression LESS expression .)
    ELSEIF          reduce using rule 68 (expression -> expression LESS expression .)
    ELSE            reduce using rule 68 (expression -> expression LESS expression .)
    BREAK           reduce using rule 68 (expression -> expression LESS expression .)
    CONTINUE        reduce using rule 68 (expression -> expression LESS expression .)
    RETURN          reduce using rule 68 (expression -> expression LESS expression .)
    SWITCH          reduce using rule 68 (expression -> expression LESS expression .)
    CASE            reduce using rule 68 (expression -> expression LESS expression .)
    OTHERWISE       reduce using rule 68 (expression -> expression LESS expression .)
    GLOBAL          reduce using rule 68 (expression -> expression LESS expression .)
    PERSISTENT      reduce using rule 68 (expression -> expression LESS expression .)
    TRY             reduce using rule 68 (expression -> expression LESS expression .)
    CATCH           reduce using rule 68 (expression -> expression LESS expression .)
    END             reduce using rule 68 (expression -> expression LESS expression .)
    $end            reduce using rule 68 (expression -> expression LESS expression .)
    RPAREN          reduce using rule 68 (expression -> expression LESS expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTPOWER        shift and go to state 97

  ! +               [ reduce using rule 68 (expression -> expression LESS expression .) ]
  ! -               [ reduce using rule 68 (expression -> expression LESS expression .) ]
  ! *               [ reduce using rule 68 (expression -> expression LESS expression .) ]
  ! /               [ reduce using rule 68 (expression -> expression LESS expression .) ]
  ! ^               [ reduce using rule 68 (expression -> expression LESS expression .) ]
  ! DOTTIMES        [ reduce using rule 68 (expression -> expression LESS expression .) ]
  ! DOTDIVIDE       [ reduce using rule 68 (expression -> expression LESS expression .) ]
  ! DOTPOWER        [ reduce using rule 68 (expression -> expression LESS expression .) ]
  ! \               [ shift and go to state 93 ]
  ! DOTRDIVIDE      [ shift and go to state 82 ]
  ! NOTEQUAL        [ shift and go to state 77 ]
  ! ISEQUAL         [ shift and go to state 98 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 96 ]
  ! LESSEQUAL       [ shift and go to state 91 ]
  ! GREATEREQUAL    [ shift and go to state 81 ]
  ! ELAND           [ shift and go to state 78 ]
  ! ELOR            [ shift and go to state 79 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 99 ]
  ! CONJTRANS       [ shift and go to state 90 ]
  ! TRANS           [ shift and go to state 92 ]
  ! :               [ shift and go to state 88 ]


state 136

    (71) expression -> expression GREATEREQUAL expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RBRACKET        reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    COMMA           reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    SEMICOLON       reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    NEWLINE         reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    LAMBDA          reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    NOT             reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    LPAREN          reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    NAME            reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    LCURLY          reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    STRING          reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    NUMBER          reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    LBRACKET        reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    RCURLY          reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    FUNCTION        reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    FOR             reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    WHILE           reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    IF              reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    ELSEIF          reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    ELSE            reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    BREAK           reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    CONTINUE        reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    RETURN          reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    SWITCH          reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    CASE            reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    OTHERWISE       reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    GLOBAL          reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    PERSISTENT      reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    TRY             reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    CATCH           reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    END             reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    $end            reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    RPAREN          reduce using rule 71 (expression -> expression GREATEREQUAL expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! +               [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! -               [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! *               [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! /               [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! \               [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! ^               [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! DOTTIMES        [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! DOTDIVIDE       [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! DOTPOWER        [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! ISEQUAL         [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! LESS            [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! GREATER         [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! LESSEQUAL       [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! GREATEREQUAL    [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! ELAND           [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! ELOR            [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! AND             [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! OR              [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! CONJTRANS       [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! TRANS           [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]
  ! :               [ reduce using rule 71 (expression -> expression GREATEREQUAL expression .) ]


state 137

    (64) expression -> expression DOTRDIVIDE expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RBRACKET        reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    COMMA           reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    SEMICOLON       reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    NEWLINE         reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    LAMBDA          reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    NOT             reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    LPAREN          reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    NAME            reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    LCURLY          reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    STRING          reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    NUMBER          reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    LBRACKET        reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    RCURLY          reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    FUNCTION        reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    FOR             reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    WHILE           reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    IF              reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    ELSEIF          reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    ELSE            reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    BREAK           reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    CONTINUE        reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    RETURN          reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    SWITCH          reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    CASE            reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    OTHERWISE       reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    GLOBAL          reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    PERSISTENT      reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    TRY             reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    CATCH           reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    END             reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    $end            reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    RPAREN          reduce using rule 64 (expression -> expression DOTRDIVIDE expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! +               [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! -               [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! *               [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! /               [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! \               [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! ^               [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! DOTTIMES        [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! DOTDIVIDE       [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! DOTPOWER        [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! NOTEQUAL        [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! ISEQUAL         [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! LESS            [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! GREATER         [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! LESSEQUAL       [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! GREATEREQUAL    [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! ELAND           [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! ELOR            [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! OR              [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! CONJTRANS       [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! TRANS           [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]
  ! :               [ reduce using rule 64 (expression -> expression DOTRDIVIDE expression .) ]


state 138

    (56) expression -> expression + expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    +               reduce using rule 56 (expression -> expression + expression .)
    -               reduce using rule 56 (expression -> expression + expression .)
    \               reduce using rule 56 (expression -> expression + expression .)
    DOTRDIVIDE      reduce using rule 56 (expression -> expression + expression .)
    NOTEQUAL        reduce using rule 56 (expression -> expression + expression .)
    ISEQUAL         reduce using rule 56 (expression -> expression + expression .)
    LESS            reduce using rule 56 (expression -> expression + expression .)
    GREATER         reduce using rule 56 (expression -> expression + expression .)
    LESSEQUAL       reduce using rule 56 (expression -> expression + expression .)
    GREATEREQUAL    reduce using rule 56 (expression -> expression + expression .)
    ELAND           reduce using rule 56 (expression -> expression + expression .)
    ELOR            reduce using rule 56 (expression -> expression + expression .)
    AND             reduce using rule 56 (expression -> expression + expression .)
    OR              reduce using rule 56 (expression -> expression + expression .)
    CONJTRANS       reduce using rule 56 (expression -> expression + expression .)
    TRANS           reduce using rule 56 (expression -> expression + expression .)
    :               reduce using rule 56 (expression -> expression + expression .)
    RBRACKET        reduce using rule 56 (expression -> expression + expression .)
    COMMA           reduce using rule 56 (expression -> expression + expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression + expression .)
    NEWLINE         reduce using rule 56 (expression -> expression + expression .)
    LAMBDA          reduce using rule 56 (expression -> expression + expression .)
    NOT             reduce using rule 56 (expression -> expression + expression .)
    LPAREN          reduce using rule 56 (expression -> expression + expression .)
    NAME            reduce using rule 56 (expression -> expression + expression .)
    LCURLY          reduce using rule 56 (expression -> expression + expression .)
    STRING          reduce using rule 56 (expression -> expression + expression .)
    NUMBER          reduce using rule 56 (expression -> expression + expression .)
    LBRACKET        reduce using rule 56 (expression -> expression + expression .)
    RCURLY          reduce using rule 56 (expression -> expression + expression .)
    FUNCTION        reduce using rule 56 (expression -> expression + expression .)
    FOR             reduce using rule 56 (expression -> expression + expression .)
    WHILE           reduce using rule 56 (expression -> expression + expression .)
    IF              reduce using rule 56 (expression -> expression + expression .)
    ELSEIF          reduce using rule 56 (expression -> expression + expression .)
    ELSE            reduce using rule 56 (expression -> expression + expression .)
    BREAK           reduce using rule 56 (expression -> expression + expression .)
    CONTINUE        reduce using rule 56 (expression -> expression + expression .)
    RETURN          reduce using rule 56 (expression -> expression + expression .)
    SWITCH          reduce using rule 56 (expression -> expression + expression .)
    CASE            reduce using rule 56 (expression -> expression + expression .)
    OTHERWISE       reduce using rule 56 (expression -> expression + expression .)
    GLOBAL          reduce using rule 56 (expression -> expression + expression .)
    PERSISTENT      reduce using rule 56 (expression -> expression + expression .)
    TRY             reduce using rule 56 (expression -> expression + expression .)
    CATCH           reduce using rule 56 (expression -> expression + expression .)
    END             reduce using rule 56 (expression -> expression + expression .)
    $end            reduce using rule 56 (expression -> expression + expression .)
    RPAREN          reduce using rule 56 (expression -> expression + expression .)
    *               shift and go to state 84
    /               shift and go to state 86
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTPOWER        shift and go to state 97

  ! *               [ reduce using rule 56 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression + expression .) ]
  ! ^               [ reduce using rule 56 (expression -> expression + expression .) ]
  ! DOTTIMES        [ reduce using rule 56 (expression -> expression + expression .) ]
  ! DOTDIVIDE       [ reduce using rule 56 (expression -> expression + expression .) ]
  ! DOTPOWER        [ reduce using rule 56 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 83 ]
  ! -               [ shift and go to state 85 ]
  ! \               [ shift and go to state 93 ]
  ! DOTRDIVIDE      [ shift and go to state 82 ]
  ! NOTEQUAL        [ shift and go to state 77 ]
  ! ISEQUAL         [ shift and go to state 98 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 96 ]
  ! LESSEQUAL       [ shift and go to state 91 ]
  ! GREATEREQUAL    [ shift and go to state 81 ]
  ! ELAND           [ shift and go to state 78 ]
  ! ELOR            [ shift and go to state 79 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 99 ]
  ! CONJTRANS       [ shift and go to state 90 ]
  ! TRANS           [ shift and go to state 92 ]
  ! :               [ shift and go to state 88 ]


state 139

    (58) expression -> expression * expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    +               reduce using rule 58 (expression -> expression * expression .)
    -               reduce using rule 58 (expression -> expression * expression .)
    *               reduce using rule 58 (expression -> expression * expression .)
    /               reduce using rule 58 (expression -> expression * expression .)
    \               reduce using rule 58 (expression -> expression * expression .)
    DOTTIMES        reduce using rule 58 (expression -> expression * expression .)
    DOTDIVIDE       reduce using rule 58 (expression -> expression * expression .)
    DOTRDIVIDE      reduce using rule 58 (expression -> expression * expression .)
    NOTEQUAL        reduce using rule 58 (expression -> expression * expression .)
    ISEQUAL         reduce using rule 58 (expression -> expression * expression .)
    LESS            reduce using rule 58 (expression -> expression * expression .)
    GREATER         reduce using rule 58 (expression -> expression * expression .)
    LESSEQUAL       reduce using rule 58 (expression -> expression * expression .)
    GREATEREQUAL    reduce using rule 58 (expression -> expression * expression .)
    ELAND           reduce using rule 58 (expression -> expression * expression .)
    ELOR            reduce using rule 58 (expression -> expression * expression .)
    AND             reduce using rule 58 (expression -> expression * expression .)
    OR              reduce using rule 58 (expression -> expression * expression .)
    CONJTRANS       reduce using rule 58 (expression -> expression * expression .)
    TRANS           reduce using rule 58 (expression -> expression * expression .)
    :               reduce using rule 58 (expression -> expression * expression .)
    RBRACKET        reduce using rule 58 (expression -> expression * expression .)
    COMMA           reduce using rule 58 (expression -> expression * expression .)
    SEMICOLON       reduce using rule 58 (expression -> expression * expression .)
    NEWLINE         reduce using rule 58 (expression -> expression * expression .)
    LAMBDA          reduce using rule 58 (expression -> expression * expression .)
    NOT             reduce using rule 58 (expression -> expression * expression .)
    LPAREN          reduce using rule 58 (expression -> expression * expression .)
    NAME            reduce using rule 58 (expression -> expression * expression .)
    LCURLY          reduce using rule 58 (expression -> expression * expression .)
    STRING          reduce using rule 58 (expression -> expression * expression .)
    NUMBER          reduce using rule 58 (expression -> expression * expression .)
    LBRACKET        reduce using rule 58 (expression -> expression * expression .)
    RCURLY          reduce using rule 58 (expression -> expression * expression .)
    FUNCTION        reduce using rule 58 (expression -> expression * expression .)
    FOR             reduce using rule 58 (expression -> expression * expression .)
    WHILE           reduce using rule 58 (expression -> expression * expression .)
    IF              reduce using rule 58 (expression -> expression * expression .)
    ELSEIF          reduce using rule 58 (expression -> expression * expression .)
    ELSE            reduce using rule 58 (expression -> expression * expression .)
    BREAK           reduce using rule 58 (expression -> expression * expression .)
    CONTINUE        reduce using rule 58 (expression -> expression * expression .)
    RETURN          reduce using rule 58 (expression -> expression * expression .)
    SWITCH          reduce using rule 58 (expression -> expression * expression .)
    CASE            reduce using rule 58 (expression -> expression * expression .)
    OTHERWISE       reduce using rule 58 (expression -> expression * expression .)
    GLOBAL          reduce using rule 58 (expression -> expression * expression .)
    PERSISTENT      reduce using rule 58 (expression -> expression * expression .)
    TRY             reduce using rule 58 (expression -> expression * expression .)
    CATCH           reduce using rule 58 (expression -> expression * expression .)
    END             reduce using rule 58 (expression -> expression * expression .)
    $end            reduce using rule 58 (expression -> expression * expression .)
    RPAREN          reduce using rule 58 (expression -> expression * expression .)
    ^               shift and go to state 94
    DOTPOWER        shift and go to state 97

  ! ^               [ reduce using rule 58 (expression -> expression * expression .) ]
  ! DOTPOWER        [ reduce using rule 58 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 83 ]
  ! -               [ shift and go to state 85 ]
  ! *               [ shift and go to state 84 ]
  ! /               [ shift and go to state 86 ]
  ! \               [ shift and go to state 93 ]
  ! DOTTIMES        [ shift and go to state 89 ]
  ! DOTDIVIDE       [ shift and go to state 87 ]
  ! DOTRDIVIDE      [ shift and go to state 82 ]
  ! NOTEQUAL        [ shift and go to state 77 ]
  ! ISEQUAL         [ shift and go to state 98 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 96 ]
  ! LESSEQUAL       [ shift and go to state 91 ]
  ! GREATEREQUAL    [ shift and go to state 81 ]
  ! ELAND           [ shift and go to state 78 ]
  ! ELOR            [ shift and go to state 79 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 99 ]
  ! CONJTRANS       [ shift and go to state 90 ]
  ! TRANS           [ shift and go to state 92 ]
  ! :               [ shift and go to state 88 ]


state 140

    (57) expression -> expression - expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    +               reduce using rule 57 (expression -> expression - expression .)
    -               reduce using rule 57 (expression -> expression - expression .)
    \               reduce using rule 57 (expression -> expression - expression .)
    DOTRDIVIDE      reduce using rule 57 (expression -> expression - expression .)
    NOTEQUAL        reduce using rule 57 (expression -> expression - expression .)
    ISEQUAL         reduce using rule 57 (expression -> expression - expression .)
    LESS            reduce using rule 57 (expression -> expression - expression .)
    GREATER         reduce using rule 57 (expression -> expression - expression .)
    LESSEQUAL       reduce using rule 57 (expression -> expression - expression .)
    GREATEREQUAL    reduce using rule 57 (expression -> expression - expression .)
    ELAND           reduce using rule 57 (expression -> expression - expression .)
    ELOR            reduce using rule 57 (expression -> expression - expression .)
    AND             reduce using rule 57 (expression -> expression - expression .)
    OR              reduce using rule 57 (expression -> expression - expression .)
    CONJTRANS       reduce using rule 57 (expression -> expression - expression .)
    TRANS           reduce using rule 57 (expression -> expression - expression .)
    :               reduce using rule 57 (expression -> expression - expression .)
    RBRACKET        reduce using rule 57 (expression -> expression - expression .)
    COMMA           reduce using rule 57 (expression -> expression - expression .)
    SEMICOLON       reduce using rule 57 (expression -> expression - expression .)
    NEWLINE         reduce using rule 57 (expression -> expression - expression .)
    LAMBDA          reduce using rule 57 (expression -> expression - expression .)
    NOT             reduce using rule 57 (expression -> expression - expression .)
    LPAREN          reduce using rule 57 (expression -> expression - expression .)
    NAME            reduce using rule 57 (expression -> expression - expression .)
    LCURLY          reduce using rule 57 (expression -> expression - expression .)
    STRING          reduce using rule 57 (expression -> expression - expression .)
    NUMBER          reduce using rule 57 (expression -> expression - expression .)
    LBRACKET        reduce using rule 57 (expression -> expression - expression .)
    RCURLY          reduce using rule 57 (expression -> expression - expression .)
    FUNCTION        reduce using rule 57 (expression -> expression - expression .)
    FOR             reduce using rule 57 (expression -> expression - expression .)
    WHILE           reduce using rule 57 (expression -> expression - expression .)
    IF              reduce using rule 57 (expression -> expression - expression .)
    ELSEIF          reduce using rule 57 (expression -> expression - expression .)
    ELSE            reduce using rule 57 (expression -> expression - expression .)
    BREAK           reduce using rule 57 (expression -> expression - expression .)
    CONTINUE        reduce using rule 57 (expression -> expression - expression .)
    RETURN          reduce using rule 57 (expression -> expression - expression .)
    SWITCH          reduce using rule 57 (expression -> expression - expression .)
    CASE            reduce using rule 57 (expression -> expression - expression .)
    OTHERWISE       reduce using rule 57 (expression -> expression - expression .)
    GLOBAL          reduce using rule 57 (expression -> expression - expression .)
    PERSISTENT      reduce using rule 57 (expression -> expression - expression .)
    TRY             reduce using rule 57 (expression -> expression - expression .)
    CATCH           reduce using rule 57 (expression -> expression - expression .)
    END             reduce using rule 57 (expression -> expression - expression .)
    $end            reduce using rule 57 (expression -> expression - expression .)
    RPAREN          reduce using rule 57 (expression -> expression - expression .)
    *               shift and go to state 84
    /               shift and go to state 86
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTPOWER        shift and go to state 97

  ! *               [ reduce using rule 57 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression - expression .) ]
  ! ^               [ reduce using rule 57 (expression -> expression - expression .) ]
  ! DOTTIMES        [ reduce using rule 57 (expression -> expression - expression .) ]
  ! DOTDIVIDE       [ reduce using rule 57 (expression -> expression - expression .) ]
  ! DOTPOWER        [ reduce using rule 57 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 83 ]
  ! -               [ shift and go to state 85 ]
  ! \               [ shift and go to state 93 ]
  ! DOTRDIVIDE      [ shift and go to state 82 ]
  ! NOTEQUAL        [ shift and go to state 77 ]
  ! ISEQUAL         [ shift and go to state 98 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 96 ]
  ! LESSEQUAL       [ shift and go to state 91 ]
  ! GREATEREQUAL    [ shift and go to state 81 ]
  ! ELAND           [ shift and go to state 78 ]
  ! ELOR            [ shift and go to state 79 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 99 ]
  ! CONJTRANS       [ shift and go to state 90 ]
  ! TRANS           [ shift and go to state 92 ]
  ! :               [ shift and go to state 88 ]


state 141

    (59) expression -> expression / expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    +               reduce using rule 59 (expression -> expression / expression .)
    -               reduce using rule 59 (expression -> expression / expression .)
    *               reduce using rule 59 (expression -> expression / expression .)
    /               reduce using rule 59 (expression -> expression / expression .)
    \               reduce using rule 59 (expression -> expression / expression .)
    DOTTIMES        reduce using rule 59 (expression -> expression / expression .)
    DOTDIVIDE       reduce using rule 59 (expression -> expression / expression .)
    DOTRDIVIDE      reduce using rule 59 (expression -> expression / expression .)
    NOTEQUAL        reduce using rule 59 (expression -> expression / expression .)
    ISEQUAL         reduce using rule 59 (expression -> expression / expression .)
    LESS            reduce using rule 59 (expression -> expression / expression .)
    GREATER         reduce using rule 59 (expression -> expression / expression .)
    LESSEQUAL       reduce using rule 59 (expression -> expression / expression .)
    GREATEREQUAL    reduce using rule 59 (expression -> expression / expression .)
    ELAND           reduce using rule 59 (expression -> expression / expression .)
    ELOR            reduce using rule 59 (expression -> expression / expression .)
    AND             reduce using rule 59 (expression -> expression / expression .)
    OR              reduce using rule 59 (expression -> expression / expression .)
    CONJTRANS       reduce using rule 59 (expression -> expression / expression .)
    TRANS           reduce using rule 59 (expression -> expression / expression .)
    :               reduce using rule 59 (expression -> expression / expression .)
    RBRACKET        reduce using rule 59 (expression -> expression / expression .)
    COMMA           reduce using rule 59 (expression -> expression / expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression / expression .)
    NEWLINE         reduce using rule 59 (expression -> expression / expression .)
    LAMBDA          reduce using rule 59 (expression -> expression / expression .)
    NOT             reduce using rule 59 (expression -> expression / expression .)
    LPAREN          reduce using rule 59 (expression -> expression / expression .)
    NAME            reduce using rule 59 (expression -> expression / expression .)
    LCURLY          reduce using rule 59 (expression -> expression / expression .)
    STRING          reduce using rule 59 (expression -> expression / expression .)
    NUMBER          reduce using rule 59 (expression -> expression / expression .)
    LBRACKET        reduce using rule 59 (expression -> expression / expression .)
    RCURLY          reduce using rule 59 (expression -> expression / expression .)
    FUNCTION        reduce using rule 59 (expression -> expression / expression .)
    FOR             reduce using rule 59 (expression -> expression / expression .)
    WHILE           reduce using rule 59 (expression -> expression / expression .)
    IF              reduce using rule 59 (expression -> expression / expression .)
    ELSEIF          reduce using rule 59 (expression -> expression / expression .)
    ELSE            reduce using rule 59 (expression -> expression / expression .)
    BREAK           reduce using rule 59 (expression -> expression / expression .)
    CONTINUE        reduce using rule 59 (expression -> expression / expression .)
    RETURN          reduce using rule 59 (expression -> expression / expression .)
    SWITCH          reduce using rule 59 (expression -> expression / expression .)
    CASE            reduce using rule 59 (expression -> expression / expression .)
    OTHERWISE       reduce using rule 59 (expression -> expression / expression .)
    GLOBAL          reduce using rule 59 (expression -> expression / expression .)
    PERSISTENT      reduce using rule 59 (expression -> expression / expression .)
    TRY             reduce using rule 59 (expression -> expression / expression .)
    CATCH           reduce using rule 59 (expression -> expression / expression .)
    END             reduce using rule 59 (expression -> expression / expression .)
    $end            reduce using rule 59 (expression -> expression / expression .)
    RPAREN          reduce using rule 59 (expression -> expression / expression .)
    ^               shift and go to state 94
    DOTPOWER        shift and go to state 97

  ! ^               [ reduce using rule 59 (expression -> expression / expression .) ]
  ! DOTPOWER        [ reduce using rule 59 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 83 ]
  ! -               [ shift and go to state 85 ]
  ! *               [ shift and go to state 84 ]
  ! /               [ shift and go to state 86 ]
  ! \               [ shift and go to state 93 ]
  ! DOTTIMES        [ shift and go to state 89 ]
  ! DOTDIVIDE       [ shift and go to state 87 ]
  ! DOTRDIVIDE      [ shift and go to state 82 ]
  ! NOTEQUAL        [ shift and go to state 77 ]
  ! ISEQUAL         [ shift and go to state 98 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 96 ]
  ! LESSEQUAL       [ shift and go to state 91 ]
  ! GREATEREQUAL    [ shift and go to state 81 ]
  ! ELAND           [ shift and go to state 78 ]
  ! ELOR            [ shift and go to state 79 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 99 ]
  ! CONJTRANS       [ shift and go to state 90 ]
  ! TRANS           [ shift and go to state 92 ]
  ! :               [ shift and go to state 88 ]


state 142

    (63) expression -> expression DOTDIVIDE expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    +               reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    -               reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    *               reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    /               reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    \               reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    DOTTIMES        reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    DOTDIVIDE       reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    DOTRDIVIDE      reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    NOTEQUAL        reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    ISEQUAL         reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    LESS            reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    GREATER         reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    LESSEQUAL       reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    GREATEREQUAL    reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    ELAND           reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    ELOR            reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    AND             reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    OR              reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    CONJTRANS       reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    TRANS           reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    :               reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    RBRACKET        reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    COMMA           reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    SEMICOLON       reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    NEWLINE         reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    LAMBDA          reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    NOT             reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    LPAREN          reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    NAME            reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    LCURLY          reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    STRING          reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    NUMBER          reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    LBRACKET        reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    RCURLY          reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    FUNCTION        reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    FOR             reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    WHILE           reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    IF              reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    ELSEIF          reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    ELSE            reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    BREAK           reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    CONTINUE        reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    RETURN          reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    SWITCH          reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    CASE            reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    OTHERWISE       reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    GLOBAL          reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    PERSISTENT      reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    TRY             reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    CATCH           reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    END             reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    $end            reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    RPAREN          reduce using rule 63 (expression -> expression DOTDIVIDE expression .)
    ^               shift and go to state 94
    DOTPOWER        shift and go to state 97

  ! ^               [ reduce using rule 63 (expression -> expression DOTDIVIDE expression .) ]
  ! DOTPOWER        [ reduce using rule 63 (expression -> expression DOTDIVIDE expression .) ]
  ! +               [ shift and go to state 83 ]
  ! -               [ shift and go to state 85 ]
  ! *               [ shift and go to state 84 ]
  ! /               [ shift and go to state 86 ]
  ! \               [ shift and go to state 93 ]
  ! DOTTIMES        [ shift and go to state 89 ]
  ! DOTDIVIDE       [ shift and go to state 87 ]
  ! DOTRDIVIDE      [ shift and go to state 82 ]
  ! NOTEQUAL        [ shift and go to state 77 ]
  ! ISEQUAL         [ shift and go to state 98 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 96 ]
  ! LESSEQUAL       [ shift and go to state 91 ]
  ! GREATEREQUAL    [ shift and go to state 81 ]
  ! ELAND           [ shift and go to state 78 ]
  ! ELOR            [ shift and go to state 79 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 99 ]
  ! CONJTRANS       [ shift and go to state 90 ]
  ! TRANS           [ shift and go to state 92 ]
  ! :               [ shift and go to state 88 ]


state 143

    (100) slice -> expression : expression . : expression
    (101) slice -> expression : expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for : resolved as shift.
  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
    :               shift and go to state 167
    COMMA           reduce using rule 101 (slice -> expression : expression .)
    SEMICOLON       reduce using rule 101 (slice -> expression : expression .)
    FUNCTION        reduce using rule 101 (slice -> expression : expression .)
    FOR             reduce using rule 101 (slice -> expression : expression .)
    WHILE           reduce using rule 101 (slice -> expression : expression .)
    IF              reduce using rule 101 (slice -> expression : expression .)
    ELSEIF          reduce using rule 101 (slice -> expression : expression .)
    ELSE            reduce using rule 101 (slice -> expression : expression .)
    BREAK           reduce using rule 101 (slice -> expression : expression .)
    CONTINUE        reduce using rule 101 (slice -> expression : expression .)
    RETURN          reduce using rule 101 (slice -> expression : expression .)
    SWITCH          reduce using rule 101 (slice -> expression : expression .)
    CASE            reduce using rule 101 (slice -> expression : expression .)
    OTHERWISE       reduce using rule 101 (slice -> expression : expression .)
    GLOBAL          reduce using rule 101 (slice -> expression : expression .)
    PERSISTENT      reduce using rule 101 (slice -> expression : expression .)
    TRY             reduce using rule 101 (slice -> expression : expression .)
    CATCH           reduce using rule 101 (slice -> expression : expression .)
    END             reduce using rule 101 (slice -> expression : expression .)
    NAME            reduce using rule 101 (slice -> expression : expression .)
    LAMBDA          reduce using rule 101 (slice -> expression : expression .)
    NOT             reduce using rule 101 (slice -> expression : expression .)
    LPAREN          reduce using rule 101 (slice -> expression : expression .)
    LCURLY          reduce using rule 101 (slice -> expression : expression .)
    STRING          reduce using rule 101 (slice -> expression : expression .)
    NUMBER          reduce using rule 101 (slice -> expression : expression .)
    LBRACKET        reduce using rule 101 (slice -> expression : expression .)
    $end            reduce using rule 101 (slice -> expression : expression .)
    RBRACKET        reduce using rule 101 (slice -> expression : expression .)
    NEWLINE         reduce using rule 101 (slice -> expression : expression .)
    RCURLY          reduce using rule 101 (slice -> expression : expression .)
    RPAREN          reduce using rule 101 (slice -> expression : expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92

  ! +               [ reduce using rule 101 (slice -> expression : expression .) ]
  ! -               [ reduce using rule 101 (slice -> expression : expression .) ]
  ! *               [ reduce using rule 101 (slice -> expression : expression .) ]
  ! /               [ reduce using rule 101 (slice -> expression : expression .) ]
  ! \               [ reduce using rule 101 (slice -> expression : expression .) ]
  ! ^               [ reduce using rule 101 (slice -> expression : expression .) ]
  ! DOTTIMES        [ reduce using rule 101 (slice -> expression : expression .) ]
  ! DOTDIVIDE       [ reduce using rule 101 (slice -> expression : expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 101 (slice -> expression : expression .) ]
  ! DOTPOWER        [ reduce using rule 101 (slice -> expression : expression .) ]
  ! NOTEQUAL        [ reduce using rule 101 (slice -> expression : expression .) ]
  ! ISEQUAL         [ reduce using rule 101 (slice -> expression : expression .) ]
  ! LESS            [ reduce using rule 101 (slice -> expression : expression .) ]
  ! GREATER         [ reduce using rule 101 (slice -> expression : expression .) ]
  ! LESSEQUAL       [ reduce using rule 101 (slice -> expression : expression .) ]
  ! GREATEREQUAL    [ reduce using rule 101 (slice -> expression : expression .) ]
  ! ELAND           [ reduce using rule 101 (slice -> expression : expression .) ]
  ! ELOR            [ reduce using rule 101 (slice -> expression : expression .) ]
  ! AND             [ reduce using rule 101 (slice -> expression : expression .) ]
  ! OR              [ reduce using rule 101 (slice -> expression : expression .) ]
  ! CONJTRANS       [ reduce using rule 101 (slice -> expression : expression .) ]
  ! TRANS           [ reduce using rule 101 (slice -> expression : expression .) ]
  ! :               [ reduce using rule 101 (slice -> expression : expression .) ]


state 144

    (62) expression -> expression DOTTIMES expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    +               reduce using rule 62 (expression -> expression DOTTIMES expression .)
    -               reduce using rule 62 (expression -> expression DOTTIMES expression .)
    *               reduce using rule 62 (expression -> expression DOTTIMES expression .)
    /               reduce using rule 62 (expression -> expression DOTTIMES expression .)
    \               reduce using rule 62 (expression -> expression DOTTIMES expression .)
    DOTTIMES        reduce using rule 62 (expression -> expression DOTTIMES expression .)
    DOTDIVIDE       reduce using rule 62 (expression -> expression DOTTIMES expression .)
    DOTRDIVIDE      reduce using rule 62 (expression -> expression DOTTIMES expression .)
    NOTEQUAL        reduce using rule 62 (expression -> expression DOTTIMES expression .)
    ISEQUAL         reduce using rule 62 (expression -> expression DOTTIMES expression .)
    LESS            reduce using rule 62 (expression -> expression DOTTIMES expression .)
    GREATER         reduce using rule 62 (expression -> expression DOTTIMES expression .)
    LESSEQUAL       reduce using rule 62 (expression -> expression DOTTIMES expression .)
    GREATEREQUAL    reduce using rule 62 (expression -> expression DOTTIMES expression .)
    ELAND           reduce using rule 62 (expression -> expression DOTTIMES expression .)
    ELOR            reduce using rule 62 (expression -> expression DOTTIMES expression .)
    AND             reduce using rule 62 (expression -> expression DOTTIMES expression .)
    OR              reduce using rule 62 (expression -> expression DOTTIMES expression .)
    CONJTRANS       reduce using rule 62 (expression -> expression DOTTIMES expression .)
    TRANS           reduce using rule 62 (expression -> expression DOTTIMES expression .)
    :               reduce using rule 62 (expression -> expression DOTTIMES expression .)
    RBRACKET        reduce using rule 62 (expression -> expression DOTTIMES expression .)
    COMMA           reduce using rule 62 (expression -> expression DOTTIMES expression .)
    SEMICOLON       reduce using rule 62 (expression -> expression DOTTIMES expression .)
    NEWLINE         reduce using rule 62 (expression -> expression DOTTIMES expression .)
    LAMBDA          reduce using rule 62 (expression -> expression DOTTIMES expression .)
    NOT             reduce using rule 62 (expression -> expression DOTTIMES expression .)
    LPAREN          reduce using rule 62 (expression -> expression DOTTIMES expression .)
    NAME            reduce using rule 62 (expression -> expression DOTTIMES expression .)
    LCURLY          reduce using rule 62 (expression -> expression DOTTIMES expression .)
    STRING          reduce using rule 62 (expression -> expression DOTTIMES expression .)
    NUMBER          reduce using rule 62 (expression -> expression DOTTIMES expression .)
    LBRACKET        reduce using rule 62 (expression -> expression DOTTIMES expression .)
    RCURLY          reduce using rule 62 (expression -> expression DOTTIMES expression .)
    FUNCTION        reduce using rule 62 (expression -> expression DOTTIMES expression .)
    FOR             reduce using rule 62 (expression -> expression DOTTIMES expression .)
    WHILE           reduce using rule 62 (expression -> expression DOTTIMES expression .)
    IF              reduce using rule 62 (expression -> expression DOTTIMES expression .)
    ELSEIF          reduce using rule 62 (expression -> expression DOTTIMES expression .)
    ELSE            reduce using rule 62 (expression -> expression DOTTIMES expression .)
    BREAK           reduce using rule 62 (expression -> expression DOTTIMES expression .)
    CONTINUE        reduce using rule 62 (expression -> expression DOTTIMES expression .)
    RETURN          reduce using rule 62 (expression -> expression DOTTIMES expression .)
    SWITCH          reduce using rule 62 (expression -> expression DOTTIMES expression .)
    CASE            reduce using rule 62 (expression -> expression DOTTIMES expression .)
    OTHERWISE       reduce using rule 62 (expression -> expression DOTTIMES expression .)
    GLOBAL          reduce using rule 62 (expression -> expression DOTTIMES expression .)
    PERSISTENT      reduce using rule 62 (expression -> expression DOTTIMES expression .)
    TRY             reduce using rule 62 (expression -> expression DOTTIMES expression .)
    CATCH           reduce using rule 62 (expression -> expression DOTTIMES expression .)
    END             reduce using rule 62 (expression -> expression DOTTIMES expression .)
    $end            reduce using rule 62 (expression -> expression DOTTIMES expression .)
    RPAREN          reduce using rule 62 (expression -> expression DOTTIMES expression .)
    ^               shift and go to state 94
    DOTPOWER        shift and go to state 97

  ! ^               [ reduce using rule 62 (expression -> expression DOTTIMES expression .) ]
  ! DOTPOWER        [ reduce using rule 62 (expression -> expression DOTTIMES expression .) ]
  ! +               [ shift and go to state 83 ]
  ! -               [ shift and go to state 85 ]
  ! *               [ shift and go to state 84 ]
  ! /               [ shift and go to state 86 ]
  ! \               [ shift and go to state 93 ]
  ! DOTTIMES        [ shift and go to state 89 ]
  ! DOTDIVIDE       [ shift and go to state 87 ]
  ! DOTRDIVIDE      [ shift and go to state 82 ]
  ! NOTEQUAL        [ shift and go to state 77 ]
  ! ISEQUAL         [ shift and go to state 98 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 96 ]
  ! LESSEQUAL       [ shift and go to state 91 ]
  ! GREATEREQUAL    [ shift and go to state 81 ]
  ! ELAND           [ shift and go to state 78 ]
  ! ELOR            [ shift and go to state 79 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 99 ]
  ! CONJTRANS       [ shift and go to state 90 ]
  ! TRANS           [ shift and go to state 92 ]
  ! :               [ shift and go to state 88 ]


state 145

    (70) expression -> expression LESSEQUAL expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RBRACKET        reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    COMMA           reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    NEWLINE         reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    LAMBDA          reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    NOT             reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    LPAREN          reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    NAME            reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    LCURLY          reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    STRING          reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    NUMBER          reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    LBRACKET        reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    RCURLY          reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    FUNCTION        reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    FOR             reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    WHILE           reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    IF              reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    ELSEIF          reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    ELSE            reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    BREAK           reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    CONTINUE        reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    RETURN          reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    SWITCH          reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    CASE            reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    OTHERWISE       reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    GLOBAL          reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    PERSISTENT      reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    TRY             reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    CATCH           reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    END             reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    $end            reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    RPAREN          reduce using rule 70 (expression -> expression LESSEQUAL expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! +               [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! -               [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! *               [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! /               [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! \               [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! ^               [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! DOTTIMES        [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! DOTDIVIDE       [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! DOTPOWER        [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! ISEQUAL         [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! LESS            [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! GREATER         [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! LESSEQUAL       [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! GREATEREQUAL    [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! ELAND           [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! ELOR            [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! AND             [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! OR              [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! CONJTRANS       [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! TRANS           [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]
  ! :               [ reduce using rule 70 (expression -> expression LESSEQUAL expression .) ]


state 146

    (60) expression -> expression \ expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RBRACKET        reduce using rule 60 (expression -> expression \ expression .)
    COMMA           reduce using rule 60 (expression -> expression \ expression .)
    SEMICOLON       reduce using rule 60 (expression -> expression \ expression .)
    NEWLINE         reduce using rule 60 (expression -> expression \ expression .)
    LAMBDA          reduce using rule 60 (expression -> expression \ expression .)
    NOT             reduce using rule 60 (expression -> expression \ expression .)
    LPAREN          reduce using rule 60 (expression -> expression \ expression .)
    NAME            reduce using rule 60 (expression -> expression \ expression .)
    LCURLY          reduce using rule 60 (expression -> expression \ expression .)
    STRING          reduce using rule 60 (expression -> expression \ expression .)
    NUMBER          reduce using rule 60 (expression -> expression \ expression .)
    LBRACKET        reduce using rule 60 (expression -> expression \ expression .)
    RCURLY          reduce using rule 60 (expression -> expression \ expression .)
    FUNCTION        reduce using rule 60 (expression -> expression \ expression .)
    FOR             reduce using rule 60 (expression -> expression \ expression .)
    WHILE           reduce using rule 60 (expression -> expression \ expression .)
    IF              reduce using rule 60 (expression -> expression \ expression .)
    ELSEIF          reduce using rule 60 (expression -> expression \ expression .)
    ELSE            reduce using rule 60 (expression -> expression \ expression .)
    BREAK           reduce using rule 60 (expression -> expression \ expression .)
    CONTINUE        reduce using rule 60 (expression -> expression \ expression .)
    RETURN          reduce using rule 60 (expression -> expression \ expression .)
    SWITCH          reduce using rule 60 (expression -> expression \ expression .)
    CASE            reduce using rule 60 (expression -> expression \ expression .)
    OTHERWISE       reduce using rule 60 (expression -> expression \ expression .)
    GLOBAL          reduce using rule 60 (expression -> expression \ expression .)
    PERSISTENT      reduce using rule 60 (expression -> expression \ expression .)
    TRY             reduce using rule 60 (expression -> expression \ expression .)
    CATCH           reduce using rule 60 (expression -> expression \ expression .)
    END             reduce using rule 60 (expression -> expression \ expression .)
    $end            reduce using rule 60 (expression -> expression \ expression .)
    RPAREN          reduce using rule 60 (expression -> expression \ expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! +               [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! -               [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! *               [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! /               [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! \               [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! ^               [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! DOTTIMES        [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! DOTDIVIDE       [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! DOTPOWER        [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! NOTEQUAL        [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! ISEQUAL         [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! LESS            [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! GREATER         [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! LESSEQUAL       [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! GREATEREQUAL    [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! ELAND           [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! ELOR            [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! AND             [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! OR              [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! CONJTRANS       [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! TRANS           [ reduce using rule 60 (expression -> expression \ expression .) ]
  ! :               [ reduce using rule 60 (expression -> expression \ expression .) ]


state 147

    (61) expression -> expression ^ expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    +               reduce using rule 61 (expression -> expression ^ expression .)
    -               reduce using rule 61 (expression -> expression ^ expression .)
    *               reduce using rule 61 (expression -> expression ^ expression .)
    /               reduce using rule 61 (expression -> expression ^ expression .)
    \               reduce using rule 61 (expression -> expression ^ expression .)
    ^               reduce using rule 61 (expression -> expression ^ expression .)
    DOTTIMES        reduce using rule 61 (expression -> expression ^ expression .)
    DOTDIVIDE       reduce using rule 61 (expression -> expression ^ expression .)
    DOTRDIVIDE      reduce using rule 61 (expression -> expression ^ expression .)
    DOTPOWER        reduce using rule 61 (expression -> expression ^ expression .)
    NOTEQUAL        reduce using rule 61 (expression -> expression ^ expression .)
    ISEQUAL         reduce using rule 61 (expression -> expression ^ expression .)
    LESS            reduce using rule 61 (expression -> expression ^ expression .)
    GREATER         reduce using rule 61 (expression -> expression ^ expression .)
    LESSEQUAL       reduce using rule 61 (expression -> expression ^ expression .)
    GREATEREQUAL    reduce using rule 61 (expression -> expression ^ expression .)
    ELAND           reduce using rule 61 (expression -> expression ^ expression .)
    ELOR            reduce using rule 61 (expression -> expression ^ expression .)
    AND             reduce using rule 61 (expression -> expression ^ expression .)
    OR              reduce using rule 61 (expression -> expression ^ expression .)
    CONJTRANS       reduce using rule 61 (expression -> expression ^ expression .)
    TRANS           reduce using rule 61 (expression -> expression ^ expression .)
    :               reduce using rule 61 (expression -> expression ^ expression .)
    RBRACKET        reduce using rule 61 (expression -> expression ^ expression .)
    COMMA           reduce using rule 61 (expression -> expression ^ expression .)
    SEMICOLON       reduce using rule 61 (expression -> expression ^ expression .)
    NEWLINE         reduce using rule 61 (expression -> expression ^ expression .)
    LAMBDA          reduce using rule 61 (expression -> expression ^ expression .)
    NOT             reduce using rule 61 (expression -> expression ^ expression .)
    LPAREN          reduce using rule 61 (expression -> expression ^ expression .)
    NAME            reduce using rule 61 (expression -> expression ^ expression .)
    LCURLY          reduce using rule 61 (expression -> expression ^ expression .)
    STRING          reduce using rule 61 (expression -> expression ^ expression .)
    NUMBER          reduce using rule 61 (expression -> expression ^ expression .)
    LBRACKET        reduce using rule 61 (expression -> expression ^ expression .)
    RCURLY          reduce using rule 61 (expression -> expression ^ expression .)
    FUNCTION        reduce using rule 61 (expression -> expression ^ expression .)
    FOR             reduce using rule 61 (expression -> expression ^ expression .)
    WHILE           reduce using rule 61 (expression -> expression ^ expression .)
    IF              reduce using rule 61 (expression -> expression ^ expression .)
    ELSEIF          reduce using rule 61 (expression -> expression ^ expression .)
    ELSE            reduce using rule 61 (expression -> expression ^ expression .)
    BREAK           reduce using rule 61 (expression -> expression ^ expression .)
    CONTINUE        reduce using rule 61 (expression -> expression ^ expression .)
    RETURN          reduce using rule 61 (expression -> expression ^ expression .)
    SWITCH          reduce using rule 61 (expression -> expression ^ expression .)
    CASE            reduce using rule 61 (expression -> expression ^ expression .)
    OTHERWISE       reduce using rule 61 (expression -> expression ^ expression .)
    GLOBAL          reduce using rule 61 (expression -> expression ^ expression .)
    PERSISTENT      reduce using rule 61 (expression -> expression ^ expression .)
    TRY             reduce using rule 61 (expression -> expression ^ expression .)
    CATCH           reduce using rule 61 (expression -> expression ^ expression .)
    END             reduce using rule 61 (expression -> expression ^ expression .)
    $end            reduce using rule 61 (expression -> expression ^ expression .)
    RPAREN          reduce using rule 61 (expression -> expression ^ expression .)

  ! +               [ shift and go to state 83 ]
  ! -               [ shift and go to state 85 ]
  ! *               [ shift and go to state 84 ]
  ! /               [ shift and go to state 86 ]
  ! \               [ shift and go to state 93 ]
  ! ^               [ shift and go to state 94 ]
  ! DOTTIMES        [ shift and go to state 89 ]
  ! DOTDIVIDE       [ shift and go to state 87 ]
  ! DOTRDIVIDE      [ shift and go to state 82 ]
  ! DOTPOWER        [ shift and go to state 97 ]
  ! NOTEQUAL        [ shift and go to state 77 ]
  ! ISEQUAL         [ shift and go to state 98 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 96 ]
  ! LESSEQUAL       [ shift and go to state 91 ]
  ! GREATEREQUAL    [ shift and go to state 81 ]
  ! ELAND           [ shift and go to state 78 ]
  ! ELOR            [ shift and go to state 79 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 99 ]
  ! CONJTRANS       [ shift and go to state 90 ]
  ! TRANS           [ shift and go to state 92 ]
  ! :               [ shift and go to state 88 ]


state 148

    (74) expression -> expression AND expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RBRACKET        reduce using rule 74 (expression -> expression AND expression .)
    COMMA           reduce using rule 74 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression AND expression .)
    NEWLINE         reduce using rule 74 (expression -> expression AND expression .)
    LAMBDA          reduce using rule 74 (expression -> expression AND expression .)
    NOT             reduce using rule 74 (expression -> expression AND expression .)
    LPAREN          reduce using rule 74 (expression -> expression AND expression .)
    NAME            reduce using rule 74 (expression -> expression AND expression .)
    LCURLY          reduce using rule 74 (expression -> expression AND expression .)
    STRING          reduce using rule 74 (expression -> expression AND expression .)
    NUMBER          reduce using rule 74 (expression -> expression AND expression .)
    LBRACKET        reduce using rule 74 (expression -> expression AND expression .)
    RCURLY          reduce using rule 74 (expression -> expression AND expression .)
    FUNCTION        reduce using rule 74 (expression -> expression AND expression .)
    FOR             reduce using rule 74 (expression -> expression AND expression .)
    WHILE           reduce using rule 74 (expression -> expression AND expression .)
    IF              reduce using rule 74 (expression -> expression AND expression .)
    ELSEIF          reduce using rule 74 (expression -> expression AND expression .)
    ELSE            reduce using rule 74 (expression -> expression AND expression .)
    BREAK           reduce using rule 74 (expression -> expression AND expression .)
    CONTINUE        reduce using rule 74 (expression -> expression AND expression .)
    RETURN          reduce using rule 74 (expression -> expression AND expression .)
    SWITCH          reduce using rule 74 (expression -> expression AND expression .)
    CASE            reduce using rule 74 (expression -> expression AND expression .)
    OTHERWISE       reduce using rule 74 (expression -> expression AND expression .)
    GLOBAL          reduce using rule 74 (expression -> expression AND expression .)
    PERSISTENT      reduce using rule 74 (expression -> expression AND expression .)
    TRY             reduce using rule 74 (expression -> expression AND expression .)
    CATCH           reduce using rule 74 (expression -> expression AND expression .)
    END             reduce using rule 74 (expression -> expression AND expression .)
    $end            reduce using rule 74 (expression -> expression AND expression .)
    RPAREN          reduce using rule 74 (expression -> expression AND expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! +               [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! \               [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! ^               [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! DOTTIMES        [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! DOTDIVIDE       [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! DOTPOWER        [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! ISEQUAL         [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! LESSEQUAL       [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! GREATEREQUAL    [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! ELAND           [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! ELOR            [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! CONJTRANS       [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! TRANS           [ reduce using rule 74 (expression -> expression AND expression .) ]
  ! :               [ reduce using rule 74 (expression -> expression AND expression .) ]


state 149

    (69) expression -> expression GREATER expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    \               reduce using rule 69 (expression -> expression GREATER expression .)
    DOTRDIVIDE      reduce using rule 69 (expression -> expression GREATER expression .)
    NOTEQUAL        reduce using rule 69 (expression -> expression GREATER expression .)
    ISEQUAL         reduce using rule 69 (expression -> expression GREATER expression .)
    LESS            reduce using rule 69 (expression -> expression GREATER expression .)
    GREATER         reduce using rule 69 (expression -> expression GREATER expression .)
    LESSEQUAL       reduce using rule 69 (expression -> expression GREATER expression .)
    GREATEREQUAL    reduce using rule 69 (expression -> expression GREATER expression .)
    ELAND           reduce using rule 69 (expression -> expression GREATER expression .)
    ELOR            reduce using rule 69 (expression -> expression GREATER expression .)
    AND             reduce using rule 69 (expression -> expression GREATER expression .)
    OR              reduce using rule 69 (expression -> expression GREATER expression .)
    CONJTRANS       reduce using rule 69 (expression -> expression GREATER expression .)
    TRANS           reduce using rule 69 (expression -> expression GREATER expression .)
    :               reduce using rule 69 (expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 69 (expression -> expression GREATER expression .)
    COMMA           reduce using rule 69 (expression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression GREATER expression .)
    NEWLINE         reduce using rule 69 (expression -> expression GREATER expression .)
    LAMBDA          reduce using rule 69 (expression -> expression GREATER expression .)
    NOT             reduce using rule 69 (expression -> expression GREATER expression .)
    LPAREN          reduce using rule 69 (expression -> expression GREATER expression .)
    NAME            reduce using rule 69 (expression -> expression GREATER expression .)
    LCURLY          reduce using rule 69 (expression -> expression GREATER expression .)
    STRING          reduce using rule 69 (expression -> expression GREATER expression .)
    NUMBER          reduce using rule 69 (expression -> expression GREATER expression .)
    LBRACKET        reduce using rule 69 (expression -> expression GREATER expression .)
    RCURLY          reduce using rule 69 (expression -> expression GREATER expression .)
    FUNCTION        reduce using rule 69 (expression -> expression GREATER expression .)
    FOR             reduce using rule 69 (expression -> expression GREATER expression .)
    WHILE           reduce using rule 69 (expression -> expression GREATER expression .)
    IF              reduce using rule 69 (expression -> expression GREATER expression .)
    ELSEIF          reduce using rule 69 (expression -> expression GREATER expression .)
    ELSE            reduce using rule 69 (expression -> expression GREATER expression .)
    BREAK           reduce using rule 69 (expression -> expression GREATER expression .)
    CONTINUE        reduce using rule 69 (expression -> expression GREATER expression .)
    RETURN          reduce using rule 69 (expression -> expression GREATER expression .)
    SWITCH          reduce using rule 69 (expression -> expression GREATER expression .)
    CASE            reduce using rule 69 (expression -> expression GREATER expression .)
    OTHERWISE       reduce using rule 69 (expression -> expression GREATER expression .)
    GLOBAL          reduce using rule 69 (expression -> expression GREATER expression .)
    PERSISTENT      reduce using rule 69 (expression -> expression GREATER expression .)
    TRY             reduce using rule 69 (expression -> expression GREATER expression .)
    CATCH           reduce using rule 69 (expression -> expression GREATER expression .)
    END             reduce using rule 69 (expression -> expression GREATER expression .)
    $end            reduce using rule 69 (expression -> expression GREATER expression .)
    RPAREN          reduce using rule 69 (expression -> expression GREATER expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTPOWER        shift and go to state 97

  ! +               [ reduce using rule 69 (expression -> expression GREATER expression .) ]
  ! -               [ reduce using rule 69 (expression -> expression GREATER expression .) ]
  ! *               [ reduce using rule 69 (expression -> expression GREATER expression .) ]
  ! /               [ reduce using rule 69 (expression -> expression GREATER expression .) ]
  ! ^               [ reduce using rule 69 (expression -> expression GREATER expression .) ]
  ! DOTTIMES        [ reduce using rule 69 (expression -> expression GREATER expression .) ]
  ! DOTDIVIDE       [ reduce using rule 69 (expression -> expression GREATER expression .) ]
  ! DOTPOWER        [ reduce using rule 69 (expression -> expression GREATER expression .) ]
  ! \               [ shift and go to state 93 ]
  ! DOTRDIVIDE      [ shift and go to state 82 ]
  ! NOTEQUAL        [ shift and go to state 77 ]
  ! ISEQUAL         [ shift and go to state 98 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 96 ]
  ! LESSEQUAL       [ shift and go to state 91 ]
  ! GREATEREQUAL    [ shift and go to state 81 ]
  ! ELAND           [ shift and go to state 78 ]
  ! ELOR            [ shift and go to state 79 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 99 ]
  ! CONJTRANS       [ shift and go to state 90 ]
  ! TRANS           [ shift and go to state 92 ]
  ! :               [ shift and go to state 88 ]


state 150

    (65) expression -> expression DOTPOWER expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    +               reduce using rule 65 (expression -> expression DOTPOWER expression .)
    -               reduce using rule 65 (expression -> expression DOTPOWER expression .)
    *               reduce using rule 65 (expression -> expression DOTPOWER expression .)
    /               reduce using rule 65 (expression -> expression DOTPOWER expression .)
    \               reduce using rule 65 (expression -> expression DOTPOWER expression .)
    ^               reduce using rule 65 (expression -> expression DOTPOWER expression .)
    DOTTIMES        reduce using rule 65 (expression -> expression DOTPOWER expression .)
    DOTDIVIDE       reduce using rule 65 (expression -> expression DOTPOWER expression .)
    DOTRDIVIDE      reduce using rule 65 (expression -> expression DOTPOWER expression .)
    DOTPOWER        reduce using rule 65 (expression -> expression DOTPOWER expression .)
    NOTEQUAL        reduce using rule 65 (expression -> expression DOTPOWER expression .)
    ISEQUAL         reduce using rule 65 (expression -> expression DOTPOWER expression .)
    LESS            reduce using rule 65 (expression -> expression DOTPOWER expression .)
    GREATER         reduce using rule 65 (expression -> expression DOTPOWER expression .)
    LESSEQUAL       reduce using rule 65 (expression -> expression DOTPOWER expression .)
    GREATEREQUAL    reduce using rule 65 (expression -> expression DOTPOWER expression .)
    ELAND           reduce using rule 65 (expression -> expression DOTPOWER expression .)
    ELOR            reduce using rule 65 (expression -> expression DOTPOWER expression .)
    AND             reduce using rule 65 (expression -> expression DOTPOWER expression .)
    OR              reduce using rule 65 (expression -> expression DOTPOWER expression .)
    CONJTRANS       reduce using rule 65 (expression -> expression DOTPOWER expression .)
    TRANS           reduce using rule 65 (expression -> expression DOTPOWER expression .)
    :               reduce using rule 65 (expression -> expression DOTPOWER expression .)
    RBRACKET        reduce using rule 65 (expression -> expression DOTPOWER expression .)
    COMMA           reduce using rule 65 (expression -> expression DOTPOWER expression .)
    SEMICOLON       reduce using rule 65 (expression -> expression DOTPOWER expression .)
    NEWLINE         reduce using rule 65 (expression -> expression DOTPOWER expression .)
    LAMBDA          reduce using rule 65 (expression -> expression DOTPOWER expression .)
    NOT             reduce using rule 65 (expression -> expression DOTPOWER expression .)
    LPAREN          reduce using rule 65 (expression -> expression DOTPOWER expression .)
    NAME            reduce using rule 65 (expression -> expression DOTPOWER expression .)
    LCURLY          reduce using rule 65 (expression -> expression DOTPOWER expression .)
    STRING          reduce using rule 65 (expression -> expression DOTPOWER expression .)
    NUMBER          reduce using rule 65 (expression -> expression DOTPOWER expression .)
    LBRACKET        reduce using rule 65 (expression -> expression DOTPOWER expression .)
    RCURLY          reduce using rule 65 (expression -> expression DOTPOWER expression .)
    FUNCTION        reduce using rule 65 (expression -> expression DOTPOWER expression .)
    FOR             reduce using rule 65 (expression -> expression DOTPOWER expression .)
    WHILE           reduce using rule 65 (expression -> expression DOTPOWER expression .)
    IF              reduce using rule 65 (expression -> expression DOTPOWER expression .)
    ELSEIF          reduce using rule 65 (expression -> expression DOTPOWER expression .)
    ELSE            reduce using rule 65 (expression -> expression DOTPOWER expression .)
    BREAK           reduce using rule 65 (expression -> expression DOTPOWER expression .)
    CONTINUE        reduce using rule 65 (expression -> expression DOTPOWER expression .)
    RETURN          reduce using rule 65 (expression -> expression DOTPOWER expression .)
    SWITCH          reduce using rule 65 (expression -> expression DOTPOWER expression .)
    CASE            reduce using rule 65 (expression -> expression DOTPOWER expression .)
    OTHERWISE       reduce using rule 65 (expression -> expression DOTPOWER expression .)
    GLOBAL          reduce using rule 65 (expression -> expression DOTPOWER expression .)
    PERSISTENT      reduce using rule 65 (expression -> expression DOTPOWER expression .)
    TRY             reduce using rule 65 (expression -> expression DOTPOWER expression .)
    CATCH           reduce using rule 65 (expression -> expression DOTPOWER expression .)
    END             reduce using rule 65 (expression -> expression DOTPOWER expression .)
    $end            reduce using rule 65 (expression -> expression DOTPOWER expression .)
    RPAREN          reduce using rule 65 (expression -> expression DOTPOWER expression .)

  ! +               [ shift and go to state 83 ]
  ! -               [ shift and go to state 85 ]
  ! *               [ shift and go to state 84 ]
  ! /               [ shift and go to state 86 ]
  ! \               [ shift and go to state 93 ]
  ! ^               [ shift and go to state 94 ]
  ! DOTTIMES        [ shift and go to state 89 ]
  ! DOTDIVIDE       [ shift and go to state 87 ]
  ! DOTRDIVIDE      [ shift and go to state 82 ]
  ! DOTPOWER        [ shift and go to state 97 ]
  ! NOTEQUAL        [ shift and go to state 77 ]
  ! ISEQUAL         [ shift and go to state 98 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 96 ]
  ! LESSEQUAL       [ shift and go to state 91 ]
  ! GREATEREQUAL    [ shift and go to state 81 ]
  ! ELAND           [ shift and go to state 78 ]
  ! ELOR            [ shift and go to state 79 ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 99 ]
  ! CONJTRANS       [ shift and go to state 90 ]
  ! TRANS           [ shift and go to state 92 ]
  ! :               [ shift and go to state 88 ]


state 151

    (67) expression -> expression ISEQUAL expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RBRACKET        reduce using rule 67 (expression -> expression ISEQUAL expression .)
    COMMA           reduce using rule 67 (expression -> expression ISEQUAL expression .)
    SEMICOLON       reduce using rule 67 (expression -> expression ISEQUAL expression .)
    NEWLINE         reduce using rule 67 (expression -> expression ISEQUAL expression .)
    LAMBDA          reduce using rule 67 (expression -> expression ISEQUAL expression .)
    NOT             reduce using rule 67 (expression -> expression ISEQUAL expression .)
    LPAREN          reduce using rule 67 (expression -> expression ISEQUAL expression .)
    NAME            reduce using rule 67 (expression -> expression ISEQUAL expression .)
    LCURLY          reduce using rule 67 (expression -> expression ISEQUAL expression .)
    STRING          reduce using rule 67 (expression -> expression ISEQUAL expression .)
    NUMBER          reduce using rule 67 (expression -> expression ISEQUAL expression .)
    LBRACKET        reduce using rule 67 (expression -> expression ISEQUAL expression .)
    RCURLY          reduce using rule 67 (expression -> expression ISEQUAL expression .)
    FUNCTION        reduce using rule 67 (expression -> expression ISEQUAL expression .)
    FOR             reduce using rule 67 (expression -> expression ISEQUAL expression .)
    WHILE           reduce using rule 67 (expression -> expression ISEQUAL expression .)
    IF              reduce using rule 67 (expression -> expression ISEQUAL expression .)
    ELSEIF          reduce using rule 67 (expression -> expression ISEQUAL expression .)
    ELSE            reduce using rule 67 (expression -> expression ISEQUAL expression .)
    BREAK           reduce using rule 67 (expression -> expression ISEQUAL expression .)
    CONTINUE        reduce using rule 67 (expression -> expression ISEQUAL expression .)
    RETURN          reduce using rule 67 (expression -> expression ISEQUAL expression .)
    SWITCH          reduce using rule 67 (expression -> expression ISEQUAL expression .)
    CASE            reduce using rule 67 (expression -> expression ISEQUAL expression .)
    OTHERWISE       reduce using rule 67 (expression -> expression ISEQUAL expression .)
    GLOBAL          reduce using rule 67 (expression -> expression ISEQUAL expression .)
    PERSISTENT      reduce using rule 67 (expression -> expression ISEQUAL expression .)
    TRY             reduce using rule 67 (expression -> expression ISEQUAL expression .)
    CATCH           reduce using rule 67 (expression -> expression ISEQUAL expression .)
    END             reduce using rule 67 (expression -> expression ISEQUAL expression .)
    $end            reduce using rule 67 (expression -> expression ISEQUAL expression .)
    RPAREN          reduce using rule 67 (expression -> expression ISEQUAL expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! +               [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! -               [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! *               [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! /               [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! \               [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! ^               [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! DOTTIMES        [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! DOTDIVIDE       [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! DOTPOWER        [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! ISEQUAL         [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! LESS            [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! GREATER         [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! LESSEQUAL       [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! GREATEREQUAL    [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! ELAND           [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! ELOR            [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! AND             [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! OR              [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! CONJTRANS       [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! TRANS           [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]
  ! :               [ reduce using rule 67 (expression -> expression ISEQUAL expression .) ]


state 152

    (75) expression -> expression OR expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RBRACKET        reduce using rule 75 (expression -> expression OR expression .)
    COMMA           reduce using rule 75 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression OR expression .)
    NEWLINE         reduce using rule 75 (expression -> expression OR expression .)
    LAMBDA          reduce using rule 75 (expression -> expression OR expression .)
    NOT             reduce using rule 75 (expression -> expression OR expression .)
    LPAREN          reduce using rule 75 (expression -> expression OR expression .)
    NAME            reduce using rule 75 (expression -> expression OR expression .)
    LCURLY          reduce using rule 75 (expression -> expression OR expression .)
    STRING          reduce using rule 75 (expression -> expression OR expression .)
    NUMBER          reduce using rule 75 (expression -> expression OR expression .)
    LBRACKET        reduce using rule 75 (expression -> expression OR expression .)
    RCURLY          reduce using rule 75 (expression -> expression OR expression .)
    FUNCTION        reduce using rule 75 (expression -> expression OR expression .)
    FOR             reduce using rule 75 (expression -> expression OR expression .)
    WHILE           reduce using rule 75 (expression -> expression OR expression .)
    IF              reduce using rule 75 (expression -> expression OR expression .)
    ELSEIF          reduce using rule 75 (expression -> expression OR expression .)
    ELSE            reduce using rule 75 (expression -> expression OR expression .)
    BREAK           reduce using rule 75 (expression -> expression OR expression .)
    CONTINUE        reduce using rule 75 (expression -> expression OR expression .)
    RETURN          reduce using rule 75 (expression -> expression OR expression .)
    SWITCH          reduce using rule 75 (expression -> expression OR expression .)
    CASE            reduce using rule 75 (expression -> expression OR expression .)
    OTHERWISE       reduce using rule 75 (expression -> expression OR expression .)
    GLOBAL          reduce using rule 75 (expression -> expression OR expression .)
    PERSISTENT      reduce using rule 75 (expression -> expression OR expression .)
    TRY             reduce using rule 75 (expression -> expression OR expression .)
    CATCH           reduce using rule 75 (expression -> expression OR expression .)
    END             reduce using rule 75 (expression -> expression OR expression .)
    $end            reduce using rule 75 (expression -> expression OR expression .)
    RPAREN          reduce using rule 75 (expression -> expression OR expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! +               [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! \               [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! ^               [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! DOTTIMES        [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! DOTDIVIDE       [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! DOTPOWER        [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! ISEQUAL         [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! LESS            [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! LESSEQUAL       [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! GREATEREQUAL    [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! ELAND           [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! ELOR            [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! CONJTRANS       [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! TRANS           [ reduce using rule 75 (expression -> expression OR expression .) ]
  ! :               [ reduce using rule 75 (expression -> expression OR expression .) ]


state 153

    (19) expression -> LAMBDA LPAREN name_list . RPAREN expression
    (17) name_list -> name_list . COMMA NAME

    RPAREN          shift and go to state 168
    COMMA           shift and go to state 160



state 154

    (48) exprinlist -> exprinlist NEWLINE expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RCURLY          reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .)
    COMMA           reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .)
    SEMICOLON       reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .)
    NEWLINE         reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .)
    LAMBDA          reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .)
    NOT             reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .)
    LPAREN          reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .)
    NAME            reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .)
    LCURLY          reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .)
    STRING          reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .)
    NUMBER          reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .)
    LBRACKET        reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .)
    RBRACKET        reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .) ]
  ! +               [ reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .) ]
  ! :               [ reduce using rule 48 (exprinlist -> exprinlist NEWLINE expression .) ]


state 155

    (47) exprinlist -> exprinlist SEMICOLON expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RCURLY          reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .)
    COMMA           reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .)
    SEMICOLON       reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .)
    NEWLINE         reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .)
    LAMBDA          reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .)
    NOT             reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .)
    LPAREN          reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .)
    NAME            reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .)
    LCURLY          reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .)
    STRING          reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .)
    NUMBER          reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .)
    LBRACKET        reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .)
    RBRACKET        reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .) ]
  ! +               [ reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .) ]
  ! :               [ reduce using rule 47 (exprinlist -> exprinlist SEMICOLON expression .) ]


state 156

    (46) exprinlist -> exprinlist COMMA expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RCURLY          reduce using rule 46 (exprinlist -> exprinlist COMMA expression .)
    COMMA           reduce using rule 46 (exprinlist -> exprinlist COMMA expression .)
    SEMICOLON       reduce using rule 46 (exprinlist -> exprinlist COMMA expression .)
    NEWLINE         reduce using rule 46 (exprinlist -> exprinlist COMMA expression .)
    LAMBDA          reduce using rule 46 (exprinlist -> exprinlist COMMA expression .)
    NOT             reduce using rule 46 (exprinlist -> exprinlist COMMA expression .)
    LPAREN          reduce using rule 46 (exprinlist -> exprinlist COMMA expression .)
    NAME            reduce using rule 46 (exprinlist -> exprinlist COMMA expression .)
    LCURLY          reduce using rule 46 (exprinlist -> exprinlist COMMA expression .)
    STRING          reduce using rule 46 (exprinlist -> exprinlist COMMA expression .)
    NUMBER          reduce using rule 46 (exprinlist -> exprinlist COMMA expression .)
    LBRACKET        reduce using rule 46 (exprinlist -> exprinlist COMMA expression .)
    RBRACKET        reduce using rule 46 (exprinlist -> exprinlist COMMA expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 46 (exprinlist -> exprinlist COMMA expression .) ]
  ! +               [ reduce using rule 46 (exprinlist -> exprinlist COMMA expression .) ]
  ! :               [ reduce using rule 46 (exprinlist -> exprinlist COMMA expression .) ]


state 157

    (91) name_sub -> NAME LPAREN . exprlist RPAREN
    (44) exprlist -> . exprlist COMMA expression
    (45) exprlist -> . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 66
    exprlist                       shift and go to state 130
    exprmcat                       shift and go to state 42

state 158

    (14) statement -> FUNCTION NAME LPAREN name_list . RPAREN
    (17) name_list -> name_list . COMMA NAME

    RPAREN          shift and go to state 169
    COMMA           shift and go to state 160



state 159

    (12) statement -> FUNCTION NAME = NAME . LPAREN name_list RPAREN
    (13) statement -> FUNCTION NAME = NAME .

  ! shift/reduce conflict for LPAREN resolved as shift.
    LPAREN          shift and go to state 170
    COMMA           reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    SEMICOLON       reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    FUNCTION        reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    FOR             reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    WHILE           reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    IF              reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    ELSEIF          reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    ELSE            reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    BREAK           reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    CONTINUE        reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    RETURN          reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    SWITCH          reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    CASE            reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    OTHERWISE       reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    GLOBAL          reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    PERSISTENT      reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    TRY             reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    CATCH           reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    END             reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    NAME            reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    LAMBDA          reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    NOT             reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    -               reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    +               reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    LCURLY          reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    STRING          reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    :               reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    NUMBER          reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    LBRACKET        reduce using rule 13 (statement -> FUNCTION NAME = NAME .)
    $end            reduce using rule 13 (statement -> FUNCTION NAME = NAME .)

  ! LPAREN          [ reduce using rule 13 (statement -> FUNCTION NAME = NAME .) ]


state 160

    (17) name_list -> name_list COMMA . NAME

    NAME            shift and go to state 171



state 161

    (10) statement -> FUNCTION LBRACKET name_list RBRACKET . = NAME LPAREN name_list RPAREN
    (11) statement -> FUNCTION LBRACKET name_list RBRACKET . = NAME

    =               shift and go to state 172



state 162

    (20) statement -> FOR NAME = expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    COMMA           reduce using rule 20 (statement -> FOR NAME = expression .)
    SEMICOLON       reduce using rule 20 (statement -> FOR NAME = expression .)
    FUNCTION        reduce using rule 20 (statement -> FOR NAME = expression .)
    FOR             reduce using rule 20 (statement -> FOR NAME = expression .)
    WHILE           reduce using rule 20 (statement -> FOR NAME = expression .)
    IF              reduce using rule 20 (statement -> FOR NAME = expression .)
    ELSEIF          reduce using rule 20 (statement -> FOR NAME = expression .)
    ELSE            reduce using rule 20 (statement -> FOR NAME = expression .)
    BREAK           reduce using rule 20 (statement -> FOR NAME = expression .)
    CONTINUE        reduce using rule 20 (statement -> FOR NAME = expression .)
    RETURN          reduce using rule 20 (statement -> FOR NAME = expression .)
    SWITCH          reduce using rule 20 (statement -> FOR NAME = expression .)
    CASE            reduce using rule 20 (statement -> FOR NAME = expression .)
    OTHERWISE       reduce using rule 20 (statement -> FOR NAME = expression .)
    GLOBAL          reduce using rule 20 (statement -> FOR NAME = expression .)
    PERSISTENT      reduce using rule 20 (statement -> FOR NAME = expression .)
    TRY             reduce using rule 20 (statement -> FOR NAME = expression .)
    CATCH           reduce using rule 20 (statement -> FOR NAME = expression .)
    END             reduce using rule 20 (statement -> FOR NAME = expression .)
    NAME            reduce using rule 20 (statement -> FOR NAME = expression .)
    LAMBDA          reduce using rule 20 (statement -> FOR NAME = expression .)
    NOT             reduce using rule 20 (statement -> FOR NAME = expression .)
    LPAREN          reduce using rule 20 (statement -> FOR NAME = expression .)
    LCURLY          reduce using rule 20 (statement -> FOR NAME = expression .)
    STRING          reduce using rule 20 (statement -> FOR NAME = expression .)
    NUMBER          reduce using rule 20 (statement -> FOR NAME = expression .)
    LBRACKET        reduce using rule 20 (statement -> FOR NAME = expression .)
    $end            reduce using rule 20 (statement -> FOR NAME = expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! -               [ reduce using rule 20 (statement -> FOR NAME = expression .) ]
  ! +               [ reduce using rule 20 (statement -> FOR NAME = expression .) ]
  ! :               [ reduce using rule 20 (statement -> FOR NAME = expression .) ]


state 163

    (44) exprlist -> exprlist COMMA expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

    RPAREN          reduce using rule 44 (exprlist -> exprlist COMMA expression .)
    COMMA           reduce using rule 44 (exprlist -> exprlist COMMA expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88



state 164

    (98) name_sub -> NAME LCURLY exprinlist RCURLY .

    .               reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    +               reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    -               reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    *               reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    /               reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    \               reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    ^               reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    DOTTIMES        reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    DOTDIVIDE       reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    DOTRDIVIDE      reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    DOTPOWER        reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    NOTEQUAL        reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    ISEQUAL         reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    LESS            reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    GREATER         reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    LESSEQUAL       reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    GREATEREQUAL    reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    ELAND           reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    ELOR            reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    AND             reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    OR              reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    CONJTRANS       reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    TRANS           reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    :               reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    RBRACKET        reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    COMMA           reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    SEMICOLON       reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    NEWLINE         reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    LAMBDA          reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    NOT             reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    LPAREN          reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    NAME            reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    LCURLY          reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    STRING          reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    NUMBER          reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    LBRACKET        reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    FUNCTION        reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    FOR             reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    WHILE           reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    IF              reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    ELSEIF          reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    ELSE            reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    BREAK           reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    CONTINUE        reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    RETURN          reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    SWITCH          reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    CASE            reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    OTHERWISE       reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    GLOBAL          reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    PERSISTENT      reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    TRY             reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    CATCH           reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    END             reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    $end            reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    RCURLY          reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    RPAREN          reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)
    =               reduce using rule 98 (name_sub -> NAME LCURLY exprinlist RCURLY .)



state 165

    (91) name_sub -> NAME LPAREN exprlist RPAREN .

    .               reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    +               reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    -               reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    *               reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    /               reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    \               reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    ^               reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    DOTTIMES        reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    DOTDIVIDE       reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    DOTRDIVIDE      reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    DOTPOWER        reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    NOTEQUAL        reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    ISEQUAL         reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    LESS            reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    GREATER         reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    LESSEQUAL       reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    GREATEREQUAL    reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    ELAND           reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    ELOR            reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    AND             reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    OR              reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    CONJTRANS       reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    TRANS           reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    :               reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    RBRACKET        reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    SEMICOLON       reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    NEWLINE         reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    LAMBDA          reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    NOT             reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    LPAREN          reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    NAME            reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    LCURLY          reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    STRING          reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    NUMBER          reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    LBRACKET        reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    FUNCTION        reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    FOR             reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    WHILE           reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    IF              reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    ELSEIF          reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    ELSE            reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    BREAK           reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    CONTINUE        reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    RETURN          reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    SWITCH          reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    CASE            reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    OTHERWISE       reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    GLOBAL          reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    PERSISTENT      reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    TRY             reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    CATCH           reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    END             reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    $end            reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    RCURLY          reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)
    =               reduce using rule 91 (name_sub -> NAME LPAREN exprlist RPAREN .)



state 166

    (88) indexflat -> LPAREN : RPAREN .

    +               reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    -               reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    *               reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    /               reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    \               reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    ^               reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    DOTTIMES        reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    DOTDIVIDE       reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    DOTRDIVIDE      reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    DOTPOWER        reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    NOTEQUAL        reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    ISEQUAL         reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    LESS            reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    GREATER         reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    LESSEQUAL       reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    GREATEREQUAL    reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    ELAND           reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    ELOR            reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    AND             reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    OR              reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    CONJTRANS       reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    TRANS           reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    :               reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    RBRACKET        reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    COMMA           reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    SEMICOLON       reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    NEWLINE         reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    LAMBDA          reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    NOT             reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    LPAREN          reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    NAME            reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    LCURLY          reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    STRING          reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    NUMBER          reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    LBRACKET        reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    RCURLY          reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    FUNCTION        reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    FOR             reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    WHILE           reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    IF              reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    ELSEIF          reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    ELSE            reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    BREAK           reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    CONTINUE        reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    RETURN          reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    SWITCH          reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    CASE            reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    OTHERWISE       reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    GLOBAL          reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    PERSISTENT      reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    TRY             reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    CATCH           reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    END             reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    $end            reduce using rule 88 (indexflat -> LPAREN : RPAREN .)
    RPAREN          reduce using rule 88 (indexflat -> LPAREN : RPAREN .)



state 167

    (100) slice -> expression : expression : . expression
    (100) slice -> expression : . expression : expression
    (101) slice -> expression : . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 173
    exprmcat                       shift and go to state 42

state 168

    (19) expression -> LAMBDA LPAREN name_list RPAREN . expression
    (16) expression -> . LAMBDA NAME
    (19) expression -> . LAMBDA LPAREN name_list RPAREN expression
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression \ expression
    (61) expression -> . expression ^ expression
    (62) expression -> . expression DOTTIMES expression
    (63) expression -> . expression DOTDIVIDE expression
    (64) expression -> . expression DOTRDIVIDE expression
    (65) expression -> . expression DOTPOWER expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression ISEQUAL expression
    (68) expression -> . expression LESS expression
    (69) expression -> . expression GREATER expression
    (70) expression -> . expression LESSEQUAL expression
    (71) expression -> . expression GREATEREQUAL expression
    (72) expression -> . expression ELAND expression
    (73) expression -> . expression ELOR expression
    (74) expression -> . expression AND expression
    (75) expression -> . expression OR expression
    (76) expression -> . NOT expression
    (77) expression -> . - expression
    (79) expression -> . + expression
    (80) expression -> . LPAREN exprlist RPAREN
    (81) expression -> . NAME LPAREN RPAREN
    (82) expression -> . exprmcat
    (84) expression -> . LCURLY exprinlist RCURLY
    (85) expression -> . expression CONJTRANS
    (86) expression -> . expression TRANS
    (87) expression -> . STRING
    (89) expression -> . :
    (90) expression -> . NAME indexflat
    (97) expression -> . name_attr
    (99) expression -> . name_sub
    (102) expression -> . slice
    (103) expression -> . NUMBER
    (104) expression -> . NAME
    (83) exprmcat -> . LBRACKET exprinlist RBRACKET
    (92) name_attr -> . name_sub . NAME
    (93) name_attr -> . name_attr . NAME
    (94) name_attr -> . name_attr . name_sub
    (95) name_attr -> . name_sub . name_sub
    (96) name_attr -> . NAME
    (91) name_sub -> . NAME LPAREN exprlist RPAREN
    (98) name_sub -> . NAME LCURLY exprinlist RCURLY
    (100) slice -> . expression : expression : expression
    (101) slice -> . expression : expression

    LAMBDA          shift and go to state 36
    NOT             shift and go to state 8
    -               shift and go to state 13
    +               shift and go to state 12
    LPAREN          shift and go to state 26
    NAME            shift and go to state 43
    LCURLY          shift and go to state 5
    STRING          shift and go to state 17
    :               shift and go to state 29
    NUMBER          shift and go to state 3
    LBRACKET        shift and go to state 4


    slice                          shift and go to state 11
    name_attr                      shift and go to state 40
    name_sub                       shift and go to state 41
    expression                     shift and go to state 174
    exprmcat                       shift and go to state 42

state 169

    (14) statement -> FUNCTION NAME LPAREN name_list RPAREN .

    COMMA           reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    SEMICOLON       reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    FUNCTION        reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    FOR             reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    WHILE           reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    IF              reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    ELSEIF          reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    ELSE            reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    BREAK           reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    CONTINUE        reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    RETURN          reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    SWITCH          reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    CASE            reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    OTHERWISE       reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    GLOBAL          reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    PERSISTENT      reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    TRY             reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    CATCH           reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    END             reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    NAME            reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    LAMBDA          reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    NOT             reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    -               reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    +               reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    LPAREN          reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    LCURLY          reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    STRING          reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    :               reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    NUMBER          reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    LBRACKET        reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)
    $end            reduce using rule 14 (statement -> FUNCTION NAME LPAREN name_list RPAREN .)



state 170

    (12) statement -> FUNCTION NAME = NAME LPAREN . name_list RPAREN
    (17) name_list -> . name_list COMMA NAME
    (18) name_list -> . NAME

    NAME            shift and go to state 114


    name_list                      shift and go to state 175

state 171

    (17) name_list -> name_list COMMA NAME .

    RPAREN          reduce using rule 17 (name_list -> name_list COMMA NAME .)
    COMMA           reduce using rule 17 (name_list -> name_list COMMA NAME .)
    RBRACKET        reduce using rule 17 (name_list -> name_list COMMA NAME .)



state 172

    (10) statement -> FUNCTION LBRACKET name_list RBRACKET = . NAME LPAREN name_list RPAREN
    (11) statement -> FUNCTION LBRACKET name_list RBRACKET = . NAME

    NAME            shift and go to state 176



state 173

    (100) slice -> expression : expression : expression .
    (100) slice -> expression : expression . : expression
    (101) slice -> expression : expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for : resolved as shift.
  ! reduce/reduce conflict for + resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for - resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for * resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for / resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for \ resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for ^ resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for DOTTIMES resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for DOTDIVIDE resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for DOTRDIVIDE resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for DOTPOWER resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for ISEQUAL resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for LESS resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for GREATER resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for ELAND resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for ELOR resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for AND resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for OR resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for CONJTRANS resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for TRANS resolved using rule 100 (slice -> expression : expression : expression .).
  ! shift/reduce conflict for : resolved as shift.
  ! reduce/reduce conflict for COMMA resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for SEMICOLON resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for FUNCTION resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for FOR resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for WHILE resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for IF resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for ELSEIF resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for ELSE resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for BREAK resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for CONTINUE resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for RETURN resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for SWITCH resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for CASE resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for OTHERWISE resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for GLOBAL resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for PERSISTENT resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for TRY resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for CATCH resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for END resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for NAME resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for LAMBDA resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for NOT resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for LPAREN resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for LCURLY resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for STRING resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for NUMBER resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for LBRACKET resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for $end resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for RBRACKET resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for NEWLINE resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for RCURLY resolved using rule 100 (slice -> expression : expression : expression .).
  ! reduce/reduce conflict for RPAREN resolved using rule 100 (slice -> expression : expression : expression .).
  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
    COMMA           reduce using rule 100 (slice -> expression : expression : expression .)
    SEMICOLON       reduce using rule 100 (slice -> expression : expression : expression .)
    FUNCTION        reduce using rule 100 (slice -> expression : expression : expression .)
    FOR             reduce using rule 100 (slice -> expression : expression : expression .)
    WHILE           reduce using rule 100 (slice -> expression : expression : expression .)
    IF              reduce using rule 100 (slice -> expression : expression : expression .)
    ELSEIF          reduce using rule 100 (slice -> expression : expression : expression .)
    ELSE            reduce using rule 100 (slice -> expression : expression : expression .)
    BREAK           reduce using rule 100 (slice -> expression : expression : expression .)
    CONTINUE        reduce using rule 100 (slice -> expression : expression : expression .)
    RETURN          reduce using rule 100 (slice -> expression : expression : expression .)
    SWITCH          reduce using rule 100 (slice -> expression : expression : expression .)
    CASE            reduce using rule 100 (slice -> expression : expression : expression .)
    OTHERWISE       reduce using rule 100 (slice -> expression : expression : expression .)
    GLOBAL          reduce using rule 100 (slice -> expression : expression : expression .)
    PERSISTENT      reduce using rule 100 (slice -> expression : expression : expression .)
    TRY             reduce using rule 100 (slice -> expression : expression : expression .)
    CATCH           reduce using rule 100 (slice -> expression : expression : expression .)
    END             reduce using rule 100 (slice -> expression : expression : expression .)
    NAME            reduce using rule 100 (slice -> expression : expression : expression .)
    LAMBDA          reduce using rule 100 (slice -> expression : expression : expression .)
    NOT             reduce using rule 100 (slice -> expression : expression : expression .)
    LPAREN          reduce using rule 100 (slice -> expression : expression : expression .)
    LCURLY          reduce using rule 100 (slice -> expression : expression : expression .)
    STRING          reduce using rule 100 (slice -> expression : expression : expression .)
    NUMBER          reduce using rule 100 (slice -> expression : expression : expression .)
    LBRACKET        reduce using rule 100 (slice -> expression : expression : expression .)
    $end            reduce using rule 100 (slice -> expression : expression : expression .)
    RBRACKET        reduce using rule 100 (slice -> expression : expression : expression .)
    NEWLINE         reduce using rule 100 (slice -> expression : expression : expression .)
    RCURLY          reduce using rule 100 (slice -> expression : expression : expression .)
    RPAREN          reduce using rule 100 (slice -> expression : expression : expression .)
    :               shift and go to state 167
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92

  ! +               [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! -               [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! *               [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! /               [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! \               [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! ^               [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! DOTTIMES        [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! DOTDIVIDE       [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! DOTPOWER        [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! NOTEQUAL        [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! ISEQUAL         [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! LESS            [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! GREATER         [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! LESSEQUAL       [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! GREATEREQUAL    [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! ELAND           [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! ELOR            [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! AND             [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! OR              [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! CONJTRANS       [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! TRANS           [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! :               [ reduce using rule 100 (slice -> expression : expression : expression .) ]
  ! +               [ reduce using rule 101 (slice -> expression : expression .) ]
  ! -               [ reduce using rule 101 (slice -> expression : expression .) ]
  ! *               [ reduce using rule 101 (slice -> expression : expression .) ]
  ! /               [ reduce using rule 101 (slice -> expression : expression .) ]
  ! \               [ reduce using rule 101 (slice -> expression : expression .) ]
  ! ^               [ reduce using rule 101 (slice -> expression : expression .) ]
  ! DOTTIMES        [ reduce using rule 101 (slice -> expression : expression .) ]
  ! DOTDIVIDE       [ reduce using rule 101 (slice -> expression : expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 101 (slice -> expression : expression .) ]
  ! DOTPOWER        [ reduce using rule 101 (slice -> expression : expression .) ]
  ! NOTEQUAL        [ reduce using rule 101 (slice -> expression : expression .) ]
  ! ISEQUAL         [ reduce using rule 101 (slice -> expression : expression .) ]
  ! LESS            [ reduce using rule 101 (slice -> expression : expression .) ]
  ! GREATER         [ reduce using rule 101 (slice -> expression : expression .) ]
  ! LESSEQUAL       [ reduce using rule 101 (slice -> expression : expression .) ]
  ! GREATEREQUAL    [ reduce using rule 101 (slice -> expression : expression .) ]
  ! ELAND           [ reduce using rule 101 (slice -> expression : expression .) ]
  ! ELOR            [ reduce using rule 101 (slice -> expression : expression .) ]
  ! AND             [ reduce using rule 101 (slice -> expression : expression .) ]
  ! OR              [ reduce using rule 101 (slice -> expression : expression .) ]
  ! CONJTRANS       [ reduce using rule 101 (slice -> expression : expression .) ]
  ! TRANS           [ reduce using rule 101 (slice -> expression : expression .) ]
  ! :               [ reduce using rule 101 (slice -> expression : expression .) ]
  ! COMMA           [ reduce using rule 101 (slice -> expression : expression .) ]
  ! SEMICOLON       [ reduce using rule 101 (slice -> expression : expression .) ]
  ! FUNCTION        [ reduce using rule 101 (slice -> expression : expression .) ]
  ! FOR             [ reduce using rule 101 (slice -> expression : expression .) ]
  ! WHILE           [ reduce using rule 101 (slice -> expression : expression .) ]
  ! IF              [ reduce using rule 101 (slice -> expression : expression .) ]
  ! ELSEIF          [ reduce using rule 101 (slice -> expression : expression .) ]
  ! ELSE            [ reduce using rule 101 (slice -> expression : expression .) ]
  ! BREAK           [ reduce using rule 101 (slice -> expression : expression .) ]
  ! CONTINUE        [ reduce using rule 101 (slice -> expression : expression .) ]
  ! RETURN          [ reduce using rule 101 (slice -> expression : expression .) ]
  ! SWITCH          [ reduce using rule 101 (slice -> expression : expression .) ]
  ! CASE            [ reduce using rule 101 (slice -> expression : expression .) ]
  ! OTHERWISE       [ reduce using rule 101 (slice -> expression : expression .) ]
  ! GLOBAL          [ reduce using rule 101 (slice -> expression : expression .) ]
  ! PERSISTENT      [ reduce using rule 101 (slice -> expression : expression .) ]
  ! TRY             [ reduce using rule 101 (slice -> expression : expression .) ]
  ! CATCH           [ reduce using rule 101 (slice -> expression : expression .) ]
  ! END             [ reduce using rule 101 (slice -> expression : expression .) ]
  ! NAME            [ reduce using rule 101 (slice -> expression : expression .) ]
  ! LAMBDA          [ reduce using rule 101 (slice -> expression : expression .) ]
  ! NOT             [ reduce using rule 101 (slice -> expression : expression .) ]
  ! LPAREN          [ reduce using rule 101 (slice -> expression : expression .) ]
  ! LCURLY          [ reduce using rule 101 (slice -> expression : expression .) ]
  ! STRING          [ reduce using rule 101 (slice -> expression : expression .) ]
  ! NUMBER          [ reduce using rule 101 (slice -> expression : expression .) ]
  ! LBRACKET        [ reduce using rule 101 (slice -> expression : expression .) ]
  ! $end            [ reduce using rule 101 (slice -> expression : expression .) ]
  ! RBRACKET        [ reduce using rule 101 (slice -> expression : expression .) ]
  ! NEWLINE         [ reduce using rule 101 (slice -> expression : expression .) ]
  ! RCURLY          [ reduce using rule 101 (slice -> expression : expression .) ]
  ! RPAREN          [ reduce using rule 101 (slice -> expression : expression .) ]


state 174

    (19) expression -> LAMBDA LPAREN name_list RPAREN expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . \ expression
    (61) expression -> expression . ^ expression
    (62) expression -> expression . DOTTIMES expression
    (63) expression -> expression . DOTDIVIDE expression
    (64) expression -> expression . DOTRDIVIDE expression
    (65) expression -> expression . DOTPOWER expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . ISEQUAL expression
    (68) expression -> expression . LESS expression
    (69) expression -> expression . GREATER expression
    (70) expression -> expression . LESSEQUAL expression
    (71) expression -> expression . GREATEREQUAL expression
    (72) expression -> expression . ELAND expression
    (73) expression -> expression . ELOR expression
    (74) expression -> expression . AND expression
    (75) expression -> expression . OR expression
    (85) expression -> expression . CONJTRANS
    (86) expression -> expression . TRANS
    (100) slice -> expression . : expression : expression
    (101) slice -> expression . : expression

  ! shift/reduce conflict for + resolved as shift.
  ! shift/reduce conflict for - resolved as shift.
  ! shift/reduce conflict for * resolved as shift.
  ! shift/reduce conflict for / resolved as shift.
  ! shift/reduce conflict for \ resolved as shift.
  ! shift/reduce conflict for ^ resolved as shift.
  ! shift/reduce conflict for DOTTIMES resolved as shift.
  ! shift/reduce conflict for DOTDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTRDIVIDE resolved as shift.
  ! shift/reduce conflict for DOTPOWER resolved as shift.
  ! shift/reduce conflict for NOTEQUAL resolved as shift.
  ! shift/reduce conflict for ISEQUAL resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for GREATER resolved as shift.
  ! shift/reduce conflict for LESSEQUAL resolved as shift.
  ! shift/reduce conflict for GREATEREQUAL resolved as shift.
  ! shift/reduce conflict for ELAND resolved as shift.
  ! shift/reduce conflict for ELOR resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for CONJTRANS resolved as shift.
  ! shift/reduce conflict for TRANS resolved as shift.
  ! shift/reduce conflict for : resolved as shift.
    RBRACKET        reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    COMMA           reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    SEMICOLON       reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    NEWLINE         reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    LAMBDA          reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    NOT             reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    LPAREN          reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    NAME            reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    LCURLY          reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    STRING          reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    NUMBER          reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    LBRACKET        reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    RCURLY          reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    FUNCTION        reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    FOR             reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    WHILE           reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    IF              reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    ELSEIF          reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    ELSE            reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    BREAK           reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    CONTINUE        reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    RETURN          reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    SWITCH          reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    CASE            reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    OTHERWISE       reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    GLOBAL          reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    PERSISTENT      reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    TRY             reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    CATCH           reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    END             reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    $end            reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    RPAREN          reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .)
    +               shift and go to state 83
    -               shift and go to state 85
    *               shift and go to state 84
    /               shift and go to state 86
    \               shift and go to state 93
    ^               shift and go to state 94
    DOTTIMES        shift and go to state 89
    DOTDIVIDE       shift and go to state 87
    DOTRDIVIDE      shift and go to state 82
    DOTPOWER        shift and go to state 97
    NOTEQUAL        shift and go to state 77
    ISEQUAL         shift and go to state 98
    LESS            shift and go to state 80
    GREATER         shift and go to state 96
    LESSEQUAL       shift and go to state 91
    GREATEREQUAL    shift and go to state 81
    ELAND           shift and go to state 78
    ELOR            shift and go to state 79
    AND             shift and go to state 95
    OR              shift and go to state 99
    CONJTRANS       shift and go to state 90
    TRANS           shift and go to state 92
    :               shift and go to state 88

  ! +               [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! -               [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! *               [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! /               [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! \               [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! ^               [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! DOTTIMES        [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! DOTDIVIDE       [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! DOTRDIVIDE      [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! DOTPOWER        [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! NOTEQUAL        [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! ISEQUAL         [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! LESS            [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! GREATER         [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! LESSEQUAL       [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! GREATEREQUAL    [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! ELAND           [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! ELOR            [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! AND             [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! OR              [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! CONJTRANS       [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! TRANS           [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]
  ! :               [ reduce using rule 19 (expression -> LAMBDA LPAREN name_list RPAREN expression .) ]


state 175

    (12) statement -> FUNCTION NAME = NAME LPAREN name_list . RPAREN
    (17) name_list -> name_list . COMMA NAME

    RPAREN          shift and go to state 177
    COMMA           shift and go to state 160



state 176

    (10) statement -> FUNCTION LBRACKET name_list RBRACKET = NAME . LPAREN name_list RPAREN
    (11) statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .

  ! shift/reduce conflict for LPAREN resolved as shift.
    LPAREN          shift and go to state 178
    COMMA           reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    SEMICOLON       reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    FUNCTION        reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    FOR             reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    WHILE           reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    IF              reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    ELSEIF          reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    ELSE            reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    BREAK           reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    CONTINUE        reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    RETURN          reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    SWITCH          reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    CASE            reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    OTHERWISE       reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    GLOBAL          reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    PERSISTENT      reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    TRY             reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    CATCH           reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    END             reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    NAME            reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    LAMBDA          reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    NOT             reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    -               reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    +               reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    LCURLY          reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    STRING          reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    :               reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    NUMBER          reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    LBRACKET        reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)
    $end            reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .)

  ! LPAREN          [ reduce using rule 11 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME .) ]


state 177

    (12) statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .

    COMMA           reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    SEMICOLON       reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    FUNCTION        reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    FOR             reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    WHILE           reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    IF              reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    ELSEIF          reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    ELSE            reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    BREAK           reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    CONTINUE        reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    RETURN          reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    SWITCH          reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    CASE            reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    OTHERWISE       reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    GLOBAL          reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    PERSISTENT      reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    TRY             reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    CATCH           reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    END             reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    NAME            reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    LAMBDA          reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    NOT             reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    -               reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    +               reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    LPAREN          reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    LCURLY          reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    STRING          reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    :               reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    NUMBER          reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    LBRACKET        reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)
    $end            reduce using rule 12 (statement -> FUNCTION NAME = NAME LPAREN name_list RPAREN .)



state 178

    (10) statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN . name_list RPAREN
    (17) name_list -> . name_list COMMA NAME
    (18) name_list -> . NAME

    NAME            shift and go to state 114


    name_list                      shift and go to state 179

state 179

    (10) statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list . RPAREN
    (17) name_list -> name_list . COMMA NAME

    RPAREN          shift and go to state 180
    COMMA           shift and go to state 160



state 180

    (10) statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .

    COMMA           reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    SEMICOLON       reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    FUNCTION        reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    FOR             reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    WHILE           reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    IF              reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    ELSEIF          reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    ELSE            reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    BREAK           reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    CONTINUE        reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    RETURN          reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    SWITCH          reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    CASE            reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    OTHERWISE       reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    GLOBAL          reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    PERSISTENT      reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    TRY             reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    CATCH           reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    END             reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    NAME            reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    LAMBDA          reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    NOT             reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    -               reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    +               reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    LPAREN          reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    LCURLY          reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    STRING          reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    :               reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    NUMBER          reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    LBRACKET        reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)
    $end            reduce using rule 10 (statement -> FUNCTION LBRACKET name_list RBRACKET = NAME LPAREN name_list RPAREN .)


